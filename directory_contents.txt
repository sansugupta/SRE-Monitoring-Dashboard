================================================================================
DIRECTORY CONTENT EXTRACTION
Root Path: /mnt/c/Users/sansk/OneDrive/Documents/GitHub/SRE-Monitoring-Dashboard
================================================================================


============================================================
DIRECTORY: /mnt/c/Users/sansk/OneDrive/Documents/GitHub/SRE-Monitoring-Dashboard
============================================================


----------------------------------------
FILE: /mnt/c/Users/sansk/OneDrive/Documents/GitHub/SRE-Monitoring-Dashboard/README.md
----------------------------------------
# SRE-Monitoring-Dashboard

----------------------------------------

----------------------------------------
FILE: /mnt/c/Users/sansk/OneDrive/Documents/GitHub/SRE-Monitoring-Dashboard/directory_contents.txt
----------------------------------------
[EMPTY FILE]

----------------------------------------

----------------------------------------
FILE: /mnt/c/Users/sansk/OneDrive/Documents/GitHub/SRE-Monitoring-Dashboard/eslint.config.js
----------------------------------------
import js from '@eslint/js';
import globals from 'globals';
import reactHooks from 'eslint-plugin-react-hooks';
import reactRefresh from 'eslint-plugin-react-refresh';
import tseslint from 'typescript-eslint';

export default tseslint.config(
  { ignores: ['dist'] },
  {
    extends: [js.configs.recommended, ...tseslint.configs.recommended],
    files: ['**/*.{ts,tsx}'],
    languageOptions: {
      ecmaVersion: 2020,
      globals: globals.browser,
    },
    plugins: {
      'react-hooks': reactHooks,
      'react-refresh': reactRefresh,
    },
    rules: {
      ...reactHooks.configs.recommended.rules,
      'react-refresh/only-export-components': [
        'warn',
        { allowConstantExport: true },
      ],
    },
  }
);

----------------------------------------

----------------------------------------
FILE: /mnt/c/Users/sansk/OneDrive/Documents/GitHub/SRE-Monitoring-Dashboard/index.html
----------------------------------------
<!doctype html>
<html lang="en">
  <head>
    <meta charset="UTF-8" />
    <link rel="icon" type="image/svg+xml" href="/vite.svg" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <title>Production Environment Monitoring Dashboard</title>
  </head>
  <body>
    <div id="root"></div>
    <script type="module" src="/src/main.tsx"></script>
  </body>
</html>

----------------------------------------

----------------------------------------
FILE: /mnt/c/Users/sansk/OneDrive/Documents/GitHub/SRE-Monitoring-Dashboard/package-lock.json
----------------------------------------
{
  "name": "advanced-sre-monitoring-dashboard",
  "version": "0.0.0",
  "lockfileVersion": 3,
  "requires": true,
  "packages": {
    "": {
      "name": "advanced-sre-monitoring-dashboard",
      "version": "0.0.0",
      "dependencies": {
        "date-fns": "^3.6.0",
        "lucide-react": "^0.344.0",
        "react": "^18.3.1",
        "react-dom": "^18.3.1",
        "react-hook-form": "^7.48.2",
        "react-hot-toast": "^2.4.1",
        "react-router-dom": "^6.20.1",
        "recharts": "^2.12.7"
      },
      "devDependencies": {
        "@eslint/js": "^9.9.1",
        "@types/react": "^18.3.5",
        "@types/react-dom": "^18.3.0",
        "@vitejs/plugin-react": "^4.3.1",
        "autoprefixer": "^10.4.18",
        "eslint": "^9.9.1",
        "eslint-plugin-react-hooks": "^5.1.0-rc.0",
        "eslint-plugin-react-refresh": "^0.4.11",
        "globals": "^15.9.0",
        "postcss": "^8.4.35",
        "tailwindcss": "^3.4.1",
        "typescript": "^5.5.3",
        "typescript-eslint": "^8.3.0",
        "vite": "^5.4.2"
      }
    },
    "node_modules/@alloc/quick-lru": {
      "version": "5.2.0",
      "resolved": "https://registry.npmjs.org/@alloc/quick-lru/-/quick-lru-5.2.0.tgz",
      "integrity": "sha512-UrcABB+4bUrFABwbluTIBErXwvbsU/V7TZWfmbgJfbkwiBuziS9gxdODUyuiecfdGQ85jglMW6juS3+z5TsKLw==",
      "dev": true,
      "engines": {
        "node": ">=10"
      },
      "funding": {
        "url": "https://github.com/sponsors/sindresorhus"
      }
    },
    "node_modules/@ampproject/remapping": {
      "version": "2.3.0",
      "resolved": "https://registry.npmjs.org/@ampproject/remapping/-/remapping-2.3.0.tgz",
      "integrity": "sha512-30iZtAPgz+LTIYoeivqYo853f02jBYSd5uGnGpkFV0M3xOt9aN73erkgYAmZU43x4VfqcnLxW9Kpg3R5LC4YYw==",
      "dev": true,
      "dependencies": {
        "@jridgewell/gen-mapping": "^0.3.5",
        "@jridgewell/trace-mapping": "^0.3.24"
      },
      "engines": {
        "node": ">=6.0.0"
      }
    },
    "node_modules/@babel/code-frame": {
      "version": "7.25.7",
      "resolved": "https://registry.npmjs.org/@babel/code-frame/-/code-frame-7.25.7.tgz",
      "integrity": "sha512-0xZJFNE5XMpENsgfHYTw8FbX4kv53mFLn2i3XPoq69LyhYSCBJtitaHx9QnsVTrsogI4Z3+HtEfZ2/GFPOtf5g==",
      "dev": true,
      "dependencies": {
        "@babel/highlight": "^7.25.7",
        "picocolors": "^1.0.0"
      },
      "engines": {
        "node": ">=6.9.0"
      }
    },
    "node_modules/@babel/compat-data": {
      "version": "7.25.7",
      "resolved": "https://registry.npmjs.org/@babel/compat-data/-/compat-data-7.25.7.tgz",
      "integrity": "sha512-9ickoLz+hcXCeh7jrcin+/SLWm+GkxE2kTvoYyp38p4WkdFXfQJxDFGWp/YHjiKLPx06z2A7W8XKuqbReXDzsw==",
      "dev": true,
      "engines": {
        "node": ">=6.9.0"
      }
    },
    "node_modules/@babel/core": {
      "version": "7.25.7",
      "resolved": "https://registry.npmjs.org/@babel/core/-/core-7.25.7.tgz",
      "integrity": "sha512-yJ474Zv3cwiSOO9nXJuqzvwEeM+chDuQ8GJirw+pZ91sCGCyOZ3dJkVE09fTV0VEVzXyLWhh3G/AolYTPX7Mow==",
      "dev": true,
      "dependencies": {
        "@ampproject/remapping": "^2.2.0",
        "@babel/code-frame": "^7.25.7",
        "@babel/generator": "^7.25.7",
        "@babel/helper-compilation-targets": "^7.25.7",
        "@babel/helper-module-transforms": "^7.25.7",
        "@babel/helpers": "^7.25.7",
        "@babel/parser": "^7.25.7",
        "@babel/template": "^7.25.7",
        "@babel/traverse": "^7.25.7",
        "@babel/types": "^7.25.7",
        "convert-source-map": "^2.0.0",
        "debug": "^4.1.0",
        "gensync": "^1.0.0-beta.2",
        "json5": "^2.2.3",
        "semver": "^6.3.1"
      },
      "engines": {
        "node": ">=6.9.0"
      },
      "funding": {
        "type": "opencollective",
        "url": "https://opencollective.com/babel"
      }
    },
    "node_modules/@babel/generator": {
      "version": "7.25.7",
      "resolved": "https://registry.npmjs.org/@babel/generator/-/generator-7.25.7.tgz",
      "integrity": "sha512-5Dqpl5fyV9pIAD62yK9P7fcA768uVPUyrQmqpqstHWgMma4feF1x/oFysBCVZLY5wJ2GkMUCdsNDnGZrPoR6rA==",
      "dev": true,
      "dependencies": {
        "@babel/types": "^7.25.7",
        "@jridgewell/gen-mapping": "^0.3.5",
        "@jridgewell/trace-mapping": "^0.3.25",
        "jsesc": "^3.0.2"
      },
      "engines": {
        "node": ">=6.9.0"
      }
    },
    "node_modules/@babel/helper-compilation-targets": {
      "version": "7.25.7",
      "resolved": "https://registry.npmjs.org/@babel/helper-compilation-targets/-/helper-compilation-targets-7.25.7.tgz",
      "integrity": "sha512-DniTEax0sv6isaw6qSQSfV4gVRNtw2rte8HHM45t9ZR0xILaufBRNkpMifCRiAPyvL4ACD6v0gfCwCmtOQaV4A==",
      "dev": true,
      "dependencies": {
        "@babel/compat-data": "^7.25.7",
        "@babel/helper-validator-option": "^7.25.7",
        "browserslist": "^4.24.0",
        "lru-cache": "^5.1.1",
        "semver": "^6.3.1"
      },
      "engines": {
        "node": ">=6.9.0"
      }
    },
    "node_modules/@babel/helper-module-imports": {
      "version": "7.25.7",
      "resolved": "https://registry.npmjs.org/@babel/helper-module-imports/-/helper-module-imports-7.25.7.tgz",
      "integrity": "sha512-o0xCgpNmRohmnoWKQ0Ij8IdddjyBFE4T2kagL/x6M3+4zUgc+4qTOUBoNe4XxDskt1HPKO007ZPiMgLDq2s7Kw==",
      "dev": true,
      "dependencies": {
        "@babel/traverse": "^7.25.7",
        "@babel/types": "^7.25.7"
      },
      "engines": {
        "node": ">=6.9.0"
      }
    },
    "node_modules/@babel/helper-module-transforms": {
      "version": "7.25.7",
      "resolved": "https://registry.npmjs.org/@babel/helper-module-transforms/-/helper-module-transforms-7.25.7.tgz",
      "integrity": "sha512-k/6f8dKG3yDz/qCwSM+RKovjMix563SLxQFo0UhRNo239SP6n9u5/eLtKD6EAjwta2JHJ49CsD8pms2HdNiMMQ==",
      "dev": true,
      "dependencies": {
        "@babel/helper-module-imports": "^7.25.7",
        "@babel/helper-simple-access": "^7.25.7",
        "@babel/helper-validator-identifier": "^7.25.7",
        "@babel/traverse": "^7.25.7"
      },
      "engines": {
        "node": ">=6.9.0"
      },
      "peerDependencies": {
        "@babel/core": "^7.0.0"
      }
    },
    "node_modules/@babel/helper-plugin-utils": {
      "version": "7.25.7",
      "resolved": "https://registry.npmjs.org/@babel/helper-plugin-utils/-/helper-plugin-utils-7.25.7.tgz",
      "integrity": "sha512-eaPZai0PiqCi09pPs3pAFfl/zYgGaE6IdXtYvmf0qlcDTd3WCtO7JWCcRd64e0EQrcYgiHibEZnOGsSY4QSgaw==",
      "dev": true,
      "engines": {
        "node": ">=6.9.0"
      }
    },
    "node_modules/@babel/helper-simple-access": {
      "version": "7.25.7",
      "resolved": "https://registry.npmjs.org/@babel/helper-simple-access/-/helper-simple-access-7.25.7.tgz",
      "integrity": "sha512-FPGAkJmyoChQeM+ruBGIDyrT2tKfZJO8NcxdC+CWNJi7N8/rZpSxK7yvBJ5O/nF1gfu5KzN7VKG3YVSLFfRSxQ==",
      "dev": true,
      "dependencies": {
        "@babel/traverse": "^7.25.7",
        "@babel/types": "^7.25.7"
      },
      "engines": {
        "node": ">=6.9.0"
      }
    },
    "node_modules/@babel/helper-string-parser": {
      "version": "7.25.7",
      "resolved": "https://registry.npmjs.org/@babel/helper-string-parser/-/helper-string-parser-7.25.7.tgz",
      "integrity": "sha512-CbkjYdsJNHFk8uqpEkpCvRs3YRp9tY6FmFY7wLMSYuGYkrdUi7r2lc4/wqsvlHoMznX3WJ9IP8giGPq68T/Y6g==",
      "dev": true,
      "engines": {
        "node": ">=6.9.0"
      }
    },
    "node_modules/@babel/helper-validator-identifier": {
      "version": "7.25.7",
      "resolved": "https://registry.npmjs.org/@babel/helper-validator-identifier/-/helper-validator-identifier-7.25.7.tgz",
      "integrity": "sha512-AM6TzwYqGChO45oiuPqwL2t20/HdMC1rTPAesnBCgPCSF1x3oN9MVUwQV2iyz4xqWrctwK5RNC8LV22kaQCNYg==",
      "dev": true,
      "engines": {
        "node": ">=6.9.0"
      }
    },
    "node_modules/@babel/helper-validator-option": {
      "version": "7.25.7",
      "resolved": "https://registry.npmjs.org/@babel/helper-validator-option/-/helper-validator-option-7.25.7.tgz",
      "integrity": "sha512-ytbPLsm+GjArDYXJ8Ydr1c/KJuutjF2besPNbIZnZ6MKUxi/uTA22t2ymmA4WFjZFpjiAMO0xuuJPqK2nvDVfQ==",
      "dev": true,
      "engines": {
        "node": ">=6.9.0"
      }
    },
    "node_modules/@babel/helpers": {
      "version": "7.25.7",
      "resolved": "https://registry.npmjs.org/@babel/helpers/-/helpers-7.25.7.tgz",
      "integrity": "sha512-Sv6pASx7Esm38KQpF/U/OXLwPPrdGHNKoeblRxgZRLXnAtnkEe4ptJPDtAZM7fBLadbc1Q07kQpSiGQ0Jg6tRA==",
      "dev": true,
      "dependencies": {
        "@babel/template": "^7.25.7",
        "@babel/types": "^7.25.7"
      },
      "engines": {
        "node": ">=6.9.0"
      }
    },
    "node_modules/@babel/highlight": {
      "version": "7.25.7",
      "resolved": "https://registry.npmjs.org/@babel/highlight/-/highlight-7.25.7.tgz",
      "integrity": "sha512-iYyACpW3iW8Fw+ZybQK+drQre+ns/tKpXbNESfrhNnPLIklLbXr7MYJ6gPEd0iETGLOK+SxMjVvKb/ffmk+FEw==",
      "dev": true,
      "dependencies": {
        "@babel/helper-validator-identifier": "^7.25.7",
        "chalk": "^2.4.2",
        "js-tokens": "^4.0.0",
        "picocolors": "^1.0.0"
      },
      "engines": {
        "node": ">=6.9.0"
      }
    },
    "node_modules/@babel/parser": {
      "version": "7.25.7",
      "resolved": "https://registry.npmjs.org/@babel/parser/-/parser-7.25.7.tgz",
      "integrity": "sha512-aZn7ETtQsjjGG5HruveUK06cU3Hljuhd9Iojm4M8WWv3wLE6OkE5PWbDUkItmMgegmccaITudyuW5RPYrYlgWw==",
      "dev": true,
      "dependencies": {
        "@babel/types": "^7.25.7"
      },
      "bin": {
        "parser": "bin/babel-parser.js"
      },
      "engines": {
        "node": ">=6.0.0"
      }
    },
    "node_modules/@babel/plugin-transform-react-jsx-self": {
      "version": "7.25.7",
      "resolved": "https://registry.npmjs.org/@babel/plugin-transform-react-jsx-self/-/plugin-transform-react-jsx-self-7.25.7.tgz",
      "integrity": "sha512-JD9MUnLbPL0WdVK8AWC7F7tTG2OS6u/AKKnsK+NdRhUiVdnzyR1S3kKQCaRLOiaULvUiqK6Z4JQE635VgtCFeg==",
      "dev": true,
      "dependencies": {
        "@babel/helper-plugin-utils": "^7.25.7"
      },
      "engines": {
        "node": ">=6.9.0"
      },
      "peerDependencies": {
        "@babel/core": "^7.0.0-0"
      }
    },
    "node_modules/@babel/plugin-transform-react-jsx-source": {
      "version": "7.25.7",
      "resolved": "https://registry.npmjs.org/@babel/plugin-transform-react-jsx-source/-/plugin-transform-react-jsx-source-7.25.7.tgz",
      "integrity": "sha512-S/JXG/KrbIY06iyJPKfxr0qRxnhNOdkNXYBl/rmwgDd72cQLH9tEGkDm/yJPGvcSIUoikzfjMios9i+xT/uv9w==",
      "dev": true,
      "dependencies": {
        "@babel/helper-plugin-utils": "^7.25.7"
      },
      "engines": {
        "node": ">=6.9.0"
      },
      "peerDependencies": {
        "@babel/core": "^7.0.0-0"
      }
    },
    "node_modules/@babel/runtime": {
      "version": "7.27.6",
      "resolved": "https://registry.npmjs.org/@babel/runtime/-/runtime-7.27.6.tgz",
      "integrity": "sha512-vbavdySgbTTrmFE+EsiqUTzlOr5bzlnJtUv9PynGCAKvfQqjIXbvFdumPM/GxMDfyuGMJaJAU6TO4zc1Jf1i8Q==",
      "license": "MIT",
      "engines": {
        "node": ">=6.9.0"
      }
    },
    "node_modules/@babel/template": {
      "version": "7.25.7",
      "resolved": "https://registry.npmjs.org/@babel/template/-/template-7.25.7.tgz",
      "integrity": "sha512-wRwtAgI3bAS+JGU2upWNL9lSlDcRCqD05BZ1n3X2ONLH1WilFP6O1otQjeMK/1g0pvYcXC7b/qVUB1keofjtZA==",
      "dev": true,
      "dependencies": {
        "@babel/code-frame": "^7.25.7",
        "@babel/parser": "^7.25.7",
        "@babel/types": "^7.25.7"
      },
      "engines": {
        "node": ">=6.9.0"
      }
    },
    "node_modules/@babel/traverse": {
      "version": "7.25.7",
      "resolved": "https://registry.npmjs.org/@babel/traverse/-/traverse-7.25.7.tgz",
      "integrity": "sha512-jatJPT1Zjqvh/1FyJs6qAHL+Dzb7sTb+xr7Q+gM1b+1oBsMsQQ4FkVKb6dFlJvLlVssqkRzV05Jzervt9yhnzg==",
      "dev": true,
      "dependencies": {
        "@babel/code-frame": "^7.25.7",
        "@babel/generator": "^7.25.7",
        "@babel/parser": "^7.25.7",
        "@babel/template": "^7.25.7",
        "@babel/types": "^7.25.7",
        "debug": "^4.3.1",
        "globals": "^11.1.0"
      },
      "engines": {
        "node": ">=6.9.0"
      }
    },
    "node_modules/@babel/traverse/node_modules/globals": {
      "version": "11.12.0",
      "resolved": "https://registry.npmjs.org/globals/-/globals-11.12.0.tgz",
      "integrity": "sha512-WOBp/EEGUiIsJSp7wcv/y6MO+lV9UoncWqxuFfm8eBwzWNgyfBd6Gz+IeKQ9jCmyhoH99g15M3T+QaVHFjizVA==",
      "dev": true,
      "engines": {
        "node": ">=4"
      }
    },
    "node_modules/@babel/types": {
      "version": "7.25.7",
      "resolved": "https://registry.npmjs.org/@babel/types/-/types-7.25.7.tgz",
      "integrity": "sha512-vwIVdXG+j+FOpkwqHRcBgHLYNL7XMkufrlaFvL9o6Ai9sJn9+PdyIL5qa0XzTZw084c+u9LOls53eoZWP/W5WQ==",
      "dev": true,
      "dependencies": {
        "@babel/helper-string-parser": "^7.25.7",
        "@babel/helper-validator-identifier": "^7.25.7",
        "to-fast-properties": "^2.0.0"
      },
      "engines": {
        "node": ">=6.9.0"
      }
    },
    "node_modules/@esbuild/aix-ppc64": {
      "version": "0.21.5",
      "resolved": "https://registry.npmjs.org/@esbuild/aix-ppc64/-/aix-ppc64-0.21.5.tgz",
      "integrity": "sha512-1SDgH6ZSPTlggy1yI6+Dbkiz8xzpHJEVAlF/AM1tHPLsf5STom9rwtjE4hKAF20FfXXNTFqEYXyJNWh1GiZedQ==",
      "cpu": [
        "ppc64"
      ],
      "dev": true,
      "optional": true,
      "os": [
        "aix"
      ],
      "engines": {
        "node": ">=12"
      }
    },
    "node_modules/@esbuild/android-arm": {
      "version": "0.21.5",
      "resolved": "https://registry.npmjs.org/@esbuild/android-arm/-/android-arm-0.21.5.tgz",
      "integrity": "sha512-vCPvzSjpPHEi1siZdlvAlsPxXl7WbOVUBBAowWug4rJHb68Ox8KualB+1ocNvT5fjv6wpkX6o/iEpbDrf68zcg==",
      "cpu": [
        "arm"
      ],
      "dev": true,
      "optional": true,
      "os": [
        "android"
      ],
      "engines": {
        "node": ">=12"
      }
    },
    "node_modules/@esbuild/android-arm64": {
      "version": "0.21.5",
      "resolved": "https://registry.npmjs.org/@esbuild/android-arm64/-/android-arm64-0.21.5.tgz",
      "integrity": "sha512-c0uX9VAUBQ7dTDCjq+wdyGLowMdtR/GoC2U5IYk/7D1H1JYC0qseD7+11iMP2mRLN9RcCMRcjC4YMclCzGwS/A==",
      "cpu": [
        "arm64"
      ],
      "dev": true,
      "optional": true,
      "os": [
        "android"
      ],
      "engines": {
        "node": ">=12"
      }
    },
    "node_modules/@esbuild/android-x64": {
      "version": "0.21.5",
      "resolved": "https://registry.npmjs.org/@esbuild/android-x64/-/android-x64-0.21.5.tgz",
      "integrity": "sha512-D7aPRUUNHRBwHxzxRvp856rjUHRFW1SdQATKXH2hqA0kAZb1hKmi02OpYRacl0TxIGz/ZmXWlbZgjwWYaCakTA==",
      "cpu": [
        "x64"
      ],
      "dev": true,
      "optional": true,
      "os": [
        "android"
      ],
      "engines": {
        "node": ">=12"
      }
    },
    "node_modules/@esbuild/darwin-arm64": {
      "version": "0.21.5",
      "resolved": "https://registry.npmjs.org/@esbuild/darwin-arm64/-/darwin-arm64-0.21.5.tgz",
      "integrity": "sha512-DwqXqZyuk5AiWWf3UfLiRDJ5EDd49zg6O9wclZ7kUMv2WRFr4HKjXp/5t8JZ11QbQfUS6/cRCKGwYhtNAY88kQ==",
      "cpu": [
        "arm64"
      ],
      "dev": true,
      "optional": true,
      "os": [
        "darwin"
      ],
      "engines": {
        "node": ">=12"
      }
    },
    "node_modules/@esbuild/darwin-x64": {
      "version": "0.21.5",
      "resolved": "https://registry.npmjs.org/@esbuild/darwin-x64/-/darwin-x64-0.21.5.tgz",
      "integrity": "sha512-se/JjF8NlmKVG4kNIuyWMV/22ZaerB+qaSi5MdrXtd6R08kvs2qCN4C09miupktDitvh8jRFflwGFBQcxZRjbw==",
      "cpu": [
        "x64"
      ],
      "dev": true,
      "optional": true,
      "os": [
        "darwin"
      ],
      "engines": {
        "node": ">=12"
      }
    },
    "node_modules/@esbuild/freebsd-arm64": {
      "version": "0.21.5",
      "resolved": "https://registry.npmjs.org/@esbuild/freebsd-arm64/-/freebsd-arm64-0.21.5.tgz",
      "integrity": "sha512-5JcRxxRDUJLX8JXp/wcBCy3pENnCgBR9bN6JsY4OmhfUtIHe3ZW0mawA7+RDAcMLrMIZaf03NlQiX9DGyB8h4g==",
      "cpu": [
        "arm64"
      ],
      "dev": true,
      "optional": true,
      "os": [
        "freebsd"
      ],
      "engines": {
        "node": ">=12"
      }
    },
    "node_modules/@esbuild/freebsd-x64": {
      "version": "0.21.5",
      "resolved": "https://registry.npmjs.org/@esbuild/freebsd-x64/-/freebsd-x64-0.21.5.tgz",
      "integrity": "sha512-J95kNBj1zkbMXtHVH29bBriQygMXqoVQOQYA+ISs0/2l3T9/kj42ow2mpqerRBxDJnmkUDCaQT/dfNXWX/ZZCQ==",
      "cpu": [
        "x64"
      ],
      "dev": true,
      "optional": true,
      "os": [
        "freebsd"
      ],
      "engines": {
        "node": ">=12"
      }
    },
    "node_modules/@esbuild/linux-arm": {
      "version": "0.21.5",
      "resolved": "https://registry.npmjs.org/@esbuild/linux-arm/-/linux-arm-0.21.5.tgz",
      "integrity": "sha512-bPb5AHZtbeNGjCKVZ9UGqGwo8EUu4cLq68E95A53KlxAPRmUyYv2D6F0uUI65XisGOL1hBP5mTronbgo+0bFcA==",
      "cpu": [
        "arm"
      ],
      "dev": true,
      "optional": true,
      "os": [
        "linux"
      ],
      "engines": {
        "node": ">=12"
      }
    },
    "node_modules/@esbuild/linux-arm64": {
      "version": "0.21.5",
      "resolved": "https://registry.npmjs.org/@esbuild/linux-arm64/-/linux-arm64-0.21.5.tgz",
      "integrity": "sha512-ibKvmyYzKsBeX8d8I7MH/TMfWDXBF3db4qM6sy+7re0YXya+K1cem3on9XgdT2EQGMu4hQyZhan7TeQ8XkGp4Q==",
      "cpu": [
        "arm64"
      ],
      "dev": true,
      "optional": true,
      "os": [
        "linux"
      ],
      "engines": {
        "node": ">=12"
      }
    },
    "node_modules/@esbuild/linux-ia32": {
      "version": "0.21.5",
      "resolved": "https://registry.npmjs.org/@esbuild/linux-ia32/-/linux-ia32-0.21.5.tgz",
      "integrity": "sha512-YvjXDqLRqPDl2dvRODYmmhz4rPeVKYvppfGYKSNGdyZkA01046pLWyRKKI3ax8fbJoK5QbxblURkwK/MWY18Tg==",
      "cpu": [
        "ia32"
      ],
      "dev": true,
      "optional": true,
      "os": [
        "linux"
      ],
      "engines": {
        "node": ">=12"
      }
    },
    "node_modules/@esbuild/linux-loong64": {
      "version": "0.21.5",
      "resolved": "https://registry.npmjs.org/@esbuild/linux-loong64/-/linux-loong64-0.21.5.tgz",
      "integrity": "sha512-uHf1BmMG8qEvzdrzAqg2SIG/02+4/DHB6a9Kbya0XDvwDEKCoC8ZRWI5JJvNdUjtciBGFQ5PuBlpEOXQj+JQSg==",
      "cpu": [
        "loong64"
      ],
      "dev": true,
      "optional": true,
      "os": [
        "linux"
      ],
      "engines": {
        "node": ">=12"
      }
    },
    "node_modules/@esbuild/linux-mips64el": {
      "version": "0.21.5",
      "resolved": "https://registry.npmjs.org/@esbuild/linux-mips64el/-/linux-mips64el-0.21.5.tgz",
      "integrity": "sha512-IajOmO+KJK23bj52dFSNCMsz1QP1DqM6cwLUv3W1QwyxkyIWecfafnI555fvSGqEKwjMXVLokcV5ygHW5b3Jbg==",
      "cpu": [
        "mips64el"
      ],
      "dev": true,
      "optional": true,
      "os": [
        "linux"
      ],
      "engines": {
        "node": ">=12"
      }
    },
    "node_modules/@esbuild/linux-ppc64": {
      "version": "0.21.5",
      "resolved": "https://registry.npmjs.org/@esbuild/linux-ppc64/-/linux-ppc64-0.21.5.tgz",
      "integrity": "sha512-1hHV/Z4OEfMwpLO8rp7CvlhBDnjsC3CttJXIhBi+5Aj5r+MBvy4egg7wCbe//hSsT+RvDAG7s81tAvpL2XAE4w==",
      "cpu": [
        "ppc64"
      ],
      "dev": true,
      "optional": true,
      "os": [
        "linux"
      ],
      "engines": {
        "node": ">=12"
      }
    },
    "node_modules/@esbuild/linux-riscv64": {
      "version": "0.21.5",
      "resolved": "https://registry.npmjs.org/@esbuild/linux-riscv64/-/linux-riscv64-0.21.5.tgz",
      "integrity": "sha512-2HdXDMd9GMgTGrPWnJzP2ALSokE/0O5HhTUvWIbD3YdjME8JwvSCnNGBnTThKGEB91OZhzrJ4qIIxk/SBmyDDA==",
      "cpu": [
        "riscv64"
      ],
      "dev": true,
      "optional": true,
      "os": [
        "linux"
      ],
      "engines": {
        "node": ">=12"
      }
    },
    "node_modules/@esbuild/linux-s390x": {
      "version": "0.21.5",
      "resolved": "https://registry.npmjs.org/@esbuild/linux-s390x/-/linux-s390x-0.21.5.tgz",
      "integrity": "sha512-zus5sxzqBJD3eXxwvjN1yQkRepANgxE9lgOW2qLnmr8ikMTphkjgXu1HR01K4FJg8h1kEEDAqDcZQtbrRnB41A==",
      "cpu": [
        "s390x"
      ],
      "dev": true,
      "optional": true,
      "os": [
        "linux"
      ],
      "engines": {
        "node": ">=12"
      }
    },
    "node_modules/@esbuild/linux-x64": {
      "version": "0.21.5",
      "resolved": "https://registry.npmjs.org/@esbuild/linux-x64/-/linux-x64-0.21.5.tgz",
      "integrity": "sha512-1rYdTpyv03iycF1+BhzrzQJCdOuAOtaqHTWJZCWvijKD2N5Xu0TtVC8/+1faWqcP9iBCWOmjmhoH94dH82BxPQ==",
      "cpu": [
        "x64"
      ],
      "dev": true,
      "optional": true,
      "os": [
        "linux"
      ],
      "engines": {
        "node": ">=12"
      }
    },
    "node_modules/@esbuild/netbsd-x64": {
      "version": "0.21.5",
      "resolved": "https://registry.npmjs.org/@esbuild/netbsd-x64/-/netbsd-x64-0.21.5.tgz",
      "integrity": "sha512-Woi2MXzXjMULccIwMnLciyZH4nCIMpWQAs049KEeMvOcNADVxo0UBIQPfSmxB3CWKedngg7sWZdLvLczpe0tLg==",
      "cpu": [
        "x64"
      ],
      "dev": true,
      "optional": true,
      "os": [
        "netbsd"
      ],
      "engines": {
        "node": ">=12"
      }
    },
    "node_modules/@esbuild/openbsd-x64": {
      "version": "0.21.5",
      "resolved": "https://registry.npmjs.org/@esbuild/openbsd-x64/-/openbsd-x64-0.21.5.tgz",
      "integrity": "sha512-HLNNw99xsvx12lFBUwoT8EVCsSvRNDVxNpjZ7bPn947b8gJPzeHWyNVhFsaerc0n3TsbOINvRP2byTZ5LKezow==",
      "cpu": [
        "x64"
      ],
      "dev": true,
      "optional": true,
      "os": [
        "openbsd"
      ],
      "engines": {
        "node": ">=12"
      }
    },
    "node_modules/@esbuild/sunos-x64": {
      "version": "0.21.5",
      "resolved": "https://registry.npmjs.org/@esbuild/sunos-x64/-/sunos-x64-0.21.5.tgz",
      "integrity": "sha512-6+gjmFpfy0BHU5Tpptkuh8+uw3mnrvgs+dSPQXQOv3ekbordwnzTVEb4qnIvQcYXq6gzkyTnoZ9dZG+D4garKg==",
      "cpu": [
        "x64"
      ],
      "dev": true,
      "optional": true,
      "os": [
        "sunos"
      ],
      "engines": {
        "node": ">=12"
      }
    },
    "node_modules/@esbuild/win32-arm64": {
      "version": "0.21.5",
      "resolved": "https://registry.npmjs.org/@esbuild/win32-arm64/-/win32-arm64-0.21.5.tgz",
      "integrity": "sha512-Z0gOTd75VvXqyq7nsl93zwahcTROgqvuAcYDUr+vOv8uHhNSKROyU961kgtCD1e95IqPKSQKH7tBTslnS3tA8A==",
      "cpu": [
        "arm64"
      ],
      "dev": true,
      "optional": true,
      "os": [
        "win32"
      ],
      "engines": {
        "node": ">=12"
      }
    },
    "node_modules/@esbuild/win32-ia32": {
      "version": "0.21.5",
      "resolved": "https://registry.npmjs.org/@esbuild/win32-ia32/-/win32-ia32-0.21.5.tgz",
      "integrity": "sha512-SWXFF1CL2RVNMaVs+BBClwtfZSvDgtL//G/smwAc5oVK/UPu2Gu9tIaRgFmYFFKrmg3SyAjSrElf0TiJ1v8fYA==",
      "cpu": [
        "ia32"
      ],
      "dev": true,
      "optional": true,
      "os": [
        "win32"
      ],
      "engines": {
        "node": ">=12"
      }
    },
    "node_modules/@esbuild/win32-x64": {
      "version": "0.21.5",
      "resolved": "https://registry.npmjs.org/@esbuild/win32-x64/-/win32-x64-0.21.5.tgz",
      "integrity": "sha512-tQd/1efJuzPC6rCFwEvLtci/xNFcTZknmXs98FYDfGE4wP9ClFV98nyKrzJKVPMhdDnjzLhdUyMX4PsQAPjwIw==",
      "cpu": [
        "x64"
      ],
      "dev": true,
      "optional": true,
      "os": [
        "win32"
      ],
      "engines": {
        "node": ">=12"
      }
    },
    "node_modules/@eslint-community/eslint-utils": {
      "version": "4.4.0",
      "resolved": "https://registry.npmjs.org/@eslint-community/eslint-utils/-/eslint-utils-4.4.0.tgz",
      "integrity": "sha512-1/sA4dwrzBAyeUoQ6oxahHKmrZvsnLCg4RfxW3ZFGGmQkSNQPFNLV9CUEFQP1x9EYXHTo5p6xdhZM1Ne9p/AfA==",
      "dev": true,
      "dependencies": {
        "eslint-visitor-keys": "^3.3.0"
      },
      "engines": {
        "node": "^12.22.0 || ^14.17.0 || >=16.0.0"
      },
      "peerDependencies": {
        "eslint": "^6.0.0 || ^7.0.0 || >=8.0.0"
      }
    },
    "node_modules/@eslint-community/eslint-utils/node_modules/eslint-visitor-keys": {
      "version": "3.4.3",
      "resolved": "https://registry.npmjs.org/eslint-visitor-keys/-/eslint-visitor-keys-3.4.3.tgz",
      "integrity": "sha512-wpc+LXeiyiisxPlEkUzU6svyS1frIO3Mgxj1fdy7Pm8Ygzguax2N3Fa/D/ag1WqbOprdI+uY6wMUl8/a2G+iag==",
      "dev": true,
      "engines": {
        "node": "^12.22.0 || ^14.17.0 || >=16.0.0"
      },
      "funding": {
        "url": "https://opencollective.com/eslint"
      }
    },
    "node_modules/@eslint-community/regexpp": {
      "version": "4.11.1",
      "resolved": "https://registry.npmjs.org/@eslint-community/regexpp/-/regexpp-4.11.1.tgz",
      "integrity": "sha512-m4DVN9ZqskZoLU5GlWZadwDnYo3vAEydiUayB9widCl9ffWx2IvPnp6n3on5rJmziJSw9Bv+Z3ChDVdMwXCY8Q==",
      "dev": true,
      "engines": {
        "node": "^12.0.0 || ^14.0.0 || >=16.0.0"
      }
    },
    "node_modules/@eslint/config-array": {
      "version": "0.18.0",
      "resolved": "https://registry.npmjs.org/@eslint/config-array/-/config-array-0.18.0.tgz",
      "integrity": "sha512-fTxvnS1sRMu3+JjXwJG0j/i4RT9u4qJ+lqS/yCGap4lH4zZGzQ7tu+xZqQmcMZq5OBZDL4QRxQzRjkWcGt8IVw==",
      "dev": true,
      "dependencies": {
        "@eslint/object-schema": "^2.1.4",
        "debug": "^4.3.1",
        "minimatch": "^3.1.2"
      },
      "engines": {
        "node": "^18.18.0 || ^20.9.0 || >=21.1.0"
      }
    },
    "node_modules/@eslint/core": {
      "version": "0.6.0",
      "resolved": "https://registry.npmjs.org/@eslint/core/-/core-0.6.0.tgz",
      "integrity": "sha512-8I2Q8ykA4J0x0o7cg67FPVnehcqWTBehu/lmY+bolPFHGjh49YzGBMXTvpqVgEbBdvNCSxj6iFgiIyHzf03lzg==",
      "dev": true,
      "engines": {
        "node": "^18.18.0 || ^20.9.0 || >=21.1.0"
      }
    },
    "node_modules/@eslint/eslintrc": {
      "version": "3.1.0",
      "resolved": "https://registry.npmjs.org/@eslint/eslintrc/-/eslintrc-3.1.0.tgz",
      "integrity": "sha512-4Bfj15dVJdoy3RfZmmo86RK1Fwzn6SstsvK9JS+BaVKqC6QQQQyXekNaC+g+LKNgkQ+2VhGAzm6hO40AhMR3zQ==",
      "dev": true,
      "dependencies": {
        "ajv": "^6.12.4",
        "debug": "^4.3.2",
        "espree": "^10.0.1",
        "globals": "^14.0.0",
        "ignore": "^5.2.0",
        "import-fresh": "^3.2.1",
        "js-yaml": "^4.1.0",
        "minimatch": "^3.1.2",
        "strip-json-comments": "^3.1.1"
      },
      "engines": {
        "node": "^18.18.0 || ^20.9.0 || >=21.1.0"
      },
      "funding": {
        "url": "https://opencollective.com/eslint"
      }
    },
    "node_modules/@eslint/eslintrc/node_modules/globals": {
      "version": "14.0.0",
      "resolved": "https://registry.npmjs.org/globals/-/globals-14.0.0.tgz",
      "integrity": "sha512-oahGvuMGQlPw/ivIYBjVSrWAfWLBeku5tpPE2fOPLi+WHffIWbuh2tCjhyQhTBPMf5E9jDEH4FOmTYgYwbKwtQ==",
      "dev": true,
      "engines": {
        "node": ">=18"
      },
      "funding": {
        "url": "https://github.com/sponsors/sindresorhus"
      }
    },
    "node_modules/@eslint/js": {
      "version": "9.12.0",
      "resolved": "https://registry.npmjs.org/@eslint/js/-/js-9.12.0.tgz",
      "integrity": "sha512-eohesHH8WFRUprDNyEREgqP6beG6htMeUYeCpkEgBCieCMme5r9zFWjzAJp//9S+Kub4rqE+jXe9Cp1a7IYIIA==",
      "dev": true,
      "engines": {
        "node": "^18.18.0 || ^20.9.0 || >=21.1.0"
      }
    },
    "node_modules/@eslint/object-schema": {
      "version": "2.1.4",
      "resolved": "https://registry.npmjs.org/@eslint/object-schema/-/object-schema-2.1.4.tgz",
      "integrity": "sha512-BsWiH1yFGjXXS2yvrf5LyuoSIIbPrGUWob917o+BTKuZ7qJdxX8aJLRxs1fS9n6r7vESrq1OUqb68dANcFXuQQ==",
      "dev": true,
      "engines": {
        "node": "^18.18.0 || ^20.9.0 || >=21.1.0"
      }
    },
    "node_modules/@eslint/plugin-kit": {
      "version": "0.2.0",
      "resolved": "https://registry.npmjs.org/@eslint/plugin-kit/-/plugin-kit-0.2.0.tgz",
      "integrity": "sha512-vH9PiIMMwvhCx31Af3HiGzsVNULDbyVkHXwlemn/B0TFj/00ho3y55efXrUZTfQipxoHC5u4xq6zblww1zm1Ig==",
      "dev": true,
      "dependencies": {
        "levn": "^0.4.1"
      },
      "engines": {
        "node": "^18.18.0 || ^20.9.0 || >=21.1.0"
      }
    },
    "node_modules/@humanfs/core": {
      "version": "0.19.0",
      "resolved": "https://registry.npmjs.org/@humanfs/core/-/core-0.19.0.tgz",
      "integrity": "sha512-2cbWIHbZVEweE853g8jymffCA+NCMiuqeECeBBLm8dg2oFdjuGJhgN4UAbI+6v0CKbbhvtXA4qV8YR5Ji86nmw==",
      "dev": true,
      "engines": {
        "node": ">=18.18.0"
      }
    },
    "node_modules/@humanfs/node": {
      "version": "0.16.5",
      "resolved": "https://registry.npmjs.org/@humanfs/node/-/node-0.16.5.tgz",
      "integrity": "sha512-KSPA4umqSG4LHYRodq31VDwKAvaTF4xmVlzM8Aeh4PlU1JQ3IG0wiA8C25d3RQ9nJyM3mBHyI53K06VVL/oFFg==",
      "dev": true,
      "dependencies": {
        "@humanfs/core": "^0.19.0",
        "@humanwhocodes/retry": "^0.3.0"
      },
      "engines": {
        "node": ">=18.18.0"
      }
    },
    "node_modules/@humanwhocodes/module-importer": {
      "version": "1.0.1",
      "resolved": "https://registry.npmjs.org/@humanwhocodes/module-importer/-/module-importer-1.0.1.tgz",
      "integrity": "sha512-bxveV4V8v5Yb4ncFTT3rPSgZBOpCkjfK0y4oVVVJwIuDVBRMDXrPyXRL988i5ap9m9bnyEEjWfm5WkBmtffLfA==",
      "dev": true,
      "engines": {
        "node": ">=12.22"
      },
      "funding": {
        "type": "github",
        "url": "https://github.com/sponsors/nzakas"
      }
    },
    "node_modules/@humanwhocodes/retry": {
      "version": "0.3.1",
      "resolved": "https://registry.npmjs.org/@humanwhocodes/retry/-/retry-0.3.1.tgz",
      "integrity": "sha512-JBxkERygn7Bv/GbN5Rv8Ul6LVknS+5Bp6RgDC/O8gEBU/yeH5Ui5C/OlWrTb6qct7LjjfT6Re2NxB0ln0yYybA==",
      "dev": true,
      "engines": {
        "node": ">=18.18"
      },
      "funding": {
        "type": "github",
        "url": "https://github.com/sponsors/nzakas"
      }
    },
    "node_modules/@isaacs/cliui": {
      "version": "8.0.2",
      "resolved": "https://registry.npmjs.org/@isaacs/cliui/-/cliui-8.0.2.tgz",
      "integrity": "sha512-O8jcjabXaleOG9DQ0+ARXWZBTfnP4WNAqzuiJK7ll44AmxGKv/J2M4TPjxjY3znBCfvBXFzucm1twdyFybFqEA==",
      "dev": true,
      "dependencies": {
        "string-width": "^5.1.2",
        "string-width-cjs": "npm:string-width@^4.2.0",
        "strip-ansi": "^7.0.1",
        "strip-ansi-cjs": "npm:strip-ansi@^6.0.1",
        "wrap-ansi": "^8.1.0",
        "wrap-ansi-cjs": "npm:wrap-ansi@^7.0.0"
      },
      "engines": {
        "node": ">=12"
      }
    },
    "node_modules/@jridgewell/gen-mapping": {
      "version": "0.3.5",
      "resolved": "https://registry.npmjs.org/@jridgewell/gen-mapping/-/gen-mapping-0.3.5.tgz",
      "integrity": "sha512-IzL8ZoEDIBRWEzlCcRhOaCupYyN5gdIK+Q6fbFdPDg6HqX6jpkItn7DFIpW9LQzXG6Df9sA7+OKnq0qlz/GaQg==",
      "dev": true,
      "dependencies": {
        "@jridgewell/set-array": "^1.2.1",
        "@jridgewell/sourcemap-codec": "^1.4.10",
        "@jridgewell/trace-mapping": "^0.3.24"
      },
      "engines": {
        "node": ">=6.0.0"
      }
    },
    "node_modules/@jridgewell/resolve-uri": {
      "version": "3.1.2",
      "resolved": "https://registry.npmjs.org/@jridgewell/resolve-uri/-/resolve-uri-3.1.2.tgz",
      "integrity": "sha512-bRISgCIjP20/tbWSPWMEi54QVPRZExkuD9lJL+UIxUKtwVJA8wW1Trb1jMs1RFXo1CBTNZ/5hpC9QvmKWdopKw==",
      "dev": true,
      "engines": {
        "node": ">=6.0.0"
      }
    },
    "node_modules/@jridgewell/set-array": {
      "version": "1.2.1",
      "resolved": "https://registry.npmjs.org/@jridgewell/set-array/-/set-array-1.2.1.tgz",
      "integrity": "sha512-R8gLRTZeyp03ymzP/6Lil/28tGeGEzhx1q2k703KGWRAI1VdvPIXdG70VJc2pAMw3NA6JKL5hhFu1sJX0Mnn/A==",
      "dev": true,
      "engines": {
        "node": ">=6.0.0"
      }
    },
    "node_modules/@jridgewell/sourcemap-codec": {
      "version": "1.5.0",
      "resolved": "https://registry.npmjs.org/@jridgewell/sourcemap-codec/-/sourcemap-codec-1.5.0.tgz",
      "integrity": "sha512-gv3ZRaISU3fjPAgNsriBRqGWQL6quFx04YMPW/zD8XMLsU32mhCCbfbO6KZFLjvYpCZ8zyDEgqsgf+PwPaM7GQ==",
      "dev": true
    },
    "node_modules/@jridgewell/trace-mapping": {
      "version": "0.3.25",
      "resolved": "https://registry.npmjs.org/@jridgewell/trace-mapping/-/trace-mapping-0.3.25.tgz",
      "integrity": "sha512-vNk6aEwybGtawWmy/PzwnGDOjCkLWSD2wqvjGGAgOAwCGWySYXfYoxt00IJkTF+8Lb57DwOb3Aa0o9CApepiYQ==",
      "dev": true,
      "dependencies": {
        "@jridgewell/resolve-uri": "^3.1.0",
        "@jridgewell/sourcemap-codec": "^1.4.14"
      }
    },
    "node_modules/@nodelib/fs.scandir": {
      "version": "2.1.5",
      "resolved": "https://registry.npmjs.org/@nodelib/fs.scandir/-/fs.scandir-2.1.5.tgz",
      "integrity": "sha512-vq24Bq3ym5HEQm2NKCr3yXDwjc7vTsEThRDnkp2DK9p1uqLR+DHurm/NOTo0KG7HYHU7eppKZj3MyqYuMBf62g==",
      "dev": true,
      "dependencies": {
        "@nodelib/fs.stat": "2.0.5",
        "run-parallel": "^1.1.9"
      },
      "engines": {
        "node": ">= 8"
      }
    },
    "node_modules/@nodelib/fs.stat": {
      "version": "2.0.5",
      "resolved": "https://registry.npmjs.org/@nodelib/fs.stat/-/fs.stat-2.0.5.tgz",
      "integrity": "sha512-RkhPPp2zrqDAQA/2jNhnztcPAlv64XdhIp7a7454A5ovI7Bukxgt7MX7udwAu3zg1DcpPU0rz3VV1SeaqvY4+A==",
      "dev": true,
      "engines": {
        "node": ">= 8"
      }
    },
    "node_modules/@nodelib/fs.walk": {
      "version": "1.2.8",
      "resolved": "https://registry.npmjs.org/@nodelib/fs.walk/-/fs.walk-1.2.8.tgz",
      "integrity": "sha512-oGB+UxlgWcgQkgwo8GcEGwemoTFt3FIO9ababBmaGwXIoBKZ+GTy0pP185beGg7Llih/NSHSV2XAs1lnznocSg==",
      "dev": true,
      "dependencies": {
        "@nodelib/fs.scandir": "2.1.5",
        "fastq": "^1.6.0"
      },
      "engines": {
        "node": ">= 8"
      }
    },
    "node_modules/@pkgjs/parseargs": {
      "version": "0.11.0",
      "resolved": "https://registry.npmjs.org/@pkgjs/parseargs/-/parseargs-0.11.0.tgz",
      "integrity": "sha512-+1VkjdD0QBLPodGrJUeqarH8VAIvQODIbwh9XpP5Syisf7YoQgsJKPNFoqqLQlu+VQ/tVSshMR6loPMn8U+dPg==",
      "dev": true,
      "optional": true,
      "engines": {
        "node": ">=14"
      }
    },
    "node_modules/@remix-run/router": {
      "version": "1.23.0",
      "resolved": "https://registry.npmjs.org/@remix-run/router/-/router-1.23.0.tgz",
      "integrity": "sha512-O3rHJzAQKamUz1fvE0Qaw0xSFqsA/yafi2iqeE0pvdFtCO1viYx8QL6f3Ln/aCCTLxs68SLf0KPM9eSeM8yBnA==",
      "license": "MIT",
      "engines": {
        "node": ">=14.0.0"
      }
    },
    "node_modules/@rollup/rollup-android-arm-eabi": {
      "version": "4.24.0",
      "resolved": "https://registry.npmjs.org/@rollup/rollup-android-arm-eabi/-/rollup-android-arm-eabi-4.24.0.tgz",
      "integrity": "sha512-Q6HJd7Y6xdB48x8ZNVDOqsbh2uByBhgK8PiQgPhwkIw/HC/YX5Ghq2mQY5sRMZWHb3VsFkWooUVOZHKr7DmDIA==",
      "cpu": [
        "arm"
      ],
      "dev": true,
      "optional": true,
      "os": [
        "android"
      ]
    },
    "node_modules/@rollup/rollup-android-arm64": {
      "version": "4.24.0",
      "resolved": "https://registry.npmjs.org/@rollup/rollup-android-arm64/-/rollup-android-arm64-4.24.0.tgz",
      "integrity": "sha512-ijLnS1qFId8xhKjT81uBHuuJp2lU4x2yxa4ctFPtG+MqEE6+C5f/+X/bStmxapgmwLwiL3ih122xv8kVARNAZA==",
      "cpu": [
        "arm64"
      ],
      "dev": true,
      "optional": true,
      "os": [
        "android"
      ]
    },
    "node_modules/@rollup/rollup-darwin-arm64": {
      "version": "4.24.0",
      "resolved": "https://registry.npmjs.org/@rollup/rollup-darwin-arm64/-/rollup-darwin-arm64-4.24.0.tgz",
      "integrity": "sha512-bIv+X9xeSs1XCk6DVvkO+S/z8/2AMt/2lMqdQbMrmVpgFvXlmde9mLcbQpztXm1tajC3raFDqegsH18HQPMYtA==",
      "cpu": [
        "arm64"
      ],
      "dev": true,
      "optional": true,
      "os": [
        "darwin"
      ]
    },
    "node_modules/@rollup/rollup-darwin-x64": {
      "version": "4.24.0",
      "resolved": "https://registry.npmjs.org/@rollup/rollup-darwin-x64/-/rollup-darwin-x64-4.24.0.tgz",
      "integrity": "sha512-X6/nOwoFN7RT2svEQWUsW/5C/fYMBe4fnLK9DQk4SX4mgVBiTA9h64kjUYPvGQ0F/9xwJ5U5UfTbl6BEjaQdBQ==",
      "cpu": [
        "x64"
      ],
      "dev": true,
      "optional": true,
      "os": [
        "darwin"
      ]
    },
    "node_modules/@rollup/rollup-linux-arm-gnueabihf": {
      "version": "4.24.0",
      "resolved": "https://registry.npmjs.org/@rollup/rollup-linux-arm-gnueabihf/-/rollup-linux-arm-gnueabihf-4.24.0.tgz",
      "integrity": "sha512-0KXvIJQMOImLCVCz9uvvdPgfyWo93aHHp8ui3FrtOP57svqrF/roSSR5pjqL2hcMp0ljeGlU4q9o/rQaAQ3AYA==",
      "cpu": [
        "arm"
      ],
      "dev": true,
      "optional": true,
      "os": [
        "linux"
      ]
    },
    "node_modules/@rollup/rollup-linux-arm-musleabihf": {
      "version": "4.24.0",
      "resolved": "https://registry.npmjs.org/@rollup/rollup-linux-arm-musleabihf/-/rollup-linux-arm-musleabihf-4.24.0.tgz",
      "integrity": "sha512-it2BW6kKFVh8xk/BnHfakEeoLPv8STIISekpoF+nBgWM4d55CZKc7T4Dx1pEbTnYm/xEKMgy1MNtYuoA8RFIWw==",
      "cpu": [
        "arm"
      ],
      "dev": true,
      "optional": true,
      "os": [
        "linux"
      ]
    },
    "node_modules/@rollup/rollup-linux-arm64-gnu": {
      "version": "4.24.0",
      "resolved": "https://registry.npmjs.org/@rollup/rollup-linux-arm64-gnu/-/rollup-linux-arm64-gnu-4.24.0.tgz",
      "integrity": "sha512-i0xTLXjqap2eRfulFVlSnM5dEbTVque/3Pi4g2y7cxrs7+a9De42z4XxKLYJ7+OhE3IgxvfQM7vQc43bwTgPwA==",
      "cpu": [
        "arm64"
      ],
      "dev": true,
      "optional": true,
      "os": [
        "linux"
      ]
    },
    "node_modules/@rollup/rollup-linux-arm64-musl": {
      "version": "4.24.0",
      "resolved": "https://registry.npmjs.org/@rollup/rollup-linux-arm64-musl/-/rollup-linux-arm64-musl-4.24.0.tgz",
      "integrity": "sha512-9E6MKUJhDuDh604Qco5yP/3qn3y7SLXYuiC0Rpr89aMScS2UAmK1wHP2b7KAa1nSjWJc/f/Lc0Wl1L47qjiyQw==",
      "cpu": [
        "arm64"
      ],
      "dev": true,
      "optional": true,
      "os": [
        "linux"
      ]
    },
    "node_modules/@rollup/rollup-linux-powerpc64le-gnu": {
      "version": "4.24.0",
      "resolved": "https://registry.npmjs.org/@rollup/rollup-linux-powerpc64le-gnu/-/rollup-linux-powerpc64le-gnu-4.24.0.tgz",
      "integrity": "sha512-2XFFPJ2XMEiF5Zi2EBf4h73oR1V/lycirxZxHZNc93SqDN/IWhYYSYj8I9381ikUFXZrz2v7r2tOVk2NBwxrWw==",
      "cpu": [
        "ppc64"
      ],
      "dev": true,
      "optional": true,
      "os": [
        "linux"
      ]
    },
    "node_modules/@rollup/rollup-linux-riscv64-gnu": {
      "version": "4.24.0",
      "resolved": "https://registry.npmjs.org/@rollup/rollup-linux-riscv64-gnu/-/rollup-linux-riscv64-gnu-4.24.0.tgz",
      "integrity": "sha512-M3Dg4hlwuntUCdzU7KjYqbbd+BLq3JMAOhCKdBE3TcMGMZbKkDdJ5ivNdehOssMCIokNHFOsv7DO4rlEOfyKpg==",
      "cpu": [
        "riscv64"
      ],
      "dev": true,
      "optional": true,
      "os": [
        "linux"
      ]
    },
    "node_modules/@rollup/rollup-linux-s390x-gnu": {
      "version": "4.24.0",
      "resolved": "https://registry.npmjs.org/@rollup/rollup-linux-s390x-gnu/-/rollup-linux-s390x-gnu-4.24.0.tgz",
      "integrity": "sha512-mjBaoo4ocxJppTorZVKWFpy1bfFj9FeCMJqzlMQGjpNPY9JwQi7OuS1axzNIk0nMX6jSgy6ZURDZ2w0QW6D56g==",
      "cpu": [
        "s390x"
      ],
      "dev": true,
      "optional": true,
      "os": [
        "linux"
      ]
    },
    "node_modules/@rollup/rollup-linux-x64-gnu": {
      "version": "4.24.0",
      "resolved": "https://registry.npmjs.org/@rollup/rollup-linux-x64-gnu/-/rollup-linux-x64-gnu-4.24.0.tgz",
      "integrity": "sha512-ZXFk7M72R0YYFN5q13niV0B7G8/5dcQ9JDp8keJSfr3GoZeXEoMHP/HlvqROA3OMbMdfr19IjCeNAnPUG93b6A==",
      "cpu": [
        "x64"
      ],
      "dev": true,
      "optional": true,
      "os": [
        "linux"
      ]
    },
    "node_modules/@rollup/rollup-linux-x64-musl": {
      "version": "4.24.0",
      "resolved": "https://registry.npmjs.org/@rollup/rollup-linux-x64-musl/-/rollup-linux-x64-musl-4.24.0.tgz",
      "integrity": "sha512-w1i+L7kAXZNdYl+vFvzSZy8Y1arS7vMgIy8wusXJzRrPyof5LAb02KGr1PD2EkRcl73kHulIID0M501lN+vobQ==",
      "cpu": [
        "x64"
      ],
      "dev": true,
      "optional": true,
      "os": [
        "linux"
      ]
    },
    "node_modules/@rollup/rollup-win32-arm64-msvc": {
      "version": "4.24.0",
      "resolved": "https://registry.npmjs.org/@rollup/rollup-win32-arm64-msvc/-/rollup-win32-arm64-msvc-4.24.0.tgz",
      "integrity": "sha512-VXBrnPWgBpVDCVY6XF3LEW0pOU51KbaHhccHw6AS6vBWIC60eqsH19DAeeObl+g8nKAz04QFdl/Cefta0xQtUQ==",
      "cpu": [
        "arm64"
      ],
      "dev": true,
      "optional": true,
      "os": [
        "win32"
      ]
    },
    "node_modules/@rollup/rollup-win32-ia32-msvc": {
      "version": "4.24.0",
      "resolved": "https://registry.npmjs.org/@rollup/rollup-win32-ia32-msvc/-/rollup-win32-ia32-msvc-4.24.0.tgz",
      "integrity": "sha512-xrNcGDU0OxVcPTH/8n/ShH4UevZxKIO6HJFK0e15XItZP2UcaiLFd5kiX7hJnqCbSztUF8Qot+JWBC/QXRPYWQ==",
      "cpu": [
        "ia32"
      ],
      "dev": true,
      "optional": true,
      "os": [
        "win32"
      ]
    },
    "node_modules/@rollup/rollup-win32-x64-msvc": {
      "version": "4.24.0",
      "resolved": "https://registry.npmjs.org/@rollup/rollup-win32-x64-msvc/-/rollup-win32-x64-msvc-4.24.0.tgz",
      "integrity": "sha512-fbMkAF7fufku0N2dE5TBXcNlg0pt0cJue4xBRE2Qc5Vqikxr4VCgKj/ht6SMdFcOacVA9rqF70APJ8RN/4vMJw==",
      "cpu": [
        "x64"
      ],
      "dev": true,
      "optional": true,
      "os": [
        "win32"
      ]
    },
    "node_modules/@types/babel__core": {
      "version": "7.20.5",
      "resolved": "https://registry.npmjs.org/@types/babel__core/-/babel__core-7.20.5.tgz",
      "integrity": "sha512-qoQprZvz5wQFJwMDqeseRXWv3rqMvhgpbXFfVyWhbx9X47POIA6i/+dXefEmZKoAgOaTdaIgNSMqMIU61yRyzA==",
      "dev": true,
      "dependencies": {
        "@babel/parser": "^7.20.7",
        "@babel/types": "^7.20.7",
        "@types/babel__generator": "*",
        "@types/babel__template": "*",
        "@types/babel__traverse": "*"
      }
    },
    "node_modules/@types/babel__generator": {
      "version": "7.6.8",
      "resolved": "https://registry.npmjs.org/@types/babel__generator/-/babel__generator-7.6.8.tgz",
      "integrity": "sha512-ASsj+tpEDsEiFr1arWrlN6V3mdfjRMZt6LtK/Vp/kreFLnr5QH5+DhvD5nINYZXzwJvXeGq+05iUXcAzVrqWtw==",
      "dev": true,
      "dependencies": {
        "@babel/types": "^7.0.0"
      }
    },
    "node_modules/@types/babel__template": {
      "version": "7.4.4",
      "resolved": "https://registry.npmjs.org/@types/babel__template/-/babel__template-7.4.4.tgz",
      "integrity": "sha512-h/NUaSyG5EyxBIp8YRxo4RMe2/qQgvyowRwVMzhYhBCONbW8PUsg4lkFMrhgZhUe5z3L3MiLDuvyJ/CaPa2A8A==",
      "dev": true,
      "dependencies": {
        "@babel/parser": "^7.1.0",
        "@babel/types": "^7.0.0"
      }
    },
    "node_modules/@types/babel__traverse": {
      "version": "7.20.6",
      "resolved": "https://registry.npmjs.org/@types/babel__traverse/-/babel__traverse-7.20.6.tgz",
      "integrity": "sha512-r1bzfrm0tomOI8g1SzvCaQHo6Lcv6zu0EA+W2kHrt8dyrHQxGzBBL4kdkzIS+jBMV+EYcMAEAqXqYaLJq5rOZg==",
      "dev": true,
      "dependencies": {
        "@babel/types": "^7.20.7"
      }
    },
    "node_modules/@types/d3-array": {
      "version": "3.2.1",
      "resolved": "https://registry.npmjs.org/@types/d3-array/-/d3-array-3.2.1.tgz",
      "integrity": "sha512-Y2Jn2idRrLzUfAKV2LyRImR+y4oa2AntrgID95SHJxuMUrkNXmanDSed71sRNZysveJVt1hLLemQZIady0FpEg==",
      "license": "MIT"
    },
    "node_modules/@types/d3-color": {
      "version": "3.1.3",
      "resolved": "https://registry.npmjs.org/@types/d3-color/-/d3-color-3.1.3.tgz",
      "integrity": "sha512-iO90scth9WAbmgv7ogoq57O9YpKmFBbmoEoCHDB2xMBY0+/KVrqAaCDyCE16dUspeOvIxFFRI+0sEtqDqy2b4A==",
      "license": "MIT"
    },
    "node_modules/@types/d3-ease": {
      "version": "3.0.2",
      "resolved": "https://registry.npmjs.org/@types/d3-ease/-/d3-ease-3.0.2.tgz",
      "integrity": "sha512-NcV1JjO5oDzoK26oMzbILE6HW7uVXOHLQvHshBUW4UMdZGfiY6v5BeQwh9a9tCzv+CeefZQHJt5SRgK154RtiA==",
      "license": "MIT"
    },
    "node_modules/@types/d3-interpolate": {
      "version": "3.0.4",
      "resolved": "https://registry.npmjs.org/@types/d3-interpolate/-/d3-interpolate-3.0.4.tgz",
      "integrity": "sha512-mgLPETlrpVV1YRJIglr4Ez47g7Yxjl1lj7YKsiMCb27VJH9W8NVM6Bb9d8kkpG/uAQS5AmbA48q2IAolKKo1MA==",
      "license": "MIT",
      "dependencies": {
        "@types/d3-color": "*"
      }
    },
    "node_modules/@types/d3-path": {
      "version": "3.1.1",
      "resolved": "https://registry.npmjs.org/@types/d3-path/-/d3-path-3.1.1.tgz",
      "integrity": "sha512-VMZBYyQvbGmWyWVea0EHs/BwLgxc+MKi1zLDCONksozI4YJMcTt8ZEuIR4Sb1MMTE8MMW49v0IwI5+b7RmfWlg==",
      "license": "MIT"
    },
    "node_modules/@types/d3-scale": {
      "version": "4.0.9",
      "resolved": "https://registry.npmjs.org/@types/d3-scale/-/d3-scale-4.0.9.tgz",
      "integrity": "sha512-dLmtwB8zkAeO/juAMfnV+sItKjlsw2lKdZVVy6LRr0cBmegxSABiLEpGVmSJJ8O08i4+sGR6qQtb6WtuwJdvVw==",
      "license": "MIT",
      "dependencies": {
        "@types/d3-time": "*"
      }
    },
    "node_modules/@types/d3-shape": {
      "version": "3.1.7",
      "resolved": "https://registry.npmjs.org/@types/d3-shape/-/d3-shape-3.1.7.tgz",
      "integrity": "sha512-VLvUQ33C+3J+8p+Daf+nYSOsjB4GXp19/S/aGo60m9h1v6XaxjiT82lKVWJCfzhtuZ3yD7i/TPeC/fuKLLOSmg==",
      "license": "MIT",
      "dependencies": {
        "@types/d3-path": "*"
      }
    },
    "node_modules/@types/d3-time": {
      "version": "3.0.4",
      "resolved": "https://registry.npmjs.org/@types/d3-time/-/d3-time-3.0.4.tgz",
      "integrity": "sha512-yuzZug1nkAAaBlBBikKZTgzCeA+k1uy4ZFwWANOfKw5z5LRhV0gNA7gNkKm7HoK+HRN0wX3EkxGk0fpbWhmB7g==",
      "license": "MIT"
    },
    "node_modules/@types/d3-timer": {
      "version": "3.0.2",
      "resolved": "https://registry.npmjs.org/@types/d3-timer/-/d3-timer-3.0.2.tgz",
      "integrity": "sha512-Ps3T8E8dZDam6fUyNiMkekK3XUsaUEik+idO9/YjPtfj2qruF8tFBXS7XhtE4iIXBLxhmLjP3SXpLhVf21I9Lw==",
      "license": "MIT"
    },
    "node_modules/@types/estree": {
      "version": "1.0.6",
      "resolved": "https://registry.npmjs.org/@types/estree/-/estree-1.0.6.tgz",
      "integrity": "sha512-AYnb1nQyY49te+VRAVgmzfcgjYS91mY5P0TKUDCLEM+gNnA+3T6rWITXRLYCpahpqSQbN5cE+gHpnPyXjHWxcw==",
      "dev": true
    },
    "node_modules/@types/json-schema": {
      "version": "7.0.15",
      "resolved": "https://registry.npmjs.org/@types/json-schema/-/json-schema-7.0.15.tgz",
      "integrity": "sha512-5+fP8P8MFNC+AyZCDxrB2pkZFPGzqQWUzpSeuuVLvm8VMcorNYavBqoFcxK8bQz4Qsbn4oUEEem4wDLfcysGHA==",
      "dev": true
    },
    "node_modules/@types/prop-types": {
      "version": "15.7.13",
      "resolved": "https://registry.npmjs.org/@types/prop-types/-/prop-types-15.7.13.tgz",
      "integrity": "sha512-hCZTSvwbzWGvhqxp/RqVqwU999pBf2vp7hzIjiYOsl8wqOmUxkQ6ddw1cV3l8811+kdUFus/q4d1Y3E3SyEifA==",
      "dev": true
    },
    "node_modules/@types/react": {
      "version": "18.3.11",
      "resolved": "https://registry.npmjs.org/@types/react/-/react-18.3.11.tgz",
      "integrity": "sha512-r6QZ069rFTjrEYgFdOck1gK7FLVsgJE7tTz0pQBczlBNUhBNk0MQH4UbnFSwjpQLMkLzgqvBBa+qGpLje16eTQ==",
      "dev": true,
      "dependencies": {
        "@types/prop-types": "*",
        "csstype": "^3.0.2"
      }
    },
    "node_modules/@types/react-dom": {
      "version": "18.3.0",
      "resolved": "https://registry.npmjs.org/@types/react-dom/-/react-dom-18.3.0.tgz",
      "integrity": "sha512-EhwApuTmMBmXuFOikhQLIBUn6uFg81SwLMOAUgodJF14SOBOCMdU04gDoYi0WOJJHD144TL32z4yDqCW3dnkQg==",
      "dev": true,
      "dependencies": {
        "@types/react": "*"
      }
    },
    "node_modules/@typescript-eslint/eslint-plugin": {
      "version": "8.8.1",
      "resolved": "https://registry.npmjs.org/@typescript-eslint/eslint-plugin/-/eslint-plugin-8.8.1.tgz",
      "integrity": "sha512-xfvdgA8AP/vxHgtgU310+WBnLB4uJQ9XdyP17RebG26rLtDrQJV3ZYrcopX91GrHmMoH8bdSwMRh2a//TiJ1jQ==",
      "dev": true,
      "dependencies": {
        "@eslint-community/regexpp": "^4.10.0",
        "@typescript-eslint/scope-manager": "8.8.1",
        "@typescript-eslint/type-utils": "8.8.1",
        "@typescript-eslint/utils": "8.8.1",
        "@typescript-eslint/visitor-keys": "8.8.1",
        "graphemer": "^1.4.0",
        "ignore": "^5.3.1",
        "natural-compare": "^1.4.0",
        "ts-api-utils": "^1.3.0"
      },
      "engines": {
        "node": "^18.18.0 || ^20.9.0 || >=21.1.0"
      },
      "funding": {
        "type": "opencollective",
        "url": "https://opencollective.com/typescript-eslint"
      },
      "peerDependencies": {
        "@typescript-eslint/parser": "^8.0.0 || ^8.0.0-alpha.0",
        "eslint": "^8.57.0 || ^9.0.0"
      },
      "peerDependenciesMeta": {
        "typescript": {
          "optional": true
        }
      }
    },
    "node_modules/@typescript-eslint/parser": {
      "version": "8.8.1",
      "resolved": "https://registry.npmjs.org/@typescript-eslint/parser/-/parser-8.8.1.tgz",
      "integrity": "sha512-hQUVn2Lij2NAxVFEdvIGxT9gP1tq2yM83m+by3whWFsWC+1y8pxxxHUFE1UqDu2VsGi2i6RLcv4QvouM84U+ow==",
      "dev": true,
      "dependencies": {
        "@typescript-eslint/scope-manager": "8.8.1",
        "@typescript-eslint/types": "8.8.1",
        "@typescript-eslint/typescript-estree": "8.8.1",
        "@typescript-eslint/visitor-keys": "8.8.1",
        "debug": "^4.3.4"
      },
      "engines": {
        "node": "^18.18.0 || ^20.9.0 || >=21.1.0"
      },
      "funding": {
        "type": "opencollective",
        "url": "https://opencollective.com/typescript-eslint"
      },
      "peerDependencies": {
        "eslint": "^8.57.0 || ^9.0.0"
      },
      "peerDependenciesMeta": {
        "typescript": {
          "optional": true
        }
      }
    },
    "node_modules/@typescript-eslint/scope-manager": {
      "version": "8.8.1",
      "resolved": "https://registry.npmjs.org/@typescript-eslint/scope-manager/-/scope-manager-8.8.1.tgz",
      "integrity": "sha512-X4JdU+66Mazev/J0gfXlcC/dV6JI37h+93W9BRYXrSn0hrE64IoWgVkO9MSJgEzoWkxONgaQpICWg8vAN74wlA==",
      "dev": true,
      "dependencies": {
        "@typescript-eslint/types": "8.8.1",
        "@typescript-eslint/visitor-keys": "8.8.1"
      },
      "engines": {
        "node": "^18.18.0 || ^20.9.0 || >=21.1.0"
      },
      "funding": {
        "type": "opencollective",
        "url": "https://opencollective.com/typescript-eslint"
      }
    },
    "node_modules/@typescript-eslint/type-utils": {
      "version": "8.8.1",
      "resolved": "https://registry.npmjs.org/@typescript-eslint/type-utils/-/type-utils-8.8.1.tgz",
      "integrity": "sha512-qSVnpcbLP8CALORf0za+vjLYj1Wp8HSoiI8zYU5tHxRVj30702Z1Yw4cLwfNKhTPWp5+P+k1pjmD5Zd1nhxiZA==",
      "dev": true,
      "dependencies": {
        "@typescript-eslint/typescript-estree": "8.8.1",
        "@typescript-eslint/utils": "8.8.1",
        "debug": "^4.3.4",
        "ts-api-utils": "^1.3.0"
      },
      "engines": {
        "node": "^18.18.0 || ^20.9.0 || >=21.1.0"
      },
      "funding": {
        "type": "opencollective",
        "url": "https://opencollective.com/typescript-eslint"
      },
      "peerDependenciesMeta": {
        "typescript": {
          "optional": true
        }
      }
    },
    "node_modules/@typescript-eslint/types": {
      "version": "8.8.1",
      "resolved": "https://registry.npmjs.org/@typescript-eslint/types/-/types-8.8.1.tgz",
      "integrity": "sha512-WCcTP4SDXzMd23N27u66zTKMuEevH4uzU8C9jf0RO4E04yVHgQgW+r+TeVTNnO1KIfrL8ebgVVYYMMO3+jC55Q==",
      "dev": true,
      "engines": {
        "node": "^18.18.0 || ^20.9.0 || >=21.1.0"
      },
      "funding": {
        "type": "opencollective",
        "url": "https://opencollective.com/typescript-eslint"
      }
    },
    "node_modules/@typescript-eslint/typescript-estree": {
      "version": "8.8.1",
      "resolved": "https://registry.npmjs.org/@typescript-eslint/typescript-estree/-/typescript-estree-8.8.1.tgz",
      "integrity": "sha512-A5d1R9p+X+1js4JogdNilDuuq+EHZdsH9MjTVxXOdVFfTJXunKJR/v+fNNyO4TnoOn5HqobzfRlc70NC6HTcdg==",
      "dev": true,
      "dependencies": {
        "@typescript-eslint/types": "8.8.1",
        "@typescript-eslint/visitor-keys": "8.8.1",
        "debug": "^4.3.4",
        "fast-glob": "^3.3.2",
        "is-glob": "^4.0.3",
        "minimatch": "^9.0.4",
        "semver": "^7.6.0",
        "ts-api-utils": "^1.3.0"
      },
      "engines": {
        "node": "^18.18.0 || ^20.9.0 || >=21.1.0"
      },
      "funding": {
        "type": "opencollective",
        "url": "https://opencollective.com/typescript-eslint"
      },
      "peerDependenciesMeta": {
        "typescript": {
          "optional": true
        }
      }
    },
    "node_modules/@typescript-eslint/typescript-estree/node_modules/brace-expansion": {
      "version": "2.0.1",
      "resolved": "https://registry.npmjs.org/brace-expansion/-/brace-expansion-2.0.1.tgz",
      "integrity": "sha512-XnAIvQ8eM+kC6aULx6wuQiwVsnzsi9d3WxzV3FpWTGA19F621kwdbsAcFKXgKUHZWsy+mY6iL1sHTxWEFCytDA==",
      "dev": true,
      "dependencies": {
        "balanced-match": "^1.0.0"
      }
    },
    "node_modules/@typescript-eslint/typescript-estree/node_modules/minimatch": {
      "version": "9.0.5",
      "resolved": "https://registry.npmjs.org/minimatch/-/minimatch-9.0.5.tgz",
      "integrity": "sha512-G6T0ZX48xgozx7587koeX9Ys2NYy6Gmv//P89sEte9V9whIapMNF4idKxnW2QtCcLiTWlb/wfCabAtAFWhhBow==",
      "dev": true,
      "dependencies": {
        "brace-expansion": "^2.0.1"
      },
      "engines": {
        "node": ">=16 || 14 >=14.17"
      },
      "funding": {
        "url": "https://github.com/sponsors/isaacs"
      }
    },
    "node_modules/@typescript-eslint/typescript-estree/node_modules/semver": {
      "version": "7.6.3",
      "resolved": "https://registry.npmjs.org/semver/-/semver-7.6.3.tgz",
      "integrity": "sha512-oVekP1cKtI+CTDvHWYFUcMtsK/00wmAEfyqKfNdARm8u1wNVhSgaX7A8d4UuIlUI5e84iEwOhs7ZPYRmzU9U6A==",
      "dev": true,
      "bin": {
        "semver": "bin/semver.js"
      },
      "engines": {
        "node": ">=10"
      }
    },
    "node_modules/@typescript-eslint/utils": {
      "version": "8.8.1",
      "resolved": "https://registry.npmjs.org/@typescript-eslint/utils/-/utils-8.8.1.tgz",
      "integrity": "sha512-/QkNJDbV0bdL7H7d0/y0qBbV2HTtf0TIyjSDTvvmQEzeVx8jEImEbLuOA4EsvE8gIgqMitns0ifb5uQhMj8d9w==",
      "dev": true,
      "dependencies": {
        "@eslint-community/eslint-utils": "^4.4.0",
        "@typescript-eslint/scope-manager": "8.8.1",
        "@typescript-eslint/types": "8.8.1",
        "@typescript-eslint/typescript-estree": "8.8.1"
      },
      "engines": {
        "node": "^18.18.0 || ^20.9.0 || >=21.1.0"
      },
      "funding": {
        "type": "opencollective",
        "url": "https://opencollective.com/typescript-eslint"
      },
      "peerDependencies": {
        "eslint": "^8.57.0 || ^9.0.0"
      }
    },
    "node_modules/@typescript-eslint/visitor-keys": {
      "version": "8.8.1",
      "resolved": "https://registry.npmjs.org/@typescript-eslint/visitor-keys/-/visitor-keys-8.8.1.tgz",
      "integrity": "sha512-0/TdC3aeRAsW7MDvYRwEc1Uwm0TIBfzjPFgg60UU2Haj5qsCs9cc3zNgY71edqE3LbWfF/WoZQd3lJoDXFQpag==",
      "dev": true,
      "dependencies": {
        "@typescript-eslint/types": "8.8.1",
        "eslint-visitor-keys": "^3.4.3"
      },
      "engines": {
        "node": "^18.18.0 || ^20.9.0 || >=21.1.0"
      },
      "funding": {
        "type": "opencollective",
        "url": "https://opencollective.com/typescript-eslint"
      }
    },
    "node_modules/@typescript-eslint/visitor-keys/node_modules/eslint-visitor-keys": {
      "version": "3.4.3",
      "resolved": "https://registry.npmjs.org/eslint-visitor-keys/-/eslint-visitor-keys-3.4.3.tgz",
      "integrity": "sha512-wpc+LXeiyiisxPlEkUzU6svyS1frIO3Mgxj1fdy7Pm8Ygzguax2N3Fa/D/ag1WqbOprdI+uY6wMUl8/a2G+iag==",
      "dev": true,
      "engines": {
        "node": "^12.22.0 || ^14.17.0 || >=16.0.0"
      },
      "funding": {
        "url": "https://opencollective.com/eslint"
      }
    },
    "node_modules/@vitejs/plugin-react": {
      "version": "4.3.2",
      "resolved": "https://registry.npmjs.org/@vitejs/plugin-react/-/plugin-react-4.3.2.tgz",
      "integrity": "sha512-hieu+o05v4glEBucTcKMK3dlES0OeJlD9YVOAPraVMOInBCwzumaIFiUjr4bHK7NPgnAHgiskUoceKercrN8vg==",
      "dev": true,
      "dependencies": {
        "@babel/core": "^7.25.2",
        "@babel/plugin-transform-react-jsx-self": "^7.24.7",
        "@babel/plugin-transform-react-jsx-source": "^7.24.7",
        "@types/babel__core": "^7.20.5",
        "react-refresh": "^0.14.2"
      },
      "engines": {
        "node": "^14.18.0 || >=16.0.0"
      },
      "peerDependencies": {
        "vite": "^4.2.0 || ^5.0.0"
      }
    },
    "node_modules/acorn": {
      "version": "8.12.1",
      "resolved": "https://registry.npmjs.org/acorn/-/acorn-8.12.1.tgz",
      "integrity": "sha512-tcpGyI9zbizT9JbV6oYE477V6mTlXvvi0T0G3SNIYE2apm/G5huBa1+K89VGeovbg+jycCrfhl3ADxErOuO6Jg==",
      "dev": true,
      "bin": {
        "acorn": "bin/acorn"
      },
      "engines": {
        "node": ">=0.4.0"
      }
    },
    "node_modules/acorn-jsx": {
      "version": "5.3.2",
      "resolved": "https://registry.npmjs.org/acorn-jsx/-/acorn-jsx-5.3.2.tgz",
      "integrity": "sha512-rq9s+JNhf0IChjtDXxllJ7g41oZk5SlXtp0LHwyA5cejwn7vKmKp4pPri6YEePv2PU65sAsegbXtIinmDFDXgQ==",
      "dev": true,
      "peerDependencies": {
        "acorn": "^6.0.0 || ^7.0.0 || ^8.0.0"
      }
    },
    "node_modules/ajv": {
      "version": "6.12.6",
      "resolved": "https://registry.npmjs.org/ajv/-/ajv-6.12.6.tgz",
      "integrity": "sha512-j3fVLgvTo527anyYyJOGTYJbG+vnnQYvE0m5mmkc1TK+nxAppkCLMIL0aZ4dblVCNoGShhm+kzE4ZUykBoMg4g==",
      "dev": true,
      "dependencies": {
        "fast-deep-equal": "^3.1.1",
        "fast-json-stable-stringify": "^2.0.0",
        "json-schema-traverse": "^0.4.1",
        "uri-js": "^4.2.2"
      },
      "funding": {
        "type": "github",
        "url": "https://github.com/sponsors/epoberezkin"
      }
    },
    "node_modules/ansi-regex": {
      "version": "6.1.0",
      "resolved": "https://registry.npmjs.org/ansi-regex/-/ansi-regex-6.1.0.tgz",
      "integrity": "sha512-7HSX4QQb4CspciLpVFwyRe79O3xsIZDDLER21kERQ71oaPodF8jL725AgJMFAYbooIqolJoRLuM81SpeUkpkvA==",
      "dev": true,
      "engines": {
        "node": ">=12"
      },
      "funding": {
        "url": "https://github.com/chalk/ansi-regex?sponsor=1"
      }
    },
    "node_modules/ansi-styles": {
      "version": "3.2.1",
      "resolved": "https://registry.npmjs.org/ansi-styles/-/ansi-styles-3.2.1.tgz",
      "integrity": "sha512-VT0ZI6kZRdTh8YyJw3SMbYm/u+NqfsAxEpWO0Pf9sq8/e94WxxOpPKx9FR1FlyCtOVDNOQ+8ntlqFxiRc+r5qA==",
      "dev": true,
      "dependencies": {
        "color-convert": "^1.9.0"
      },
      "engines": {
        "node": ">=4"
      }
    },
    "node_modules/any-promise": {
      "version": "1.3.0",
      "resolved": "https://registry.npmjs.org/any-promise/-/any-promise-1.3.0.tgz",
      "integrity": "sha512-7UvmKalWRt1wgjL1RrGxoSJW/0QZFIegpeGvZG9kjp8vrRu55XTHbwnqq2GpXm9uLbcuhxm3IqX9OB4MZR1b2A==",
      "dev": true
    },
    "node_modules/anymatch": {
      "version": "3.1.3",
      "resolved": "https://registry.npmjs.org/anymatch/-/anymatch-3.1.3.tgz",
      "integrity": "sha512-KMReFUr0B4t+D+OBkjR3KYqvocp2XaSzO55UcB6mgQMd3KbcE+mWTyvVV7D/zsdEbNnV6acZUutkiHQXvTr1Rw==",
      "dev": true,
      "dependencies": {
        "normalize-path": "^3.0.0",
        "picomatch": "^2.0.4"
      },
      "engines": {
        "node": ">= 8"
      }
    },
    "node_modules/arg": {
      "version": "5.0.2",
      "resolved": "https://registry.npmjs.org/arg/-/arg-5.0.2.tgz",
      "integrity": "sha512-PYjyFOLKQ9y57JvQ6QLo8dAgNqswh8M1RMJYdQduT6xbWSgK36P/Z/v+p888pM69jMMfS8Xd8F6I1kQ/I9HUGg==",
      "dev": true
    },
    "node_modules/argparse": {
      "version": "2.0.1",
      "resolved": "https://registry.npmjs.org/argparse/-/argparse-2.0.1.tgz",
      "integrity": "sha512-8+9WqebbFzpX9OR+Wa6O29asIogeRMzcGtAINdpMHHyAg10f05aSFVBbcEqGf/PXw1EjAZ+q2/bEBg3DvurK3Q==",
      "dev": true
    },
    "node_modules/autoprefixer": {
      "version": "10.4.20",
      "resolved": "https://registry.npmjs.org/autoprefixer/-/autoprefixer-10.4.20.tgz",
      "integrity": "sha512-XY25y5xSv/wEoqzDyXXME4AFfkZI0P23z6Fs3YgymDnKJkCGOnkL0iTxCa85UTqaSgfcqyf3UA6+c7wUvx/16g==",
      "dev": true,
      "funding": [
        {
          "type": "opencollective",
          "url": "https://opencollective.com/postcss/"
        },
        {
          "type": "tidelift",
          "url": "https://tidelift.com/funding/github/npm/autoprefixer"
        },
        {
          "type": "github",
          "url": "https://github.com/sponsors/ai"
        }
      ],
      "dependencies": {
        "browserslist": "^4.23.3",
        "caniuse-lite": "^1.0.30001646",
        "fraction.js": "^4.3.7",
        "normalize-range": "^0.1.2",
        "picocolors": "^1.0.1",
        "postcss-value-parser": "^4.2.0"
      },
      "bin": {
        "autoprefixer": "bin/autoprefixer"
      },
      "engines": {
        "node": "^10 || ^12 || >=14"
      },
      "peerDependencies": {
        "postcss": "^8.1.0"
      }
    },
    "node_modules/balanced-match": {
      "version": "1.0.2",
      "resolved": "https://registry.npmjs.org/balanced-match/-/balanced-match-1.0.2.tgz",
      "integrity": "sha512-3oSeUO0TMV67hN1AmbXsK4yaqU7tjiHlbxRDZOpH0KW9+CeX4bRAaX0Anxt0tx2MrpRpWwQaPwIlISEJhYU5Pw==",
      "dev": true
    },
    "node_modules/binary-extensions": {
      "version": "2.3.0",
      "resolved": "https://registry.npmjs.org/binary-extensions/-/binary-extensions-2.3.0.tgz",
      "integrity": "sha512-Ceh+7ox5qe7LJuLHoY0feh3pHuUDHAcRUeyL2VYghZwfpkNIy/+8Ocg0a3UuSoYzavmylwuLWQOf3hl0jjMMIw==",
      "dev": true,
      "engines": {
        "node": ">=8"
      },
      "funding": {
        "url": "https://github.com/sponsors/sindresorhus"
      }
    },
    "node_modules/brace-expansion": {
      "version": "1.1.11",
      "resolved": "https://registry.npmjs.org/brace-expansion/-/brace-expansion-1.1.11.tgz",
      "integrity": "sha512-iCuPHDFgrHX7H2vEI/5xpz07zSHB00TpugqhmYtVmMO6518mCuRMoOYFldEBl0g187ufozdaHgWKcYFb61qGiA==",
      "dev": true,
      "dependencies": {
        "balanced-match": "^1.0.0",
        "concat-map": "0.0.1"
      }
    },
    "node_modules/braces": {
      "version": "3.0.3",
      "resolved": "https://registry.npmjs.org/braces/-/braces-3.0.3.tgz",
      "integrity": "sha512-yQbXgO/OSZVD2IsiLlro+7Hf6Q18EJrKSEsdoMzKePKXct3gvD8oLcOQdIzGupr5Fj+EDe8gO/lxc1BzfMpxvA==",
      "dev": true,
      "dependencies": {
        "fill-range": "^7.1.1"
      },
      "engines": {
        "node": ">=8"
      }
    },
    "node_modules/browserslist": {
      "version": "4.24.0",
      "resolved": "https://registry.npmjs.org/browserslist/-/browserslist-4.24.0.tgz",
      "integrity": "sha512-Rmb62sR1Zpjql25eSanFGEhAxcFwfA1K0GuQcLoaJBAcENegrQut3hYdhXFF1obQfiDyqIW/cLM5HSJ/9k884A==",
      "dev": true,
      "funding": [
        {
          "type": "opencollective",
          "url": "https://opencollective.com/browserslist"
        },
        {
          "type": "tidelift",
          "url": "https://tidelift.com/funding/github/npm/browserslist"
        },
        {
          "type": "github",
          "url": "https://github.com/sponsors/ai"
        }
      ],
      "dependencies": {
        "caniuse-lite": "^1.0.30001663",
        "electron-to-chromium": "^1.5.28",
        "node-releases": "^2.0.18",
        "update-browserslist-db": "^1.1.0"
      },
      "bin": {
        "browserslist": "cli.js"
      },
      "engines": {
        "node": "^6 || ^7 || ^8 || ^9 || ^10 || ^11 || ^12 || >=13.7"
      }
    },
    "node_modules/callsites": {
      "version": "3.1.0",
      "resolved": "https://registry.npmjs.org/callsites/-/callsites-3.1.0.tgz",
      "integrity": "sha512-P8BjAsXvZS+VIDUI11hHCQEv74YT67YUi5JJFNWIqL235sBmjX4+qx9Muvls5ivyNENctx46xQLQ3aTuE7ssaQ==",
      "dev": true,
      "engines": {
        "node": ">=6"
      }
    },
    "node_modules/camelcase-css": {
      "version": "2.0.1",
      "resolved": "https://registry.npmjs.org/camelcase-css/-/camelcase-css-2.0.1.tgz",
      "integrity": "sha512-QOSvevhslijgYwRx6Rv7zKdMF8lbRmx+uQGx2+vDc+KI/eBnsy9kit5aj23AgGu3pa4t9AgwbnXWqS+iOY+2aA==",
      "dev": true,
      "engines": {
        "node": ">= 6"
      }
    },
    "node_modules/caniuse-lite": {
      "version": "1.0.30001667",
      "resolved": "https://registry.npmjs.org/caniuse-lite/-/caniuse-lite-1.0.30001667.tgz",
      "integrity": "sha512-7LTwJjcRkzKFmtqGsibMeuXmvFDfZq/nzIjnmgCGzKKRVzjD72selLDK1oPF/Oxzmt4fNcPvTDvGqSDG4tCALw==",
      "dev": true,
      "funding": [
        {
          "type": "opencollective",
          "url": "https://opencollective.com/browserslist"
        },
        {
          "type": "tidelift",
          "url": "https://tidelift.com/funding/github/npm/caniuse-lite"
        },
        {
          "type": "github",
          "url": "https://github.com/sponsors/ai"
        }
      ]
    },
    "node_modules/chalk": {
      "version": "2.4.2",
      "resolved": "https://registry.npmjs.org/chalk/-/chalk-2.4.2.tgz",
      "integrity": "sha512-Mti+f9lpJNcwF4tWV8/OrTTtF1gZi+f8FqlyAdouralcFWFQWF2+NgCHShjkCb+IFBLq9buZwE1xckQU4peSuQ==",
      "dev": true,
      "dependencies": {
        "ansi-styles": "^3.2.1",
        "escape-string-regexp": "^1.0.5",
        "supports-color": "^5.3.0"
      },
      "engines": {
        "node": ">=4"
      }
    },
    "node_modules/chokidar": {
      "version": "3.6.0",
      "resolved": "https://registry.npmjs.org/chokidar/-/chokidar-3.6.0.tgz",
      "integrity": "sha512-7VT13fmjotKpGipCW9JEQAusEPE+Ei8nl6/g4FBAmIm0GOOLMua9NDDo/DWp0ZAxCr3cPq5ZpBqmPAQgDda2Pw==",
      "dev": true,
      "dependencies": {
        "anymatch": "~3.1.2",
        "braces": "~3.0.2",
        "glob-parent": "~5.1.2",
        "is-binary-path": "~2.1.0",
        "is-glob": "~4.0.1",
        "normalize-path": "~3.0.0",
        "readdirp": "~3.6.0"
      },
      "engines": {
        "node": ">= 8.10.0"
      },
      "funding": {
        "url": "https://paulmillr.com/funding/"
      },
      "optionalDependencies": {
        "fsevents": "~2.3.2"
      }
    },
    "node_modules/chokidar/node_modules/glob-parent": {
      "version": "5.1.2",
      "resolved": "https://registry.npmjs.org/glob-parent/-/glob-parent-5.1.2.tgz",
      "integrity": "sha512-AOIgSQCepiJYwP3ARnGx+5VnTu2HBYdzbGP45eLw1vr3zB3vZLeyed1sC9hnbcOc9/SrMyM5RPQrkGz4aS9Zow==",
      "dev": true,
      "dependencies": {
        "is-glob": "^4.0.1"
      },
      "engines": {
        "node": ">= 6"
      }
    },
    "node_modules/clsx": {
      "version": "2.1.1",
      "resolved": "https://registry.npmjs.org/clsx/-/clsx-2.1.1.tgz",
      "integrity": "sha512-eYm0QWBtUrBWZWG0d386OGAw16Z995PiOVo2B7bjWSbHedGl5e0ZWaq65kOGgUSNesEIDkB9ISbTg/JK9dhCZA==",
      "license": "MIT",
      "engines": {
        "node": ">=6"
      }
    },
    "node_modules/color-convert": {
      "version": "1.9.3",
      "resolved": "https://registry.npmjs.org/color-convert/-/color-convert-1.9.3.tgz",
      "integrity": "sha512-QfAUtd+vFdAtFQcC8CCyYt1fYWxSqAiK2cSD6zDB8N3cpsEBAvRxp9zOGg6G/SHHJYAT88/az/IuDGALsNVbGg==",
      "dev": true,
      "dependencies": {
        "color-name": "1.1.3"
      }
    },
    "node_modules/color-name": {
      "version": "1.1.3",
      "resolved": "https://registry.npmjs.org/color-name/-/color-name-1.1.3.tgz",
      "integrity": "sha512-72fSenhMw2HZMTVHeCA9KCmpEIbzWiQsjN+BHcBbS9vr1mtt+vJjPdksIBNUmKAW8TFUDPJK5SUU3QhE9NEXDw==",
      "dev": true
    },
    "node_modules/commander": {
      "version": "4.1.1",
      "resolved": "https://registry.npmjs.org/commander/-/commander-4.1.1.tgz",
      "integrity": "sha512-NOKm8xhkzAjzFx8B2v5OAHT+u5pRQc2UCa2Vq9jYL/31o2wi9mxBA7LIFs3sV5VSC49z6pEhfbMULvShKj26WA==",
      "dev": true,
      "engines": {
        "node": ">= 6"
      }
    },
    "node_modules/concat-map": {
      "version": "0.0.1",
      "resolved": "https://registry.npmjs.org/concat-map/-/concat-map-0.0.1.tgz",
      "integrity": "sha512-/Srv4dswyQNBfohGpz9o6Yb3Gz3SrUDqBH5rTuhGR7ahtlbYKnVxw2bCFMRljaA7EXHaXZ8wsHdodFvbkhKmqg==",
      "dev": true
    },
    "node_modules/convert-source-map": {
      "version": "2.0.0",
      "resolved": "https://registry.npmjs.org/convert-source-map/-/convert-source-map-2.0.0.tgz",
      "integrity": "sha512-Kvp459HrV2FEJ1CAsi1Ku+MY3kasH19TFykTz2xWmMeq6bk2NU3XXvfJ+Q61m0xktWwt+1HSYf3JZsTms3aRJg==",
      "dev": true
    },
    "node_modules/cross-spawn": {
      "version": "7.0.3",
      "resolved": "https://registry.npmjs.org/cross-spawn/-/cross-spawn-7.0.3.tgz",
      "integrity": "sha512-iRDPJKUPVEND7dHPO8rkbOnPpyDygcDFtWjpeWNCgy8WP2rXcxXL8TskReQl6OrB2G7+UJrags1q15Fudc7G6w==",
      "dev": true,
      "dependencies": {
        "path-key": "^3.1.0",
        "shebang-command": "^2.0.0",
        "which": "^2.0.1"
      },
      "engines": {
        "node": ">= 8"
      }
    },
    "node_modules/cssesc": {
      "version": "3.0.0",
      "resolved": "https://registry.npmjs.org/cssesc/-/cssesc-3.0.0.tgz",
      "integrity": "sha512-/Tb/JcjK111nNScGob5MNtsntNM1aCNUDipB/TkwZFhyDrrE47SOx/18wF2bbjgc3ZzCSKW1T5nt5EbFoAz/Vg==",
      "dev": true,
      "bin": {
        "cssesc": "bin/cssesc"
      },
      "engines": {
        "node": ">=4"
      }
    },
    "node_modules/csstype": {
      "version": "3.1.3",
      "resolved": "https://registry.npmjs.org/csstype/-/csstype-3.1.3.tgz",
      "integrity": "sha512-M1uQkMl8rQK/szD0LNhtqxIPLpimGm8sOBwU7lLnCpSbTyY3yeU1Vc7l4KT5zT4s/yOxHH5O7tIuuLOCnLADRw=="
    },
    "node_modules/d3-array": {
      "version": "3.2.4",
      "resolved": "https://registry.npmjs.org/d3-array/-/d3-array-3.2.4.tgz",
      "integrity": "sha512-tdQAmyA18i4J7wprpYq8ClcxZy3SC31QMeByyCFyRt7BVHdREQZ5lpzoe5mFEYZUWe+oq8HBvk9JjpibyEV4Jg==",
      "license": "ISC",
      "dependencies": {
        "internmap": "1 - 2"
      },
      "engines": {
        "node": ">=12"
      }
    },
    "node_modules/d3-color": {
      "version": "3.1.0",
      "resolved": "https://registry.npmjs.org/d3-color/-/d3-color-3.1.0.tgz",
      "integrity": "sha512-zg/chbXyeBtMQ1LbD/WSoW2DpC3I0mpmPdW+ynRTj/x2DAWYrIY7qeZIHidozwV24m4iavr15lNwIwLxRmOxhA==",
      "license": "ISC",
      "engines": {
        "node": ">=12"
      }
    },
    "node_modules/d3-ease": {
      "version": "3.0.1",
      "resolved": "https://registry.npmjs.org/d3-ease/-/d3-ease-3.0.1.tgz",
      "integrity": "sha512-wR/XK3D3XcLIZwpbvQwQ5fK+8Ykds1ip7A2Txe0yxncXSdq1L9skcG7blcedkOX+ZcgxGAmLX1FrRGbADwzi0w==",
      "license": "BSD-3-Clause",
      "engines": {
        "node": ">=12"
      }
    },
    "node_modules/d3-format": {
      "version": "3.1.0",
      "resolved": "https://registry.npmjs.org/d3-format/-/d3-format-3.1.0.tgz",
      "integrity": "sha512-YyUI6AEuY/Wpt8KWLgZHsIU86atmikuoOmCfommt0LYHiQSPjvX2AcFc38PX0CBpr2RCyZhjex+NS/LPOv6YqA==",
      "license": "ISC",
      "engines": {
        "node": ">=12"
      }
    },
    "node_modules/d3-interpolate": {
      "version": "3.0.1",
      "resolved": "https://registry.npmjs.org/d3-interpolate/-/d3-interpolate-3.0.1.tgz",
      "integrity": "sha512-3bYs1rOD33uo8aqJfKP3JWPAibgw8Zm2+L9vBKEHJ2Rg+viTR7o5Mmv5mZcieN+FRYaAOWX5SJATX6k1PWz72g==",
      "license": "ISC",
      "dependencies": {
        "d3-color": "1 - 3"
      },
      "engines": {
        "node": ">=12"
      }
    },
    "node_modules/d3-path": {
      "version": "3.1.0",
      "resolved": "https://registry.npmjs.org/d3-path/-/d3-path-3.1.0.tgz",
      "integrity": "sha512-p3KP5HCf/bvjBSSKuXid6Zqijx7wIfNW+J/maPs+iwR35at5JCbLUT0LzF1cnjbCHWhqzQTIN2Jpe8pRebIEFQ==",
      "license": "ISC",
      "engines": {
        "node": ">=12"
      }
    },
    "node_modules/d3-scale": {
      "version": "4.0.2",
      "resolved": "https://registry.npmjs.org/d3-scale/-/d3-scale-4.0.2.tgz",
      "integrity": "sha512-GZW464g1SH7ag3Y7hXjf8RoUuAFIqklOAq3MRl4OaWabTFJY9PN/E1YklhXLh+OQ3fM9yS2nOkCoS+WLZ6kvxQ==",
      "license": "ISC",
      "dependencies": {
        "d3-array": "2.10.0 - 3",
        "d3-format": "1 - 3",
        "d3-interpolate": "1.2.0 - 3",
        "d3-time": "2.1.1 - 3",
        "d3-time-format": "2 - 4"
      },
      "engines": {
        "node": ">=12"
      }
    },
    "node_modules/d3-shape": {
      "version": "3.2.0",
      "resolved": "https://registry.npmjs.org/d3-shape/-/d3-shape-3.2.0.tgz",
      "integrity": "sha512-SaLBuwGm3MOViRq2ABk3eLoxwZELpH6zhl3FbAoJ7Vm1gofKx6El1Ib5z23NUEhF9AsGl7y+dzLe5Cw2AArGTA==",
      "license": "ISC",
      "dependencies": {
        "d3-path": "^3.1.0"
      },
      "engines": {
        "node": ">=12"
      }
    },
    "node_modules/d3-time": {
      "version": "3.1.0",
      "resolved": "https://registry.npmjs.org/d3-time/-/d3-time-3.1.0.tgz",
      "integrity": "sha512-VqKjzBLejbSMT4IgbmVgDjpkYrNWUYJnbCGo874u7MMKIWsILRX+OpX/gTk8MqjpT1A/c6HY2dCA77ZN0lkQ2Q==",
      "license": "ISC",
      "dependencies": {
        "d3-array": "2 - 3"
      },
      "engines": {
        "node": ">=12"
      }
    },
    "node_modules/d3-time-format": {
      "version": "4.1.0",
      "resolved": "https://registry.npmjs.org/d3-time-format/-/d3-time-format-4.1.0.tgz",
      "integrity": "sha512-dJxPBlzC7NugB2PDLwo9Q8JiTR3M3e4/XANkreKSUxF8vvXKqm1Yfq4Q5dl8budlunRVlUUaDUgFt7eA8D6NLg==",
      "license": "ISC",
      "dependencies": {
        "d3-time": "1 - 3"
      },
      "engines": {
        "node": ">=12"
      }
    },
    "node_modules/d3-timer": {
      "version": "3.0.1",
      "resolved": "https://registry.npmjs.org/d3-timer/-/d3-timer-3.0.1.tgz",
      "integrity": "sha512-ndfJ/JxxMd3nw31uyKoY2naivF+r29V+Lc0svZxe1JvvIRmi8hUsrMvdOwgS1o6uBHmiz91geQ0ylPP0aj1VUA==",
      "license": "ISC",
      "engines": {
        "node": ">=12"
      }
    },
    "node_modules/date-fns": {
      "version": "3.6.0",
      "resolved": "https://registry.npmjs.org/date-fns/-/date-fns-3.6.0.tgz",
      "integrity": "sha512-fRHTG8g/Gif+kSh50gaGEdToemgfj74aRX3swtiouboip5JDLAyDE9F11nHMIcvOaXeOC6D7SpNhi7uFyB7Uww==",
      "license": "MIT",
      "funding": {
        "type": "github",
        "url": "https://github.com/sponsors/kossnocorp"
      }
    },
    "node_modules/debug": {
      "version": "4.3.7",
      "resolved": "https://registry.npmjs.org/debug/-/debug-4.3.7.tgz",
      "integrity": "sha512-Er2nc/H7RrMXZBFCEim6TCmMk02Z8vLC2Rbi1KEBggpo0fS6l0S1nnapwmIi3yW/+GOJap1Krg4w0Hg80oCqgQ==",
      "dev": true,
      "dependencies": {
        "ms": "^2.1.3"
      },
      "engines": {
        "node": ">=6.0"
      },
      "peerDependenciesMeta": {
        "supports-color": {
          "optional": true
        }
      }
    },
    "node_modules/decimal.js-light": {
      "version": "2.5.1",
      "resolved": "https://registry.npmjs.org/decimal.js-light/-/decimal.js-light-2.5.1.tgz",
      "integrity": "sha512-qIMFpTMZmny+MMIitAB6D7iVPEorVw6YQRWkvarTkT4tBeSLLiHzcwj6q0MmYSFCiVpiqPJTJEYIrpcPzVEIvg==",
      "license": "MIT"
    },
    "node_modules/deep-is": {
      "version": "0.1.4",
      "resolved": "https://registry.npmjs.org/deep-is/-/deep-is-0.1.4.tgz",
      "integrity": "sha512-oIPzksmTg4/MriiaYGO+okXDT7ztn/w3Eptv/+gSIdMdKsJo0u4CfYNFJPy+4SKMuCqGw2wxnA+URMg3t8a/bQ==",
      "dev": true
    },
    "node_modules/didyoumean": {
      "version": "1.2.2",
      "resolved": "https://registry.npmjs.org/didyoumean/-/didyoumean-1.2.2.tgz",
      "integrity": "sha512-gxtyfqMg7GKyhQmb056K7M3xszy/myH8w+B4RT+QXBQsvAOdc3XymqDDPHx1BgPgsdAA5SIifona89YtRATDzw==",
      "dev": true
    },
    "node_modules/dlv": {
      "version": "1.1.3",
      "resolved": "https://registry.npmjs.org/dlv/-/dlv-1.1.3.tgz",
      "integrity": "sha512-+HlytyjlPKnIG8XuRG8WvmBP8xs8P71y+SKKS6ZXWoEgLuePxtDoUEiH7WkdePWrQ5JBpE6aoVqfZfJUQkjXwA==",
      "dev": true
    },
    "node_modules/dom-helpers": {
      "version": "5.2.1",
      "resolved": "https://registry.npmjs.org/dom-helpers/-/dom-helpers-5.2.1.tgz",
      "integrity": "sha512-nRCa7CK3VTrM2NmGkIy4cbK7IZlgBE/PYMn55rrXefr5xXDP0LdtfPnblFDoVdcAfslJ7or6iqAUnx0CCGIWQA==",
      "license": "MIT",
      "dependencies": {
        "@babel/runtime": "^7.8.7",
        "csstype": "^3.0.2"
      }
    },
    "node_modules/eastasianwidth": {
      "version": "0.2.0",
      "resolved": "https://registry.npmjs.org/eastasianwidth/-/eastasianwidth-0.2.0.tgz",
      "integrity": "sha512-I88TYZWc9XiYHRQ4/3c5rjjfgkjhLyW2luGIheGERbNQ6OY7yTybanSpDXZa8y7VUP9YmDcYa+eyq4ca7iLqWA==",
      "dev": true
    },
    "node_modules/electron-to-chromium": {
      "version": "1.5.33",
      "resolved": "https://registry.npmjs.org/electron-to-chromium/-/electron-to-chromium-1.5.33.tgz",
      "integrity": "sha512-+cYTcFB1QqD4j4LegwLfpCNxifb6dDFUAwk6RsLusCwIaZI6or2f+q8rs5tTB2YC53HhOlIbEaqHMAAC8IOIwA==",
      "dev": true
    },
    "node_modules/emoji-regex": {
      "version": "9.2.2",
      "resolved": "https://registry.npmjs.org/emoji-regex/-/emoji-regex-9.2.2.tgz",
      "integrity": "sha512-L18DaJsXSUk2+42pv8mLs5jJT2hqFkFE4j21wOmgbUqsZ2hL72NsUU785g9RXgo3s0ZNgVl42TiHp3ZtOv/Vyg==",
      "dev": true
    },
    "node_modules/esbuild": {
      "version": "0.21.5",
      "resolved": "https://registry.npmjs.org/esbuild/-/esbuild-0.21.5.tgz",
      "integrity": "sha512-mg3OPMV4hXywwpoDxu3Qda5xCKQi+vCTZq8S9J/EpkhB2HzKXq4SNFZE3+NK93JYxc8VMSep+lOUSC/RVKaBqw==",
      "dev": true,
      "hasInstallScript": true,
      "bin": {
        "esbuild": "bin/esbuild"
      },
      "engines": {
        "node": ">=12"
      },
      "optionalDependencies": {
        "@esbuild/aix-ppc64": "0.21.5",
        "@esbuild/android-arm": "0.21.5",
        "@esbuild/android-arm64": "0.21.5",
        "@esbuild/android-x64": "0.21.5",
        "@esbuild/darwin-arm64": "0.21.5",
        "@esbuild/darwin-x64": "0.21.5",
        "@esbuild/freebsd-arm64": "0.21.5",
        "@esbuild/freebsd-x64": "0.21.5",
        "@esbuild/linux-arm": "0.21.5",
        "@esbuild/linux-arm64": "0.21.5",
        "@esbuild/linux-ia32": "0.21.5",
        "@esbuild/linux-loong64": "0.21.5",
        "@esbuild/linux-mips64el": "0.21.5",
        "@esbuild/linux-ppc64": "0.21.5",
        "@esbuild/linux-riscv64": "0.21.5",
        "@esbuild/linux-s390x": "0.21.5",
        "@esbuild/linux-x64": "0.21.5",
        "@esbuild/netbsd-x64": "0.21.5",
        "@esbuild/openbsd-x64": "0.21.5",
        "@esbuild/sunos-x64": "0.21.5",
        "@esbuild/win32-arm64": "0.21.5",
        "@esbuild/win32-ia32": "0.21.5",
        "@esbuild/win32-x64": "0.21.5"
      }
    },
    "node_modules/escalade": {
      "version": "3.2.0",
      "resolved": "https://registry.npmjs.org/escalade/-/escalade-3.2.0.tgz",
      "integrity": "sha512-WUj2qlxaQtO4g6Pq5c29GTcWGDyd8itL8zTlipgECz3JesAiiOKotd8JU6otB3PACgG6xkJUyVhboMS+bje/jA==",
      "dev": true,
      "engines": {
        "node": ">=6"
      }
    },
    "node_modules/escape-string-regexp": {
      "version": "1.0.5",
      "resolved": "https://registry.npmjs.org/escape-string-regexp/-/escape-string-regexp-1.0.5.tgz",
      "integrity": "sha512-vbRorB5FUQWvla16U8R/qgaFIya2qGzwDrNmCZuYKrbdSUMG6I1ZCGQRefkRVhuOkIGVne7BQ35DSfo1qvJqFg==",
      "dev": true,
      "engines": {
        "node": ">=0.8.0"
      }
    },
    "node_modules/eslint": {
      "version": "9.12.0",
      "resolved": "https://registry.npmjs.org/eslint/-/eslint-9.12.0.tgz",
      "integrity": "sha512-UVIOlTEWxwIopRL1wgSQYdnVDcEvs2wyaO6DGo5mXqe3r16IoCNWkR29iHhyaP4cICWjbgbmFUGAhh0GJRuGZw==",
      "dev": true,
      "dependencies": {
        "@eslint-community/eslint-utils": "^4.2.0",
        "@eslint-community/regexpp": "^4.11.0",
        "@eslint/config-array": "^0.18.0",
        "@eslint/core": "^0.6.0",
        "@eslint/eslintrc": "^3.1.0",
        "@eslint/js": "9.12.0",
        "@eslint/plugin-kit": "^0.2.0",
        "@humanfs/node": "^0.16.5",
        "@humanwhocodes/module-importer": "^1.0.1",
        "@humanwhocodes/retry": "^0.3.1",
        "@types/estree": "^1.0.6",
        "@types/json-schema": "^7.0.15",
        "ajv": "^6.12.4",
        "chalk": "^4.0.0",
        "cross-spawn": "^7.0.2",
        "debug": "^4.3.2",
        "escape-string-regexp": "^4.0.0",
        "eslint-scope": "^8.1.0",
        "eslint-visitor-keys": "^4.1.0",
        "espree": "^10.2.0",
        "esquery": "^1.5.0",
        "esutils": "^2.0.2",
        "fast-deep-equal": "^3.1.3",
        "file-entry-cache": "^8.0.0",
        "find-up": "^5.0.0",
        "glob-parent": "^6.0.2",
        "ignore": "^5.2.0",
        "imurmurhash": "^0.1.4",
        "is-glob": "^4.0.0",
        "json-stable-stringify-without-jsonify": "^1.0.1",
        "lodash.merge": "^4.6.2",
        "minimatch": "^3.1.2",
        "natural-compare": "^1.4.0",
        "optionator": "^0.9.3",
        "text-table": "^0.2.0"
      },
      "bin": {
        "eslint": "bin/eslint.js"
      },
      "engines": {
        "node": "^18.18.0 || ^20.9.0 || >=21.1.0"
      },
      "funding": {
        "url": "https://eslint.org/donate"
      },
      "peerDependencies": {
        "jiti": "*"
      },
      "peerDependenciesMeta": {
        "jiti": {
          "optional": true
        }
      }
    },
    "node_modules/eslint-plugin-react-hooks": {
      "version": "5.1.0-rc-fb9a90fa48-20240614",
      "resolved": "https://registry.npmjs.org/eslint-plugin-react-hooks/-/eslint-plugin-react-hooks-5.1.0-rc-fb9a90fa48-20240614.tgz",
      "integrity": "sha512-xsiRwaDNF5wWNC4ZHLut+x/YcAxksUd9Rizt7LaEn3bV8VyYRpXnRJQlLOfYaVy9esk4DFP4zPPnoNVjq5Gc0w==",
      "dev": true,
      "engines": {
        "node": ">=10"
      },
      "peerDependencies": {
        "eslint": "^3.0.0 || ^4.0.0 || ^5.0.0 || ^6.0.0 || ^7.0.0 || ^8.0.0-0 || ^9.0.0"
      }
    },
    "node_modules/eslint-plugin-react-refresh": {
      "version": "0.4.12",
      "resolved": "https://registry.npmjs.org/eslint-plugin-react-refresh/-/eslint-plugin-react-refresh-0.4.12.tgz",
      "integrity": "sha512-9neVjoGv20FwYtCP6CB1dzR1vr57ZDNOXst21wd2xJ/cTlM2xLq0GWVlSNTdMn/4BtP6cHYBMCSp1wFBJ9jBsg==",
      "dev": true,
      "peerDependencies": {
        "eslint": ">=7"
      }
    },
    "node_modules/eslint-scope": {
      "version": "8.1.0",
      "resolved": "https://registry.npmjs.org/eslint-scope/-/eslint-scope-8.1.0.tgz",
      "integrity": "sha512-14dSvlhaVhKKsa9Fx1l8A17s7ah7Ef7wCakJ10LYk6+GYmP9yDti2oq2SEwcyndt6knfcZyhyxwY3i9yL78EQw==",
      "dev": true,
      "dependencies": {
        "esrecurse": "^4.3.0",
        "estraverse": "^5.2.0"
      },
      "engines": {
        "node": "^18.18.0 || ^20.9.0 || >=21.1.0"
      },
      "funding": {
        "url": "https://opencollective.com/eslint"
      }
    },
    "node_modules/eslint-visitor-keys": {
      "version": "4.1.0",
      "resolved": "https://registry.npmjs.org/eslint-visitor-keys/-/eslint-visitor-keys-4.1.0.tgz",
      "integrity": "sha512-Q7lok0mqMUSf5a/AdAZkA5a/gHcO6snwQClVNNvFKCAVlxXucdU8pKydU5ZVZjBx5xr37vGbFFWtLQYreLzrZg==",
      "dev": true,
      "engines": {
        "node": "^18.18.0 || ^20.9.0 || >=21.1.0"
      },
      "funding": {
        "url": "https://opencollective.com/eslint"
      }
    },
    "node_modules/eslint/node_modules/ansi-styles": {
      "version": "4.3.0",
      "resolved": "https://registry.npmjs.org/ansi-styles/-/ansi-styles-4.3.0.tgz",
      "integrity": "sha512-zbB9rCJAT1rbjiVDb2hqKFHNYLxgtk8NURxZ3IZwD3F6NtxbXZQCnnSi1Lkx+IDohdPlFp222wVALIheZJQSEg==",
      "dev": true,
      "dependencies": {
        "color-convert": "^2.0.1"
      },
      "engines": {
        "node": ">=8"
      },
      "funding": {
        "url": "https://github.com/chalk/ansi-styles?sponsor=1"
      }
    },
    "node_modules/eslint/node_modules/chalk": {
      "version": "4.1.2",
      "resolved": "https://registry.npmjs.org/chalk/-/chalk-4.1.2.tgz",
      "integrity": "sha512-oKnbhFyRIXpUuez8iBMmyEa4nbj4IOQyuhc/wy9kY7/WVPcwIO9VA668Pu8RkO7+0G76SLROeyw9CpQ061i4mA==",
      "dev": true,
      "dependencies": {
        "ansi-styles": "^4.1.0",
        "supports-color": "^7.1.0"
      },
      "engines": {
        "node": ">=10"
      },
      "funding": {
        "url": "https://github.com/chalk/chalk?sponsor=1"
      }
    },
    "node_modules/eslint/node_modules/color-convert": {
      "version": "2.0.1",
      "resolved": "https://registry.npmjs.org/color-convert/-/color-convert-2.0.1.tgz",
      "integrity": "sha512-RRECPsj7iu/xb5oKYcsFHSppFNnsj/52OVTRKb4zP5onXwVF3zVmmToNcOfGC+CRDpfK/U584fMg38ZHCaElKQ==",
      "dev": true,
      "dependencies": {
        "color-name": "~1.1.4"
      },
      "engines": {
        "node": ">=7.0.0"
      }
    },
    "node_modules/eslint/node_modules/color-name": {
      "version": "1.1.4",
      "resolved": "https://registry.npmjs.org/color-name/-/color-name-1.1.4.tgz",
      "integrity": "sha512-dOy+3AuW3a2wNbZHIuMZpTcgjGuLU/uBL/ubcZF9OXbDo8ff4O8yVp5Bf0efS8uEoYo5q4Fx7dY9OgQGXgAsQA==",
      "dev": true
    },
    "node_modules/eslint/node_modules/escape-string-regexp": {
      "version": "4.0.0",
      "resolved": "https://registry.npmjs.org/escape-string-regexp/-/escape-string-regexp-4.0.0.tgz",
      "integrity": "sha512-TtpcNJ3XAzx3Gq8sWRzJaVajRs0uVxA2YAkdb1jm2YkPz4G6egUFAyA3n5vtEIZefPk5Wa4UXbKuS5fKkJWdgA==",
      "dev": true,
      "engines": {
        "node": ">=10"
      },
      "funding": {
        "url": "https://github.com/sponsors/sindresorhus"
      }
    },
    "node_modules/eslint/node_modules/has-flag": {
      "version": "4.0.0",
      "resolved": "https://registry.npmjs.org/has-flag/-/has-flag-4.0.0.tgz",
      "integrity": "sha512-EykJT/Q1KjTWctppgIAgfSO0tKVuZUjhgMr17kqTumMl6Afv3EISleU7qZUzoXDFTAHTDC4NOoG/ZxU3EvlMPQ==",
      "dev": true,
      "engines": {
        "node": ">=8"
      }
    },
    "node_modules/eslint/node_modules/supports-color": {
      "version": "7.2.0",
      "resolved": "https://registry.npmjs.org/supports-color/-/supports-color-7.2.0.tgz",
      "integrity": "sha512-qpCAvRl9stuOHveKsn7HncJRvv501qIacKzQlO/+Lwxc9+0q2wLyv4Dfvt80/DPn2pqOBsJdDiogXGR9+OvwRw==",
      "dev": true,
      "dependencies": {
        "has-flag": "^4.0.0"
      },
      "engines": {
        "node": ">=8"
      }
    },
    "node_modules/espree": {
      "version": "10.2.0",
      "resolved": "https://registry.npmjs.org/espree/-/espree-10.2.0.tgz",
      "integrity": "sha512-upbkBJbckcCNBDBDXEbuhjbP68n+scUd3k/U2EkyM9nw+I/jPiL4cLF/Al06CF96wRltFda16sxDFrxsI1v0/g==",
      "dev": true,
      "dependencies": {
        "acorn": "^8.12.0",
        "acorn-jsx": "^5.3.2",
        "eslint-visitor-keys": "^4.1.0"
      },
      "engines": {
        "node": "^18.18.0 || ^20.9.0 || >=21.1.0"
      },
      "funding": {
        "url": "https://opencollective.com/eslint"
      }
    },
    "node_modules/esquery": {
      "version": "1.6.0",
      "resolved": "https://registry.npmjs.org/esquery/-/esquery-1.6.0.tgz",
      "integrity": "sha512-ca9pw9fomFcKPvFLXhBKUK90ZvGibiGOvRJNbjljY7s7uq/5YO4BOzcYtJqExdx99rF6aAcnRxHmcUHcz6sQsg==",
      "dev": true,
      "dependencies": {
        "estraverse": "^5.1.0"
      },
      "engines": {
        "node": ">=0.10"
      }
    },
    "node_modules/esrecurse": {
      "version": "4.3.0",
      "resolved": "https://registry.npmjs.org/esrecurse/-/esrecurse-4.3.0.tgz",
      "integrity": "sha512-KmfKL3b6G+RXvP8N1vr3Tq1kL/oCFgn2NYXEtqP8/L3pKapUA4G8cFVaoF3SU323CD4XypR/ffioHmkti6/Tag==",
      "dev": true,
      "dependencies": {
        "estraverse": "^5.2.0"
      },
      "engines": {
        "node": ">=4.0"
      }
    },
    "node_modules/estraverse": {
      "version": "5.3.0",
      "resolved": "https://registry.npmjs.org/estraverse/-/estraverse-5.3.0.tgz",
      "integrity": "sha512-MMdARuVEQziNTeJD8DgMqmhwR11BRQ/cBP+pLtYdSTnf3MIO8fFeiINEbX36ZdNlfU/7A9f3gUw49B3oQsvwBA==",
      "dev": true,
      "engines": {
        "node": ">=4.0"
      }
    },
    "node_modules/esutils": {
      "version": "2.0.3",
      "resolved": "https://registry.npmjs.org/esutils/-/esutils-2.0.3.tgz",
      "integrity": "sha512-kVscqXk4OCp68SZ0dkgEKVi6/8ij300KBWTJq32P/dYeWTSwK41WyTxalN1eRmA5Z9UU/LX9D7FWSmV9SAYx6g==",
      "dev": true,
      "engines": {
        "node": ">=0.10.0"
      }
    },
    "node_modules/eventemitter3": {
      "version": "4.0.7",
      "resolved": "https://registry.npmjs.org/eventemitter3/-/eventemitter3-4.0.7.tgz",
      "integrity": "sha512-8guHBZCwKnFhYdHr2ysuRWErTwhoN2X8XELRlrRwpmfeY2jjuUN4taQMsULKUVo1K4DvZl+0pgfyoysHxvmvEw==",
      "license": "MIT"
    },
    "node_modules/fast-deep-equal": {
      "version": "3.1.3",
      "resolved": "https://registry.npmjs.org/fast-deep-equal/-/fast-deep-equal-3.1.3.tgz",
      "integrity": "sha512-f3qQ9oQy9j2AhBe/H9VC91wLmKBCCU/gDOnKNAYG5hswO7BLKj09Hc5HYNz9cGI++xlpDCIgDaitVs03ATR84Q==",
      "dev": true
    },
    "node_modules/fast-equals": {
      "version": "5.2.2",
      "resolved": "https://registry.npmjs.org/fast-equals/-/fast-equals-5.2.2.tgz",
      "integrity": "sha512-V7/RktU11J3I36Nwq2JnZEM7tNm17eBJz+u25qdxBZeCKiX6BkVSZQjwWIr+IobgnZy+ag73tTZgZi7tr0LrBw==",
      "license": "MIT",
      "engines": {
        "node": ">=6.0.0"
      }
    },
    "node_modules/fast-glob": {
      "version": "3.3.2",
      "resolved": "https://registry.npmjs.org/fast-glob/-/fast-glob-3.3.2.tgz",
      "integrity": "sha512-oX2ruAFQwf/Orj8m737Y5adxDQO0LAB7/S5MnxCdTNDd4p6BsyIVsv9JQsATbTSq8KHRpLwIHbVlUNatxd+1Ow==",
      "dev": true,
      "dependencies": {
        "@nodelib/fs.stat": "^2.0.2",
        "@nodelib/fs.walk": "^1.2.3",
        "glob-parent": "^5.1.2",
        "merge2": "^1.3.0",
        "micromatch": "^4.0.4"
      },
      "engines": {
        "node": ">=8.6.0"
      }
    },
    "node_modules/fast-glob/node_modules/glob-parent": {
      "version": "5.1.2",
      "resolved": "https://registry.npmjs.org/glob-parent/-/glob-parent-5.1.2.tgz",
      "integrity": "sha512-AOIgSQCepiJYwP3ARnGx+5VnTu2HBYdzbGP45eLw1vr3zB3vZLeyed1sC9hnbcOc9/SrMyM5RPQrkGz4aS9Zow==",
      "dev": true,
      "dependencies": {
        "is-glob": "^4.0.1"
      },
      "engines": {
        "node": ">= 6"
      }
    },
    "node_modules/fast-json-stable-stringify": {
      "version": "2.1.0",
      "resolved": "https://registry.npmjs.org/fast-json-stable-stringify/-/fast-json-stable-stringify-2.1.0.tgz",
      "integrity": "sha512-lhd/wF+Lk98HZoTCtlVraHtfh5XYijIjalXck7saUtuanSDyLMxnHhSXEDJqHxD7msR8D0uCmqlkwjCV8xvwHw==",
      "dev": true
    },
    "node_modules/fast-levenshtein": {
      "version": "2.0.6",
      "resolved": "https://registry.npmjs.org/fast-levenshtein/-/fast-levenshtein-2.0.6.tgz",
      "integrity": "sha512-DCXu6Ifhqcks7TZKY3Hxp3y6qphY5SJZmrWMDrKcERSOXWQdMhU9Ig/PYrzyw/ul9jOIyh0N4M0tbC5hodg8dw==",
      "dev": true
    },
    "node_modules/fastq": {
      "version": "1.17.1",
      "resolved": "https://registry.npmjs.org/fastq/-/fastq-1.17.1.tgz",
      "integrity": "sha512-sRVD3lWVIXWg6By68ZN7vho9a1pQcN/WBFaAAsDDFzlJjvoGx0P8z7V1t72grFJfJhu3YPZBuu25f7Kaw2jN1w==",
      "dev": true,
      "dependencies": {
        "reusify": "^1.0.4"
      }
    },
    "node_modules/file-entry-cache": {
      "version": "8.0.0",
      "resolved": "https://registry.npmjs.org/file-entry-cache/-/file-entry-cache-8.0.0.tgz",
      "integrity": "sha512-XXTUwCvisa5oacNGRP9SfNtYBNAMi+RPwBFmblZEF7N7swHYQS6/Zfk7SRwx4D5j3CH211YNRco1DEMNVfZCnQ==",
      "dev": true,
      "dependencies": {
        "flat-cache": "^4.0.0"
      },
      "engines": {
        "node": ">=16.0.0"
      }
    },
    "node_modules/fill-range": {
      "version": "7.1.1",
      "resolved": "https://registry.npmjs.org/fill-range/-/fill-range-7.1.1.tgz",
      "integrity": "sha512-YsGpe3WHLK8ZYi4tWDg2Jy3ebRz2rXowDxnld4bkQB00cc/1Zw9AWnC0i9ztDJitivtQvaI9KaLyKrc+hBW0yg==",
      "dev": true,
      "dependencies": {
        "to-regex-range": "^5.0.1"
      },
      "engines": {
        "node": ">=8"
      }
    },
    "node_modules/find-up": {
      "version": "5.0.0",
      "resolved": "https://registry.npmjs.org/find-up/-/find-up-5.0.0.tgz",
      "integrity": "sha512-78/PXT1wlLLDgTzDs7sjq9hzz0vXD+zn+7wypEe4fXQxCmdmqfGsEPQxmiCSQI3ajFV91bVSsvNtrJRiW6nGng==",
      "dev": true,
      "dependencies": {
        "locate-path": "^6.0.0",
        "path-exists": "^4.0.0"
      },
      "engines": {
        "node": ">=10"
      },
      "funding": {
        "url": "https://github.com/sponsors/sindresorhus"
      }
    },
    "node_modules/flat-cache": {
      "version": "4.0.1",
      "resolved": "https://registry.npmjs.org/flat-cache/-/flat-cache-4.0.1.tgz",
      "integrity": "sha512-f7ccFPK3SXFHpx15UIGyRJ/FJQctuKZ0zVuN3frBo4HnK3cay9VEW0R6yPYFHC0AgqhukPzKjq22t5DmAyqGyw==",
      "dev": true,
      "dependencies": {
        "flatted": "^3.2.9",
        "keyv": "^4.5.4"
      },
      "engines": {
        "node": ">=16"
      }
    },
    "node_modules/flatted": {
      "version": "3.3.1",
      "resolved": "https://registry.npmjs.org/flatted/-/flatted-3.3.1.tgz",
      "integrity": "sha512-X8cqMLLie7KsNUDSdzeN8FYK9rEt4Dt67OsG/DNGnYTSDBG4uFAJFBnUeiV+zCVAvwFy56IjM9sH51jVaEhNxw==",
      "dev": true
    },
    "node_modules/foreground-child": {
      "version": "3.3.0",
      "resolved": "https://registry.npmjs.org/foreground-child/-/foreground-child-3.3.0.tgz",
      "integrity": "sha512-Ld2g8rrAyMYFXBhEqMz8ZAHBi4J4uS1i/CxGMDnjyFWddMXLVcDp051DZfu+t7+ab7Wv6SMqpWmyFIj5UbfFvg==",
      "dev": true,
      "dependencies": {
        "cross-spawn": "^7.0.0",
        "signal-exit": "^4.0.1"
      },
      "engines": {
        "node": ">=14"
      },
      "funding": {
        "url": "https://github.com/sponsors/isaacs"
      }
    },
    "node_modules/fraction.js": {
      "version": "4.3.7",
      "resolved": "https://registry.npmjs.org/fraction.js/-/fraction.js-4.3.7.tgz",
      "integrity": "sha512-ZsDfxO51wGAXREY55a7la9LScWpwv9RxIrYABrlvOFBlH/ShPnrtsXeuUIfXKKOVicNxQ+o8JTbJvjS4M89yew==",
      "dev": true,
      "engines": {
        "node": "*"
      },
      "funding": {
        "type": "patreon",
        "url": "https://github.com/sponsors/rawify"
      }
    },
    "node_modules/fsevents": {
      "version": "2.3.3",
      "resolved": "https://registry.npmjs.org/fsevents/-/fsevents-2.3.3.tgz",
      "integrity": "sha512-5xoDfX+fL7faATnagmWPpbFtwh/R77WmMMqqHGS65C3vvB0YHrgF+B1YmZ3441tMj5n63k0212XNoJwzlhffQw==",
      "dev": true,
      "hasInstallScript": true,
      "optional": true,
      "os": [
        "darwin"
      ],
      "engines": {
        "node": "^8.16.0 || ^10.6.0 || >=11.0.0"
      }
    },
    "node_modules/function-bind": {
      "version": "1.1.2",
      "resolved": "https://registry.npmjs.org/function-bind/-/function-bind-1.1.2.tgz",
      "integrity": "sha512-7XHNxH7qX9xG5mIwxkhumTox/MIRNcOgDrxWsMt2pAr23WHp6MrRlN7FBSFpCpr+oVO0F744iUgR82nJMfG2SA==",
      "dev": true,
      "funding": {
        "url": "https://github.com/sponsors/ljharb"
      }
    },
    "node_modules/gensync": {
      "version": "1.0.0-beta.2",
      "resolved": "https://registry.npmjs.org/gensync/-/gensync-1.0.0-beta.2.tgz",
      "integrity": "sha512-3hN7NaskYvMDLQY55gnW3NQ+mesEAepTqlg+VEbj7zzqEMBVNhzcGYYeqFo/TlYz6eQiFcp1HcsCZO+nGgS8zg==",
      "dev": true,
      "engines": {
        "node": ">=6.9.0"
      }
    },
    "node_modules/glob": {
      "version": "10.4.5",
      "resolved": "https://registry.npmjs.org/glob/-/glob-10.4.5.tgz",
      "integrity": "sha512-7Bv8RF0k6xjo7d4A/PxYLbUCfb6c+Vpd2/mB2yRDlew7Jb5hEXiCD9ibfO7wpk8i4sevK6DFny9h7EYbM3/sHg==",
      "dev": true,
      "dependencies": {
        "foreground-child": "^3.1.0",
        "jackspeak": "^3.1.2",
        "minimatch": "^9.0.4",
        "minipass": "^7.1.2",
        "package-json-from-dist": "^1.0.0",
        "path-scurry": "^1.11.1"
      },
      "bin": {
        "glob": "dist/esm/bin.mjs"
      },
      "funding": {
        "url": "https://github.com/sponsors/isaacs"
      }
    },
    "node_modules/glob-parent": {
      "version": "6.0.2",
      "resolved": "https://registry.npmjs.org/glob-parent/-/glob-parent-6.0.2.tgz",
      "integrity": "sha512-XxwI8EOhVQgWp6iDL+3b0r86f4d6AX6zSU55HfB4ydCEuXLXc5FcYeOu+nnGftS4TEju/11rt4KJPTMgbfmv4A==",
      "dev": true,
      "dependencies": {
        "is-glob": "^4.0.3"
      },
      "engines": {
        "node": ">=10.13.0"
      }
    },
    "node_modules/glob/node_modules/brace-expansion": {
      "version": "2.0.1",
      "resolved": "https://registry.npmjs.org/brace-expansion/-/brace-expansion-2.0.1.tgz",
      "integrity": "sha512-XnAIvQ8eM+kC6aULx6wuQiwVsnzsi9d3WxzV3FpWTGA19F621kwdbsAcFKXgKUHZWsy+mY6iL1sHTxWEFCytDA==",
      "dev": true,
      "dependencies": {
        "balanced-match": "^1.0.0"
      }
    },
    "node_modules/glob/node_modules/minimatch": {
      "version": "9.0.5",
      "resolved": "https://registry.npmjs.org/minimatch/-/minimatch-9.0.5.tgz",
      "integrity": "sha512-G6T0ZX48xgozx7587koeX9Ys2NYy6Gmv//P89sEte9V9whIapMNF4idKxnW2QtCcLiTWlb/wfCabAtAFWhhBow==",
      "dev": true,
      "dependencies": {
        "brace-expansion": "^2.0.1"
      },
      "engines": {
        "node": ">=16 || 14 >=14.17"
      },
      "funding": {
        "url": "https://github.com/sponsors/isaacs"
      }
    },
    "node_modules/globals": {
      "version": "15.11.0",
      "resolved": "https://registry.npmjs.org/globals/-/globals-15.11.0.tgz",
      "integrity": "sha512-yeyNSjdbyVaWurlwCpcA6XNBrHTMIeDdj0/hnvX/OLJ9ekOXYbLsLinH/MucQyGvNnXhidTdNhTtJaffL2sMfw==",
      "dev": true,
      "engines": {
        "node": ">=18"
      },
      "funding": {
        "url": "https://github.com/sponsors/sindresorhus"
      }
    },
    "node_modules/goober": {
      "version": "2.1.16",
      "resolved": "https://registry.npmjs.org/goober/-/goober-2.1.16.tgz",
      "integrity": "sha512-erjk19y1U33+XAMe1VTvIONHYoSqE4iS7BYUZfHaqeohLmnC0FdxEh7rQU+6MZ4OajItzjZFSRtVANrQwNq6/g==",
      "license": "MIT",
      "peerDependencies": {
        "csstype": "^3.0.10"
      }
    },
    "node_modules/graphemer": {
      "version": "1.4.0",
      "resolved": "https://registry.npmjs.org/graphemer/-/graphemer-1.4.0.tgz",
      "integrity": "sha512-EtKwoO6kxCL9WO5xipiHTZlSzBm7WLT627TqC/uVRd0HKmq8NXyebnNYxDoBi7wt8eTWrUrKXCOVaFq9x1kgag==",
      "dev": true
    },
    "node_modules/has-flag": {
      "version": "3.0.0",
      "resolved": "https://registry.npmjs.org/has-flag/-/has-flag-3.0.0.tgz",
      "integrity": "sha512-sKJf1+ceQBr4SMkvQnBDNDtf4TXpVhVGateu0t918bl30FnbE2m4vNLX+VWe/dpjlb+HugGYzW7uQXH98HPEYw==",
      "dev": true,
      "engines": {
        "node": ">=4"
      }
    },
    "node_modules/hasown": {
      "version": "2.0.2",
      "resolved": "https://registry.npmjs.org/hasown/-/hasown-2.0.2.tgz",
      "integrity": "sha512-0hJU9SCPvmMzIBdZFqNPXWa6dqh7WdH0cII9y+CyS8rG3nL48Bclra9HmKhVVUHyPWNH5Y7xDwAB7bfgSjkUMQ==",
      "dev": true,
      "dependencies": {
        "function-bind": "^1.1.2"
      },
      "engines": {
        "node": ">= 0.4"
      }
    },
    "node_modules/ignore": {
      "version": "5.3.2",
      "resolved": "https://registry.npmjs.org/ignore/-/ignore-5.3.2.tgz",
      "integrity": "sha512-hsBTNUqQTDwkWtcdYI2i06Y/nUBEsNEDJKjWdigLvegy8kDuJAS8uRlpkkcQpyEXL0Z/pjDy5HBmMjRCJ2gq+g==",
      "dev": true,
      "engines": {
        "node": ">= 4"
      }
    },
    "node_modules/import-fresh": {
      "version": "3.3.0",
      "resolved": "https://registry.npmjs.org/import-fresh/-/import-fresh-3.3.0.tgz",
      "integrity": "sha512-veYYhQa+D1QBKznvhUHxb8faxlrwUnxseDAbAp457E0wLNio2bOSKnjYDhMj+YiAq61xrMGhQk9iXVk5FzgQMw==",
      "dev": true,
      "dependencies": {
        "parent-module": "^1.0.0",
        "resolve-from": "^4.0.0"
      },
      "engines": {
        "node": ">=6"
      },
      "funding": {
        "url": "https://github.com/sponsors/sindresorhus"
      }
    },
    "node_modules/imurmurhash": {
      "version": "0.1.4",
      "resolved": "https://registry.npmjs.org/imurmurhash/-/imurmurhash-0.1.4.tgz",
      "integrity": "sha512-JmXMZ6wuvDmLiHEml9ykzqO6lwFbof0GG4IkcGaENdCRDDmMVnny7s5HsIgHCbaq0w2MyPhDqkhTUgS2LU2PHA==",
      "dev": true,
      "engines": {
        "node": ">=0.8.19"
      }
    },
    "node_modules/internmap": {
      "version": "2.0.3",
      "resolved": "https://registry.npmjs.org/internmap/-/internmap-2.0.3.tgz",
      "integrity": "sha512-5Hh7Y1wQbvY5ooGgPbDaL5iYLAPzMTUrjMulskHLH6wnv/A+1q5rgEaiuqEjB+oxGXIVZs1FF+R/KPN3ZSQYYg==",
      "license": "ISC",
      "engines": {
        "node": ">=12"
      }
    },
    "node_modules/is-binary-path": {
      "version": "2.1.0",
      "resolved": "https://registry.npmjs.org/is-binary-path/-/is-binary-path-2.1.0.tgz",
      "integrity": "sha512-ZMERYes6pDydyuGidse7OsHxtbI7WVeUEozgR/g7rd0xUimYNlvZRE/K2MgZTjWy725IfelLeVcEM97mmtRGXw==",
      "dev": true,
      "dependencies": {
        "binary-extensions": "^2.0.0"
      },
      "engines": {
        "node": ">=8"
      }
    },
    "node_modules/is-core-module": {
      "version": "2.15.1",
      "resolved": "https://registry.npmjs.org/is-core-module/-/is-core-module-2.15.1.tgz",
      "integrity": "sha512-z0vtXSwucUJtANQWldhbtbt7BnL0vxiFjIdDLAatwhDYty2bad6s+rijD6Ri4YuYJubLzIJLUidCh09e1djEVQ==",
      "dev": true,
      "dependencies": {
        "hasown": "^2.0.2"
      },
      "engines": {
        "node": ">= 0.4"
      },
      "funding": {
        "url": "https://github.com/sponsors/ljharb"
      }
    },
    "node_modules/is-extglob": {
      "version": "2.1.1",
      "resolved": "https://registry.npmjs.org/is-extglob/-/is-extglob-2.1.1.tgz",
      "integrity": "sha512-SbKbANkN603Vi4jEZv49LeVJMn4yGwsbzZworEoyEiutsN3nJYdbO36zfhGJ6QEDpOZIFkDtnq5JRxmvl3jsoQ==",
      "dev": true,
      "engines": {
        "node": ">=0.10.0"
      }
    },
    "node_modules/is-fullwidth-code-point": {
      "version": "3.0.0",
      "resolved": "https://registry.npmjs.org/is-fullwidth-code-point/-/is-fullwidth-code-point-3.0.0.tgz",
      "integrity": "sha512-zymm5+u+sCsSWyD9qNaejV3DFvhCKclKdizYaJUuHA83RLjb7nSuGnddCHGv0hk+KY7BMAlsWeK4Ueg6EV6XQg==",
      "dev": true,
      "engines": {
        "node": ">=8"
      }
    },
    "node_modules/is-glob": {
      "version": "4.0.3",
      "resolved": "https://registry.npmjs.org/is-glob/-/is-glob-4.0.3.tgz",
      "integrity": "sha512-xelSayHH36ZgE7ZWhli7pW34hNbNl8Ojv5KVmkJD4hBdD3th8Tfk9vYasLM+mXWOZhFkgZfxhLSnrwRr4elSSg==",
      "dev": true,
      "dependencies": {
        "is-extglob": "^2.1.1"
      },
      "engines": {
        "node": ">=0.10.0"
      }
    },
    "node_modules/is-number": {
      "version": "7.0.0",
      "resolved": "https://registry.npmjs.org/is-number/-/is-number-7.0.0.tgz",
      "integrity": "sha512-41Cifkg6e8TylSpdtTpeLVMqvSBEVzTttHvERD741+pnZ8ANv0004MRL43QKPDlK9cGvNp6NZWZUBlbGXYxxng==",
      "dev": true,
      "engines": {
        "node": ">=0.12.0"
      }
    },
    "node_modules/isexe": {
      "version": "2.0.0",
      "resolved": "https://registry.npmjs.org/isexe/-/isexe-2.0.0.tgz",
      "integrity": "sha512-RHxMLp9lnKHGHRng9QFhRCMbYAcVpn69smSGcq3f36xjgVVWThj4qqLbTLlq7Ssj8B+fIQ1EuCEGI2lKsyQeIw==",
      "dev": true
    },
    "node_modules/jackspeak": {
      "version": "3.4.3",
      "resolved": "https://registry.npmjs.org/jackspeak/-/jackspeak-3.4.3.tgz",
      "integrity": "sha512-OGlZQpz2yfahA/Rd1Y8Cd9SIEsqvXkLVoSw/cgwhnhFMDbsQFeZYoJJ7bIZBS9BcamUW96asq/npPWugM+RQBw==",
      "dev": true,
      "dependencies": {
        "@isaacs/cliui": "^8.0.2"
      },
      "funding": {
        "url": "https://github.com/sponsors/isaacs"
      },
      "optionalDependencies": {
        "@pkgjs/parseargs": "^0.11.0"
      }
    },
    "node_modules/jiti": {
      "version": "1.21.6",
      "resolved": "https://registry.npmjs.org/jiti/-/jiti-1.21.6.tgz",
      "integrity": "sha512-2yTgeWTWzMWkHu6Jp9NKgePDaYHbntiwvYuuJLbbN9vl7DC9DvXKOB2BC3ZZ92D3cvV/aflH0osDfwpHepQ53w==",
      "dev": true,
      "bin": {
        "jiti": "bin/jiti.js"
      }
    },
    "node_modules/js-tokens": {
      "version": "4.0.0",
      "resolved": "https://registry.npmjs.org/js-tokens/-/js-tokens-4.0.0.tgz",
      "integrity": "sha512-RdJUflcE3cUzKiMqQgsCu06FPu9UdIJO0beYbPhHN4k6apgJtifcoCtT9bcxOpYBtpD2kCM6Sbzg4CausW/PKQ=="
    },
    "node_modules/js-yaml": {
      "version": "4.1.0",
      "resolved": "https://registry.npmjs.org/js-yaml/-/js-yaml-4.1.0.tgz",
      "integrity": "sha512-wpxZs9NoxZaJESJGIZTyDEaYpl0FKSA+FB9aJiyemKhMwkxQg63h4T1KJgUGHpTqPDNRcmmYLugrRjJlBtWvRA==",
      "dev": true,
      "dependencies": {
        "argparse": "^2.0.1"
      },
      "bin": {
        "js-yaml": "bin/js-yaml.js"
      }
    },
    "node_modules/jsesc": {
      "version": "3.0.2",
      "resolved": "https://registry.npmjs.org/jsesc/-/jsesc-3.0.2.tgz",
      "integrity": "sha512-xKqzzWXDttJuOcawBt4KnKHHIf5oQ/Cxax+0PWFG+DFDgHNAdi+TXECADI+RYiFUMmx8792xsMbbgXj4CwnP4g==",
      "dev": true,
      "bin": {
        "jsesc": "bin/jsesc"
      },
      "engines": {
        "node": ">=6"
      }
    },
    "node_modules/json-buffer": {
      "version": "3.0.1",
      "resolved": "https://registry.npmjs.org/json-buffer/-/json-buffer-3.0.1.tgz",
      "integrity": "sha512-4bV5BfR2mqfQTJm+V5tPPdf+ZpuhiIvTuAB5g8kcrXOZpTT/QwwVRWBywX1ozr6lEuPdbHxwaJlm9G6mI2sfSQ==",
      "dev": true
    },
    "node_modules/json-schema-traverse": {
      "version": "0.4.1",
      "resolved": "https://registry.npmjs.org/json-schema-traverse/-/json-schema-traverse-0.4.1.tgz",
      "integrity": "sha512-xbbCH5dCYU5T8LcEhhuh7HJ88HXuW3qsI3Y0zOZFKfZEHcpWiHU/Jxzk629Brsab/mMiHQti9wMP+845RPe3Vg==",
      "dev": true
    },
    "node_modules/json-stable-stringify-without-jsonify": {
      "version": "1.0.1",
      "resolved": "https://registry.npmjs.org/json-stable-stringify-without-jsonify/-/json-stable-stringify-without-jsonify-1.0.1.tgz",
      "integrity": "sha512-Bdboy+l7tA3OGW6FjyFHWkP5LuByj1Tk33Ljyq0axyzdk9//JSi2u3fP1QSmd1KNwq6VOKYGlAu87CisVir6Pw==",
      "dev": true
    },
    "node_modules/json5": {
      "version": "2.2.3",
      "resolved": "https://registry.npmjs.org/json5/-/json5-2.2.3.tgz",
      "integrity": "sha512-XmOWe7eyHYH14cLdVPoyg+GOH3rYX++KpzrylJwSW98t3Nk+U8XOl8FWKOgwtzdb8lXGf6zYwDUzeHMWfxasyg==",
      "dev": true,
      "bin": {
        "json5": "lib/cli.js"
      },
      "engines": {
        "node": ">=6"
      }
    },
    "node_modules/keyv": {
      "version": "4.5.4",
      "resolved": "https://registry.npmjs.org/keyv/-/keyv-4.5.4.tgz",
      "integrity": "sha512-oxVHkHR/EJf2CNXnWxRLW6mg7JyCCUcG0DtEGmL2ctUo1PNTin1PUil+r/+4r5MpVgC/fn1kjsx7mjSujKqIpw==",
      "dev": true,
      "dependencies": {
        "json-buffer": "3.0.1"
      }
    },
    "node_modules/levn": {
      "version": "0.4.1",
      "resolved": "https://registry.npmjs.org/levn/-/levn-0.4.1.tgz",
      "integrity": "sha512-+bT2uH4E5LGE7h/n3evcS/sQlJXCpIp6ym8OWJ5eV6+67Dsql/LaaT7qJBAt2rzfoa/5QBGBhxDix1dMt2kQKQ==",
      "dev": true,
      "dependencies": {
        "prelude-ls": "^1.2.1",
        "type-check": "~0.4.0"
      },
      "engines": {
        "node": ">= 0.8.0"
      }
    },
    "node_modules/lilconfig": {
      "version": "3.1.3",
      "resolved": "https://registry.npmjs.org/lilconfig/-/lilconfig-3.1.3.tgz",
      "integrity": "sha512-/vlFKAoH5Cgt3Ie+JLhRbwOsCQePABiU3tJ1egGvyQ+33R/vcwM2Zl2QR/LzjsBeItPt3oSVXapn+m4nQDvpzw==",
      "dev": true,
      "license": "MIT",
      "engines": {
        "node": ">=14"
      },
      "funding": {
        "url": "https://github.com/sponsors/antonk52"
      }
    },
    "node_modules/lines-and-columns": {
      "version": "1.2.4",
      "resolved": "https://registry.npmjs.org/lines-and-columns/-/lines-and-columns-1.2.4.tgz",
      "integrity": "sha512-7ylylesZQ/PV29jhEDl3Ufjo6ZX7gCqJr5F7PKrqc93v7fzSymt1BpwEU8nAUXs8qzzvqhbjhK5QZg6Mt/HkBg==",
      "dev": true
    },
    "node_modules/locate-path": {
      "version": "6.0.0",
      "resolved": "https://registry.npmjs.org/locate-path/-/locate-path-6.0.0.tgz",
      "integrity": "sha512-iPZK6eYjbxRu3uB4/WZ3EsEIMJFMqAoopl3R+zuq0UjcAm/MO6KCweDgPfP3elTztoKP3KtnVHxTn2NHBSDVUw==",
      "dev": true,
      "dependencies": {
        "p-locate": "^5.0.0"
      },
      "engines": {
        "node": ">=10"
      },
      "funding": {
        "url": "https://github.com/sponsors/sindresorhus"
      }
    },
    "node_modules/lodash": {
      "version": "4.17.21",
      "resolved": "https://registry.npmjs.org/lodash/-/lodash-4.17.21.tgz",
      "integrity": "sha512-v2kDEe57lecTulaDIuNTPy3Ry4gLGJ6Z1O3vE1krgXZNrsQ+LFTGHVxVjcXPs17LhbZVGedAJv8XZ1tvj5FvSg==",
      "license": "MIT"
    },
    "node_modules/lodash.merge": {
      "version": "4.6.2",
      "resolved": "https://registry.npmjs.org/lodash.merge/-/lodash.merge-4.6.2.tgz",
      "integrity": "sha512-0KpjqXRVvrYyCsX1swR/XTK0va6VQkQM6MNo7PqW77ByjAhoARA8EfrP1N4+KlKj8YS0ZUCtRT/YUuhyYDujIQ==",
      "dev": true
    },
    "node_modules/loose-envify": {
      "version": "1.4.0",
      "resolved": "https://registry.npmjs.org/loose-envify/-/loose-envify-1.4.0.tgz",
      "integrity": "sha512-lyuxPGr/Wfhrlem2CL/UcnUc1zcqKAImBDzukY7Y5F/yQiNdko6+fRLevlw1HgMySw7f611UIY408EtxRSoK3Q==",
      "dependencies": {
        "js-tokens": "^3.0.0 || ^4.0.0"
      },
      "bin": {
        "loose-envify": "cli.js"
      }
    },
    "node_modules/lru-cache": {
      "version": "5.1.1",
      "resolved": "https://registry.npmjs.org/lru-cache/-/lru-cache-5.1.1.tgz",
      "integrity": "sha512-KpNARQA3Iwv+jTA0utUVVbrh+Jlrr1Fv0e56GGzAFOXN7dk/FviaDW8LHmK52DlcH4WP2n6gI8vN1aesBFgo9w==",
      "dev": true,
      "dependencies": {
        "yallist": "^3.0.2"
      }
    },
    "node_modules/lucide-react": {
      "version": "0.344.0",
      "resolved": "https://registry.npmjs.org/lucide-react/-/lucide-react-0.344.0.tgz",
      "integrity": "sha512-6YyBnn91GB45VuVT96bYCOKElbJzUHqp65vX8cDcu55MQL9T969v4dhGClpljamuI/+KMO9P6w9Acq1CVQGvIQ==",
      "peerDependencies": {
        "react": "^16.5.1 || ^17.0.0 || ^18.0.0"
      }
    },
    "node_modules/merge2": {
      "version": "1.4.1",
      "resolved": "https://registry.npmjs.org/merge2/-/merge2-1.4.1.tgz",
      "integrity": "sha512-8q7VEgMJW4J8tcfVPy8g09NcQwZdbwFEqhe/WZkoIzjn/3TGDwtOCYtXGxA3O8tPzpczCCDgv+P2P5y00ZJOOg==",
      "dev": true,
      "engines": {
        "node": ">= 8"
      }
    },
    "node_modules/micromatch": {
      "version": "4.0.8",
      "resolved": "https://registry.npmjs.org/micromatch/-/micromatch-4.0.8.tgz",
      "integrity": "sha512-PXwfBhYu0hBCPw8Dn0E+WDYb7af3dSLVWKi3HGv84IdF4TyFoC0ysxFd0Goxw7nSv4T/PzEJQxsYsEiFCKo2BA==",
      "dev": true,
      "dependencies": {
        "braces": "^3.0.3",
        "picomatch": "^2.3.1"
      },
      "engines": {
        "node": ">=8.6"
      }
    },
    "node_modules/minimatch": {
      "version": "3.1.2",
      "resolved": "https://registry.npmjs.org/minimatch/-/minimatch-3.1.2.tgz",
      "integrity": "sha512-J7p63hRiAjw1NDEww1W7i37+ByIrOWO5XQQAzZ3VOcL0PNybwpfmV/N05zFAzwQ9USyEcX6t3UO+K5aqBQOIHw==",
      "dev": true,
      "dependencies": {
        "brace-expansion": "^1.1.7"
      },
      "engines": {
        "node": "*"
      }
    },
    "node_modules/minipass": {
      "version": "7.1.2",
      "resolved": "https://registry.npmjs.org/minipass/-/minipass-7.1.2.tgz",
      "integrity": "sha512-qOOzS1cBTWYF4BH8fVePDBOO9iptMnGUEZwNc/cMWnTV2nVLZ7VoNWEPHkYczZA0pdoA7dl6e7FL659nX9S2aw==",
      "dev": true,
      "engines": {
        "node": ">=16 || 14 >=14.17"
      }
    },
    "node_modules/ms": {
      "version": "2.1.3",
      "resolved": "https://registry.npmjs.org/ms/-/ms-2.1.3.tgz",
      "integrity": "sha512-6FlzubTLZG3J2a/NVCAleEhjzq5oxgHyaCU9yYXvcLsvoVaHJq/s5xXI6/XXP6tz7R9xAOtHnSO/tXtF3WRTlA==",
      "dev": true
    },
    "node_modules/mz": {
      "version": "2.7.0",
      "resolved": "https://registry.npmjs.org/mz/-/mz-2.7.0.tgz",
      "integrity": "sha512-z81GNO7nnYMEhrGh9LeymoE4+Yr0Wn5McHIZMK5cfQCl+NDX08sCZgUc9/6MHni9IWuFLm1Z3HTCXu2z9fN62Q==",
      "dev": true,
      "dependencies": {
        "any-promise": "^1.0.0",
        "object-assign": "^4.0.1",
        "thenify-all": "^1.0.0"
      }
    },
    "node_modules/nanoid": {
      "version": "3.3.7",
      "resolved": "https://registry.npmjs.org/nanoid/-/nanoid-3.3.7.tgz",
      "integrity": "sha512-eSRppjcPIatRIMC1U6UngP8XFcz8MQWGQdt1MTBQ7NaAmvXDfvNxbvWV3x2y6CdEUciCSsDHDQZbhYaB8QEo2g==",
      "dev": true,
      "funding": [
        {
          "type": "github",
          "url": "https://github.com/sponsors/ai"
        }
      ],
      "bin": {
        "nanoid": "bin/nanoid.cjs"
      },
      "engines": {
        "node": "^10 || ^12 || ^13.7 || ^14 || >=15.0.1"
      }
    },
    "node_modules/natural-compare": {
      "version": "1.4.0",
      "resolved": "https://registry.npmjs.org/natural-compare/-/natural-compare-1.4.0.tgz",
      "integrity": "sha512-OWND8ei3VtNC9h7V60qff3SVobHr996CTwgxubgyQYEpg290h9J0buyECNNJexkFm5sOajh5G116RYA1c8ZMSw==",
      "dev": true
    },
    "node_modules/node-releases": {
      "version": "2.0.18",
      "resolved": "https://registry.npmjs.org/node-releases/-/node-releases-2.0.18.tgz",
      "integrity": "sha512-d9VeXT4SJ7ZeOqGX6R5EM022wpL+eWPooLI+5UpWn2jCT1aosUQEhQP214x33Wkwx3JQMvIm+tIoVOdodFS40g==",
      "dev": true
    },
    "node_modules/normalize-path": {
      "version": "3.0.0",
      "resolved": "https://registry.npmjs.org/normalize-path/-/normalize-path-3.0.0.tgz",
      "integrity": "sha512-6eZs5Ls3WtCisHWp9S2GUy8dqkpGi4BVSz3GaqiE6ezub0512ESztXUwUB6C6IKbQkY2Pnb/mD4WYojCRwcwLA==",
      "dev": true,
      "engines": {
        "node": ">=0.10.0"
      }
    },
    "node_modules/normalize-range": {
      "version": "0.1.2",
      "resolved": "https://registry.npmjs.org/normalize-range/-/normalize-range-0.1.2.tgz",
      "integrity": "sha512-bdok/XvKII3nUpklnV6P2hxtMNrCboOjAcyBuQnWEhO665FwrSNRxU+AqpsyvO6LgGYPspN+lu5CLtw4jPRKNA==",
      "dev": true,
      "engines": {
        "node": ">=0.10.0"
      }
    },
    "node_modules/object-assign": {
      "version": "4.1.1",
      "resolved": "https://registry.npmjs.org/object-assign/-/object-assign-4.1.1.tgz",
      "integrity": "sha512-rJgTQnkUnH1sFw8yT6VSU3zD3sWmu6sZhIseY8VX+GRu3P6F7Fu+JNDoXfklElbLJSnc3FUQHVe4cU5hj+BcUg==",
      "engines": {
        "node": ">=0.10.0"
      }
    },
    "node_modules/object-hash": {
      "version": "3.0.0",
      "resolved": "https://registry.npmjs.org/object-hash/-/object-hash-3.0.0.tgz",
      "integrity": "sha512-RSn9F68PjH9HqtltsSnqYC1XXoWe9Bju5+213R98cNGttag9q9yAOTzdbsqvIa7aNm5WffBZFpWYr2aWrklWAw==",
      "dev": true,
      "engines": {
        "node": ">= 6"
      }
    },
    "node_modules/optionator": {
      "version": "0.9.4",
      "resolved": "https://registry.npmjs.org/optionator/-/optionator-0.9.4.tgz",
      "integrity": "sha512-6IpQ7mKUxRcZNLIObR0hz7lxsapSSIYNZJwXPGeF0mTVqGKFIXj1DQcMoT22S3ROcLyY/rz0PWaWZ9ayWmad9g==",
      "dev": true,
      "dependencies": {
        "deep-is": "^0.1.3",
        "fast-levenshtein": "^2.0.6",
        "levn": "^0.4.1",
        "prelude-ls": "^1.2.1",
        "type-check": "^0.4.0",
        "word-wrap": "^1.2.5"
      },
      "engines": {
        "node": ">= 0.8.0"
      }
    },
    "node_modules/p-limit": {
      "version": "3.1.0",
      "resolved": "https://registry.npmjs.org/p-limit/-/p-limit-3.1.0.tgz",
      "integrity": "sha512-TYOanM3wGwNGsZN2cVTYPArw454xnXj5qmWF1bEoAc4+cU/ol7GVh7odevjp1FNHduHc3KZMcFduxU5Xc6uJRQ==",
      "dev": true,
      "dependencies": {
        "yocto-queue": "^0.1.0"
      },
      "engines": {
        "node": ">=10"
      },
      "funding": {
        "url": "https://github.com/sponsors/sindresorhus"
      }
    },
    "node_modules/p-locate": {
      "version": "5.0.0",
      "resolved": "https://registry.npmjs.org/p-locate/-/p-locate-5.0.0.tgz",
      "integrity": "sha512-LaNjtRWUBY++zB5nE/NwcaoMylSPk+S+ZHNB1TzdbMJMny6dynpAGt7X/tl/QYq3TIeE6nxHppbo2LGymrG5Pw==",
      "dev": true,
      "dependencies": {
        "p-limit": "^3.0.2"
      },
      "engines": {
        "node": ">=10"
      },
      "funding": {
        "url": "https://github.com/sponsors/sindresorhus"
      }
    },
    "node_modules/package-json-from-dist": {
      "version": "1.0.1",
      "resolved": "https://registry.npmjs.org/package-json-from-dist/-/package-json-from-dist-1.0.1.tgz",
      "integrity": "sha512-UEZIS3/by4OC8vL3P2dTXRETpebLI2NiI5vIrjaD/5UtrkFX/tNbwjTSRAGC/+7CAo2pIcBaRgWmcBBHcsaCIw==",
      "dev": true
    },
    "node_modules/parent-module": {
      "version": "1.0.1",
      "resolved": "https://registry.npmjs.org/parent-module/-/parent-module-1.0.1.tgz",
      "integrity": "sha512-GQ2EWRpQV8/o+Aw8YqtfZZPfNRWZYkbidE9k5rpl/hC3vtHHBfGm2Ifi6qWV+coDGkrUKZAxE3Lot5kcsRlh+g==",
      "dev": true,
      "dependencies": {
        "callsites": "^3.0.0"
      },
      "engines": {
        "node": ">=6"
      }
    },
    "node_modules/path-exists": {
      "version": "4.0.0",
      "resolved": "https://registry.npmjs.org/path-exists/-/path-exists-4.0.0.tgz",
      "integrity": "sha512-ak9Qy5Q7jYb2Wwcey5Fpvg2KoAc/ZIhLSLOSBmRmygPsGwkVVt0fZa0qrtMz+m6tJTAHfZQ8FnmB4MG4LWy7/w==",
      "dev": true,
      "engines": {
        "node": ">=8"
      }
    },
    "node_modules/path-key": {
      "version": "3.1.1",
      "resolved": "https://registry.npmjs.org/path-key/-/path-key-3.1.1.tgz",
      "integrity": "sha512-ojmeN0qd+y0jszEtoY48r0Peq5dwMEkIlCOu6Q5f41lfkswXuKtYrhgoTpLnyIcHm24Uhqx+5Tqm2InSwLhE6Q==",
      "dev": true,
      "engines": {
        "node": ">=8"
      }
    },
    "node_modules/path-parse": {
      "version": "1.0.7",
      "resolved": "https://registry.npmjs.org/path-parse/-/path-parse-1.0.7.tgz",
      "integrity": "sha512-LDJzPVEEEPR+y48z93A0Ed0yXb8pAByGWo/k5YYdYgpY2/2EsOsksJrq7lOHxryrVOn1ejG6oAp8ahvOIQD8sw==",
      "dev": true
    },
    "node_modules/path-scurry": {
      "version": "1.11.1",
      "resolved": "https://registry.npmjs.org/path-scurry/-/path-scurry-1.11.1.tgz",
      "integrity": "sha512-Xa4Nw17FS9ApQFJ9umLiJS4orGjm7ZzwUrwamcGQuHSzDyth9boKDaycYdDcZDuqYATXw4HFXgaqWTctW/v1HA==",
      "dev": true,
      "dependencies": {
        "lru-cache": "^10.2.0",
        "minipass": "^5.0.0 || ^6.0.2 || ^7.0.0"
      },
      "engines": {
        "node": ">=16 || 14 >=14.18"
      },
      "funding": {
        "url": "https://github.com/sponsors/isaacs"
      }
    },
    "node_modules/path-scurry/node_modules/lru-cache": {
      "version": "10.4.3",
      "resolved": "https://registry.npmjs.org/lru-cache/-/lru-cache-10.4.3.tgz",
      "integrity": "sha512-JNAzZcXrCt42VGLuYz0zfAzDfAvJWW6AfYlDBQyDV5DClI2m5sAmK+OIO7s59XfsRsWHp02jAJrRadPRGTt6SQ==",
      "dev": true
    },
    "node_modules/picocolors": {
      "version": "1.1.1",
      "resolved": "https://registry.npmjs.org/picocolors/-/picocolors-1.1.1.tgz",
      "integrity": "sha512-xceH2snhtb5M9liqDsmEw56le376mTZkEX/jEb/RxNFyegNul7eNslCXP9FDj/Lcu0X8KEyMceP2ntpaHrDEVA==",
      "dev": true,
      "license": "ISC"
    },
    "node_modules/picomatch": {
      "version": "2.3.1",
      "resolved": "https://registry.npmjs.org/picomatch/-/picomatch-2.3.1.tgz",
      "integrity": "sha512-JU3teHTNjmE2VCGFzuY8EXzCDVwEqB2a8fsIvwaStHhAWJEeVd1o1QD80CU6+ZdEXXSLbSsuLwJjkCBWqRQUVA==",
      "dev": true,
      "engines": {
        "node": ">=8.6"
      },
      "funding": {
        "url": "https://github.com/sponsors/jonschlinkert"
      }
    },
    "node_modules/pify": {
      "version": "2.3.0",
      "resolved": "https://registry.npmjs.org/pify/-/pify-2.3.0.tgz",
      "integrity": "sha512-udgsAY+fTnvv7kI7aaxbqwWNb0AHiB0qBO89PZKPkoTmGOgdbrHDKD+0B2X4uTfJ/FT1R09r9gTsjUjNJotuog==",
      "dev": true,
      "engines": {
        "node": ">=0.10.0"
      }
    },
    "node_modules/pirates": {
      "version": "4.0.6",
      "resolved": "https://registry.npmjs.org/pirates/-/pirates-4.0.6.tgz",
      "integrity": "sha512-saLsH7WeYYPiD25LDuLRRY/i+6HaPYr6G1OUlN39otzkSTxKnubR9RTxS3/Kk50s1g2JTgFwWQDQyplC5/SHZg==",
      "dev": true,
      "engines": {
        "node": ">= 6"
      }
    },
    "node_modules/postcss": {
      "version": "8.4.47",
      "resolved": "https://registry.npmjs.org/postcss/-/postcss-8.4.47.tgz",
      "integrity": "sha512-56rxCq7G/XfB4EkXq9Egn5GCqugWvDFjafDOThIdMBsI15iqPqR5r15TfSr1YPYeEI19YeaXMCbY6u88Y76GLQ==",
      "dev": true,
      "funding": [
        {
          "type": "opencollective",
          "url": "https://opencollective.com/postcss/"
        },
        {
          "type": "tidelift",
          "url": "https://tidelift.com/funding/github/npm/postcss"
        },
        {
          "type": "github",
          "url": "https://github.com/sponsors/ai"
        }
      ],
      "dependencies": {
        "nanoid": "^3.3.7",
        "picocolors": "^1.1.0",
        "source-map-js": "^1.2.1"
      },
      "engines": {
        "node": "^10 || ^12 || >=14"
      }
    },
    "node_modules/postcss-import": {
      "version": "15.1.0",
      "resolved": "https://registry.npmjs.org/postcss-import/-/postcss-import-15.1.0.tgz",
      "integrity": "sha512-hpr+J05B2FVYUAXHeK1YyI267J/dDDhMU6B6civm8hSY1jYJnBXxzKDKDswzJmtLHryrjhnDjqqp/49t8FALew==",
      "dev": true,
      "dependencies": {
        "postcss-value-parser": "^4.0.0",
        "read-cache": "^1.0.0",
        "resolve": "^1.1.7"
      },
      "engines": {
        "node": ">=14.0.0"
      },
      "peerDependencies": {
        "postcss": "^8.0.0"
      }
    },
    "node_modules/postcss-js": {
      "version": "4.0.1",
      "resolved": "https://registry.npmjs.org/postcss-js/-/postcss-js-4.0.1.tgz",
      "integrity": "sha512-dDLF8pEO191hJMtlHFPRa8xsizHaM82MLfNkUHdUtVEV3tgTp5oj+8qbEqYM57SLfc74KSbw//4SeJma2LRVIw==",
      "dev": true,
      "dependencies": {
        "camelcase-css": "^2.0.1"
      },
      "engines": {
        "node": "^12 || ^14 || >= 16"
      },
      "funding": {
        "type": "opencollective",
        "url": "https://opencollective.com/postcss/"
      },
      "peerDependencies": {
        "postcss": "^8.4.21"
      }
    },
    "node_modules/postcss-load-config": {
      "version": "4.0.2",
      "resolved": "https://registry.npmjs.org/postcss-load-config/-/postcss-load-config-4.0.2.tgz",
      "integrity": "sha512-bSVhyJGL00wMVoPUzAVAnbEoWyqRxkjv64tUl427SKnPrENtq6hJwUojroMz2VB+Q1edmi4IfrAPpami5VVgMQ==",
      "dev": true,
      "funding": [
        {
          "type": "opencollective",
          "url": "https://opencollective.com/postcss/"
        },
        {
          "type": "github",
          "url": "https://github.com/sponsors/ai"
        }
      ],
      "dependencies": {
        "lilconfig": "^3.0.0",
        "yaml": "^2.3.4"
      },
      "engines": {
        "node": ">= 14"
      },
      "peerDependencies": {
        "postcss": ">=8.0.9",
        "ts-node": ">=9.0.0"
      },
      "peerDependenciesMeta": {
        "postcss": {
          "optional": true
        },
        "ts-node": {
          "optional": true
        }
      }
    },
    "node_modules/postcss-nested": {
      "version": "6.2.0",
      "resolved": "https://registry.npmjs.org/postcss-nested/-/postcss-nested-6.2.0.tgz",
      "integrity": "sha512-HQbt28KulC5AJzG+cZtj9kvKB93CFCdLvog1WFLf1D+xmMvPGlBstkpTEZfK5+AN9hfJocyBFCNiqyS48bpgzQ==",
      "dev": true,
      "funding": [
        {
          "type": "opencollective",
          "url": "https://opencollective.com/postcss/"
        },
        {
          "type": "github",
          "url": "https://github.com/sponsors/ai"
        }
      ],
      "dependencies": {
        "postcss-selector-parser": "^6.1.1"
      },
      "engines": {
        "node": ">=12.0"
      },
      "peerDependencies": {
        "postcss": "^8.2.14"
      }
    },
    "node_modules/postcss-selector-parser": {
      "version": "6.1.2",
      "resolved": "https://registry.npmjs.org/postcss-selector-parser/-/postcss-selector-parser-6.1.2.tgz",
      "integrity": "sha512-Q8qQfPiZ+THO/3ZrOrO0cJJKfpYCagtMUkXbnEfmgUjwXg6z/WBeOyS9APBBPCTSiDV+s4SwQGu8yFsiMRIudg==",
      "dev": true,
      "dependencies": {
        "cssesc": "^3.0.0",
        "util-deprecate": "^1.0.2"
      },
      "engines": {
        "node": ">=4"
      }
    },
    "node_modules/postcss-value-parser": {
      "version": "4.2.0",
      "resolved": "https://registry.npmjs.org/postcss-value-parser/-/postcss-value-parser-4.2.0.tgz",
      "integrity": "sha512-1NNCs6uurfkVbeXG4S8JFT9t19m45ICnif8zWLd5oPSZ50QnwMfK+H3jv408d4jw/7Bttv5axS5IiHoLaVNHeQ==",
      "dev": true
    },
    "node_modules/prelude-ls": {
      "version": "1.2.1",
      "resolved": "https://registry.npmjs.org/prelude-ls/-/prelude-ls-1.2.1.tgz",
      "integrity": "sha512-vkcDPrRZo1QZLbn5RLGPpg/WmIQ65qoWWhcGKf/b5eplkkarX0m9z8ppCat4mlOqUsWpyNuYgO3VRyrYHSzX5g==",
      "dev": true,
      "engines": {
        "node": ">= 0.8.0"
      }
    },
    "node_modules/prop-types": {
      "version": "15.8.1",
      "resolved": "https://registry.npmjs.org/prop-types/-/prop-types-15.8.1.tgz",
      "integrity": "sha512-oj87CgZICdulUohogVAR7AjlC0327U4el4L6eAvOqCeudMDVU0NThNaV+b9Df4dXgSP1gXMTnPdhfe/2qDH5cg==",
      "license": "MIT",
      "dependencies": {
        "loose-envify": "^1.4.0",
        "object-assign": "^4.1.1",
        "react-is": "^16.13.1"
      }
    },
    "node_modules/prop-types/node_modules/react-is": {
      "version": "16.13.1",
      "resolved": "https://registry.npmjs.org/react-is/-/react-is-16.13.1.tgz",
      "integrity": "sha512-24e6ynE2H+OKt4kqsOvNd8kBpV65zoxbA4BVsEOB3ARVWQki/DHzaUoC5KuON/BiccDaCCTZBuOcfZs70kR8bQ==",
      "license": "MIT"
    },
    "node_modules/punycode": {
      "version": "2.3.1",
      "resolved": "https://registry.npmjs.org/punycode/-/punycode-2.3.1.tgz",
      "integrity": "sha512-vYt7UD1U9Wg6138shLtLOvdAu+8DsC/ilFtEVHcH+wydcSpNE20AfSOduf6MkRFahL5FY7X1oU7nKVZFtfq8Fg==",
      "dev": true,
      "engines": {
        "node": ">=6"
      }
    },
    "node_modules/queue-microtask": {
      "version": "1.2.3",
      "resolved": "https://registry.npmjs.org/queue-microtask/-/queue-microtask-1.2.3.tgz",
      "integrity": "sha512-NuaNSa6flKT5JaSYQzJok04JzTL1CA6aGhv5rfLW3PgqA+M2ChpZQnAC8h8i4ZFkBS8X5RqkDBHA7r4hej3K9A==",
      "dev": true,
      "funding": [
        {
          "type": "github",
          "url": "https://github.com/sponsors/feross"
        },
        {
          "type": "patreon",
          "url": "https://www.patreon.com/feross"
        },
        {
          "type": "consulting",
          "url": "https://feross.org/support"
        }
      ]
    },
    "node_modules/react": {
      "version": "18.3.1",
      "resolved": "https://registry.npmjs.org/react/-/react-18.3.1.tgz",
      "integrity": "sha512-wS+hAgJShR0KhEvPJArfuPVN1+Hz1t0Y6n5jLrGQbkb4urgPE/0Rve+1kMB1v/oWgHgm4WIcV+i7F2pTVj+2iQ==",
      "dependencies": {
        "loose-envify": "^1.1.0"
      },
      "engines": {
        "node": ">=0.10.0"
      }
    },
    "node_modules/react-dom": {
      "version": "18.3.1",
      "resolved": "https://registry.npmjs.org/react-dom/-/react-dom-18.3.1.tgz",
      "integrity": "sha512-5m4nQKp+rZRb09LNH59GM4BxTh9251/ylbKIbpe7TpGxfJ+9kv6BLkLBXIjjspbgbnIBNqlI23tRnTWT0snUIw==",
      "dependencies": {
        "loose-envify": "^1.1.0",
        "scheduler": "^0.23.2"
      },
      "peerDependencies": {
        "react": "^18.3.1"
      }
    },
    "node_modules/react-hook-form": {
      "version": "7.58.1",
      "resolved": "https://registry.npmjs.org/react-hook-form/-/react-hook-form-7.58.1.tgz",
      "integrity": "sha512-Lml/KZYEEFfPhUVgE0RdCVpnC4yhW+PndRhbiTtdvSlQTL8IfVR+iQkBjLIvmmc6+GGoVeM11z37ktKFPAb0FA==",
      "license": "MIT",
      "engines": {
        "node": ">=18.0.0"
      },
      "funding": {
        "type": "opencollective",
        "url": "https://opencollective.com/react-hook-form"
      },
      "peerDependencies": {
        "react": "^16.8.0 || ^17 || ^18 || ^19"
      }
    },
    "node_modules/react-hot-toast": {
      "version": "2.5.2",
      "resolved": "https://registry.npmjs.org/react-hot-toast/-/react-hot-toast-2.5.2.tgz",
      "integrity": "sha512-Tun3BbCxzmXXM7C+NI4qiv6lT0uwGh4oAfeJyNOjYUejTsm35mK9iCaYLGv8cBz9L5YxZLx/2ii7zsIwPtPUdw==",
      "license": "MIT",
      "dependencies": {
        "csstype": "^3.1.3",
        "goober": "^2.1.16"
      },
      "engines": {
        "node": ">=10"
      },
      "peerDependencies": {
        "react": ">=16",
        "react-dom": ">=16"
      }
    },
    "node_modules/react-is": {
      "version": "18.3.1",
      "resolved": "https://registry.npmjs.org/react-is/-/react-is-18.3.1.tgz",
      "integrity": "sha512-/LLMVyas0ljjAtoYiPqYiL8VWXzUUdThrmU5+n20DZv+a+ClRoevUzw5JxU+Ieh5/c87ytoTBV9G1FiKfNJdmg==",
      "license": "MIT"
    },
    "node_modules/react-refresh": {
      "version": "0.14.2",
      "resolved": "https://registry.npmjs.org/react-refresh/-/react-refresh-0.14.2.tgz",
      "integrity": "sha512-jCvmsr+1IUSMUyzOkRcvnVbX3ZYC6g9TDrDbFuFmRDq7PD4yaGbLKNQL6k2jnArV8hjYxh7hVhAZB6s9HDGpZA==",
      "dev": true,
      "engines": {
        "node": ">=0.10.0"
      }
    },
    "node_modules/react-router": {
      "version": "6.30.1",
      "resolved": "https://registry.npmjs.org/react-router/-/react-router-6.30.1.tgz",
      "integrity": "sha512-X1m21aEmxGXqENEPG3T6u0Th7g0aS4ZmoNynhbs+Cn+q+QGTLt+d5IQ2bHAXKzKcxGJjxACpVbnYQSCRcfxHlQ==",
      "license": "MIT",
      "dependencies": {
        "@remix-run/router": "1.23.0"
      },
      "engines": {
        "node": ">=14.0.0"
      },
      "peerDependencies": {
        "react": ">=16.8"
      }
    },
    "node_modules/react-router-dom": {
      "version": "6.30.1",
      "resolved": "https://registry.npmjs.org/react-router-dom/-/react-router-dom-6.30.1.tgz",
      "integrity": "sha512-llKsgOkZdbPU1Eg3zK8lCn+sjD9wMRZZPuzmdWWX5SUs8OFkN5HnFVC0u5KMeMaC9aoancFI/KoLuKPqN+hxHw==",
      "license": "MIT",
      "dependencies": {
        "@remix-run/router": "1.23.0",
        "react-router": "6.30.1"
      },
      "engines": {
        "node": ">=14.0.0"
      },
      "peerDependencies": {
        "react": ">=16.8",
        "react-dom": ">=16.8"
      }
    },
    "node_modules/react-smooth": {
      "version": "4.0.4",
      "resolved": "https://registry.npmjs.org/react-smooth/-/react-smooth-4.0.4.tgz",
      "integrity": "sha512-gnGKTpYwqL0Iii09gHobNolvX4Kiq4PKx6eWBCYYix+8cdw+cGo3do906l1NBPKkSWx1DghC1dlWG9L2uGd61Q==",
      "license": "MIT",
      "dependencies": {
        "fast-equals": "^5.0.1",
        "prop-types": "^15.8.1",
        "react-transition-group": "^4.4.5"
      },
      "peerDependencies": {
        "react": "^16.8.0 || ^17.0.0 || ^18.0.0 || ^19.0.0",
        "react-dom": "^16.8.0 || ^17.0.0 || ^18.0.0 || ^19.0.0"
      }
    },
    "node_modules/react-transition-group": {
      "version": "4.4.5",
      "resolved": "https://registry.npmjs.org/react-transition-group/-/react-transition-group-4.4.5.tgz",
      "integrity": "sha512-pZcd1MCJoiKiBR2NRxeCRg13uCXbydPnmB4EOeRrY7480qNWO8IIgQG6zlDkm6uRMsURXPuKq0GWtiM59a5Q6g==",
      "license": "BSD-3-Clause",
      "dependencies": {
        "@babel/runtime": "^7.5.5",
        "dom-helpers": "^5.0.1",
        "loose-envify": "^1.4.0",
        "prop-types": "^15.6.2"
      },
      "peerDependencies": {
        "react": ">=16.6.0",
        "react-dom": ">=16.6.0"
      }
    },
    "node_modules/read-cache": {
      "version": "1.0.0",
      "resolved": "https://registry.npmjs.org/read-cache/-/read-cache-1.0.0.tgz",
      "integrity": "sha512-Owdv/Ft7IjOgm/i0xvNDZ1LrRANRfew4b2prF3OWMQLxLfu3bS8FVhCsrSCMK4lR56Y9ya+AThoTpDCTxCmpRA==",
      "dev": true,
      "dependencies": {
        "pify": "^2.3.0"
      }
    },
    "node_modules/readdirp": {
      "version": "3.6.0",
      "resolved": "https://registry.npmjs.org/readdirp/-/readdirp-3.6.0.tgz",
      "integrity": "sha512-hOS089on8RduqdbhvQ5Z37A0ESjsqz6qnRcffsMU3495FuTdqSm+7bhJ29JvIOsBDEEnan5DPu9t3To9VRlMzA==",
      "dev": true,
      "dependencies": {
        "picomatch": "^2.2.1"
      },
      "engines": {
        "node": ">=8.10.0"
      }
    },
    "node_modules/recharts": {
      "version": "2.15.3",
      "resolved": "https://registry.npmjs.org/recharts/-/recharts-2.15.3.tgz",
      "integrity": "sha512-EdOPzTwcFSuqtvkDoaM5ws/Km1+WTAO2eizL7rqiG0V2UVhTnz0m7J2i0CjVPUCdEkZImaWvXLbZDS2H5t6GFQ==",
      "license": "MIT",
      "dependencies": {
        "clsx": "^2.0.0",
        "eventemitter3": "^4.0.1",
        "lodash": "^4.17.21",
        "react-is": "^18.3.1",
        "react-smooth": "^4.0.4",
        "recharts-scale": "^0.4.4",
        "tiny-invariant": "^1.3.1",
        "victory-vendor": "^36.6.8"
      },
      "engines": {
        "node": ">=14"
      },
      "peerDependencies": {
        "react": "^16.0.0 || ^17.0.0 || ^18.0.0 || ^19.0.0",
        "react-dom": "^16.0.0 || ^17.0.0 || ^18.0.0 || ^19.0.0"
      }
    },
    "node_modules/recharts-scale": {
      "version": "0.4.5",
      "resolved": "https://registry.npmjs.org/recharts-scale/-/recharts-scale-0.4.5.tgz",
      "integrity": "sha512-kivNFO+0OcUNu7jQquLXAxz1FIwZj8nrj+YkOKc5694NbjCvcT6aSZiIzNzd2Kul4o4rTto8QVR9lMNtxD4G1w==",
      "license": "MIT",
      "dependencies": {
        "decimal.js-light": "^2.4.1"
      }
    },
    "node_modules/resolve": {
      "version": "1.22.8",
      "resolved": "https://registry.npmjs.org/resolve/-/resolve-1.22.8.tgz",
      "integrity": "sha512-oKWePCxqpd6FlLvGV1VU0x7bkPmmCNolxzjMf4NczoDnQcIWrAF+cPtZn5i6n+RfD2d9i0tzpKnG6Yk168yIyw==",
      "dev": true,
      "dependencies": {
        "is-core-module": "^2.13.0",
        "path-parse": "^1.0.7",
        "supports-preserve-symlinks-flag": "^1.0.0"
      },
      "bin": {
        "resolve": "bin/resolve"
      },
      "funding": {
        "url": "https://github.com/sponsors/ljharb"
      }
    },
    "node_modules/resolve-from": {
      "version": "4.0.0",
      "resolved": "https://registry.npmjs.org/resolve-from/-/resolve-from-4.0.0.tgz",
      "integrity": "sha512-pb/MYmXstAkysRFx8piNI1tGFNQIFA3vkE3Gq4EuA1dF6gHp/+vgZqsCGJapvy8N3Q+4o7FwvquPJcnZ7RYy4g==",
      "dev": true,
      "engines": {
        "node": ">=4"
      }
    },
    "node_modules/reusify": {
      "version": "1.0.4",
      "resolved": "https://registry.npmjs.org/reusify/-/reusify-1.0.4.tgz",
      "integrity": "sha512-U9nH88a3fc/ekCF1l0/UP1IosiuIjyTh7hBvXVMHYgVcfGvt897Xguj2UOLDeI5BG2m7/uwyaLVT6fbtCwTyzw==",
      "dev": true,
      "engines": {
        "iojs": ">=1.0.0",
        "node": ">=0.10.0"
      }
    },
    "node_modules/rollup": {
      "version": "4.24.0",
      "resolved": "https://registry.npmjs.org/rollup/-/rollup-4.24.0.tgz",
      "integrity": "sha512-DOmrlGSXNk1DM0ljiQA+i+o0rSLhtii1je5wgk60j49d1jHT5YYttBv1iWOnYSTG+fZZESUOSNiAl89SIet+Cg==",
      "dev": true,
      "dependencies": {
        "@types/estree": "1.0.6"
      },
      "bin": {
        "rollup": "dist/bin/rollup"
      },
      "engines": {
        "node": ">=18.0.0",
        "npm": ">=8.0.0"
      },
      "optionalDependencies": {
        "@rollup/rollup-android-arm-eabi": "4.24.0",
        "@rollup/rollup-android-arm64": "4.24.0",
        "@rollup/rollup-darwin-arm64": "4.24.0",
        "@rollup/rollup-darwin-x64": "4.24.0",
        "@rollup/rollup-linux-arm-gnueabihf": "4.24.0",
        "@rollup/rollup-linux-arm-musleabihf": "4.24.0",
        "@rollup/rollup-linux-arm64-gnu": "4.24.0",
        "@rollup/rollup-linux-arm64-musl": "4.24.0",
        "@rollup/rollup-linux-powerpc64le-gnu": "4.24.0",
        "@rollup/rollup-linux-riscv64-gnu": "4.24.0",
        "@rollup/rollup-linux-s390x-gnu": "4.24.0",
        "@rollup/rollup-linux-x64-gnu": "4.24.0",
        "@rollup/rollup-linux-x64-musl": "4.24.0",
        "@rollup/rollup-win32-arm64-msvc": "4.24.0",
        "@rollup/rollup-win32-ia32-msvc": "4.24.0",
        "@rollup/rollup-win32-x64-msvc": "4.24.0",
        "fsevents": "~2.3.2"
      }
    },
    "node_modules/run-parallel": {
      "version": "1.2.0",
      "resolved": "https://registry.npmjs.org/run-parallel/-/run-parallel-1.2.0.tgz",
      "integrity": "sha512-5l4VyZR86LZ/lDxZTR6jqL8AFE2S0IFLMP26AbjsLVADxHdhB/c0GUsH+y39UfCi3dzz8OlQuPmnaJOMoDHQBA==",
      "dev": true,
      "funding": [
        {
          "type": "github",
          "url": "https://github.com/sponsors/feross"
        },
        {
          "type": "patreon",
          "url": "https://www.patreon.com/feross"
        },
        {
          "type": "consulting",
          "url": "https://feross.org/support"
        }
      ],
      "dependencies": {
        "queue-microtask": "^1.2.2"
      }
    },
    "node_modules/scheduler": {
      "version": "0.23.2",
      "resolved": "https://registry.npmjs.org/scheduler/-/scheduler-0.23.2.tgz",
      "integrity": "sha512-UOShsPwz7NrMUqhR6t0hWjFduvOzbtv7toDH1/hIrfRNIDBnnBWd0CwJTGvTpngVlmwGCdP9/Zl/tVrDqcuYzQ==",
      "dependencies": {
        "loose-envify": "^1.1.0"
      }
    },
    "node_modules/semver": {
      "version": "6.3.1",
      "resolved": "https://registry.npmjs.org/semver/-/semver-6.3.1.tgz",
      "integrity": "sha512-BR7VvDCVHO+q2xBEWskxS6DJE1qRnb7DxzUrogb71CWoSficBxYsiAGd+Kl0mmq/MprG9yArRkyrQxTO6XjMzA==",
      "dev": true,
      "bin": {
        "semver": "bin/semver.js"
      }
    },
    "node_modules/shebang-command": {
      "version": "2.0.0",
      "resolved": "https://registry.npmjs.org/shebang-command/-/shebang-command-2.0.0.tgz",
      "integrity": "sha512-kHxr2zZpYtdmrN1qDjrrX/Z1rR1kG8Dx+gkpK1G4eXmvXswmcE1hTWBWYUzlraYw1/yZp6YuDY77YtvbN0dmDA==",
      "dev": true,
      "dependencies": {
        "shebang-regex": "^3.0.0"
      },
      "engines": {
        "node": ">=8"
      }
    },
    "node_modules/shebang-regex": {
      "version": "3.0.0",
      "resolved": "https://registry.npmjs.org/shebang-regex/-/shebang-regex-3.0.0.tgz",
      "integrity": "sha512-7++dFhtcx3353uBaq8DDR4NuxBetBzC7ZQOhmTQInHEd6bSrXdiEyzCvG07Z44UYdLShWUyXt5M/yhz8ekcb1A==",
      "dev": true,
      "engines": {
        "node": ">=8"
      }
    },
    "node_modules/signal-exit": {
      "version": "4.1.0",
      "resolved": "https://registry.npmjs.org/signal-exit/-/signal-exit-4.1.0.tgz",
      "integrity": "sha512-bzyZ1e88w9O1iNJbKnOlvYTrWPDl46O1bG0D3XInv+9tkPrxrN8jUUTiFlDkkmKWgn1M6CfIA13SuGqOa9Korw==",
      "dev": true,
      "engines": {
        "node": ">=14"
      },
      "funding": {
        "url": "https://github.com/sponsors/isaacs"
      }
    },
    "node_modules/source-map-js": {
      "version": "1.2.1",
      "resolved": "https://registry.npmjs.org/source-map-js/-/source-map-js-1.2.1.tgz",
      "integrity": "sha512-UXWMKhLOwVKb728IUtQPXxfYU+usdybtUrK/8uGE8CQMvrhOpwvzDBwj0QhSL7MQc7vIsISBG8VQ8+IDQxpfQA==",
      "dev": true,
      "engines": {
        "node": ">=0.10.0"
      }
    },
    "node_modules/string-width": {
      "version": "5.1.2",
      "resolved": "https://registry.npmjs.org/string-width/-/string-width-5.1.2.tgz",
      "integrity": "sha512-HnLOCR3vjcY8beoNLtcjZ5/nxn2afmME6lhrDrebokqMap+XbeW8n9TXpPDOqdGK5qcI3oT0GKTW6wC7EMiVqA==",
      "dev": true,
      "dependencies": {
        "eastasianwidth": "^0.2.0",
        "emoji-regex": "^9.2.2",
        "strip-ansi": "^7.0.1"
      },
      "engines": {
        "node": ">=12"
      },
      "funding": {
        "url": "https://github.com/sponsors/sindresorhus"
      }
    },
    "node_modules/string-width-cjs": {
      "name": "string-width",
      "version": "4.2.3",
      "resolved": "https://registry.npmjs.org/string-width/-/string-width-4.2.3.tgz",
      "integrity": "sha512-wKyQRQpjJ0sIp62ErSZdGsjMJWsap5oRNihHhu6G7JVO/9jIB6UyevL+tXuOqrng8j/cxKTWyWUwvSTriiZz/g==",
      "dev": true,
      "dependencies": {
        "emoji-regex": "^8.0.0",
        "is-fullwidth-code-point": "^3.0.0",
        "strip-ansi": "^6.0.1"
      },
      "engines": {
        "node": ">=8"
      }
    },
    "node_modules/string-width-cjs/node_modules/ansi-regex": {
      "version": "5.0.1",
      "resolved": "https://registry.npmjs.org/ansi-regex/-/ansi-regex-5.0.1.tgz",
      "integrity": "sha512-quJQXlTSUGL2LH9SUXo8VwsY4soanhgo6LNSm84E1LBcE8s3O0wpdiRzyR9z/ZZJMlMWv37qOOb9pdJlMUEKFQ==",
      "dev": true,
      "engines": {
        "node": ">=8"
      }
    },
    "node_modules/string-width-cjs/node_modules/emoji-regex": {
      "version": "8.0.0",
      "resolved": "https://registry.npmjs.org/emoji-regex/-/emoji-regex-8.0.0.tgz",
      "integrity": "sha512-MSjYzcWNOA0ewAHpz0MxpYFvwg6yjy1NG3xteoqz644VCo/RPgnr1/GGt+ic3iJTzQ8Eu3TdM14SawnVUmGE6A==",
      "dev": true
    },
    "node_modules/string-width-cjs/node_modules/strip-ansi": {
      "version": "6.0.1",
      "resolved": "https://registry.npmjs.org/strip-ansi/-/strip-ansi-6.0.1.tgz",
      "integrity": "sha512-Y38VPSHcqkFrCpFnQ9vuSXmquuv5oXOKpGeT6aGrr3o3Gc9AlVa6JBfUSOCnbxGGZF+/0ooI7KrPuUSztUdU5A==",
      "dev": true,
      "dependencies": {
        "ansi-regex": "^5.0.1"
      },
      "engines": {
        "node": ">=8"
      }
    },
    "node_modules/strip-ansi": {
      "version": "7.1.0",
      "resolved": "https://registry.npmjs.org/strip-ansi/-/strip-ansi-7.1.0.tgz",
      "integrity": "sha512-iq6eVVI64nQQTRYq2KtEg2d2uU7LElhTJwsH4YzIHZshxlgZms/wIc4VoDQTlG/IvVIrBKG06CrZnp0qv7hkcQ==",
      "dev": true,
      "dependencies": {
        "ansi-regex": "^6.0.1"
      },
      "engines": {
        "node": ">=12"
      },
      "funding": {
        "url": "https://github.com/chalk/strip-ansi?sponsor=1"
      }
    },
    "node_modules/strip-ansi-cjs": {
      "name": "strip-ansi",
      "version": "6.0.1",
      "resolved": "https://registry.npmjs.org/strip-ansi/-/strip-ansi-6.0.1.tgz",
      "integrity": "sha512-Y38VPSHcqkFrCpFnQ9vuSXmquuv5oXOKpGeT6aGrr3o3Gc9AlVa6JBfUSOCnbxGGZF+/0ooI7KrPuUSztUdU5A==",
      "dev": true,
      "dependencies": {
        "ansi-regex": "^5.0.1"
      },
      "engines": {
        "node": ">=8"
      }
    },
    "node_modules/strip-ansi-cjs/node_modules/ansi-regex": {
      "version": "5.0.1",
      "resolved": "https://registry.npmjs.org/ansi-regex/-/ansi-regex-5.0.1.tgz",
      "integrity": "sha512-quJQXlTSUGL2LH9SUXo8VwsY4soanhgo6LNSm84E1LBcE8s3O0wpdiRzyR9z/ZZJMlMWv37qOOb9pdJlMUEKFQ==",
      "dev": true,
      "engines": {
        "node": ">=8"
      }
    },
    "node_modules/strip-json-comments": {
      "version": "3.1.1",
      "resolved": "https://registry.npmjs.org/strip-json-comments/-/strip-json-comments-3.1.1.tgz",
      "integrity": "sha512-6fPc+R4ihwqP6N/aIv2f1gMH8lOVtWQHoqC4yK6oSDVVocumAsfCqjkXnqiYMhmMwS/mEHLp7Vehlt3ql6lEig==",
      "dev": true,
      "engines": {
        "node": ">=8"
      },
      "funding": {
        "url": "https://github.com/sponsors/sindresorhus"
      }
    },
    "node_modules/sucrase": {
      "version": "3.35.0",
      "resolved": "https://registry.npmjs.org/sucrase/-/sucrase-3.35.0.tgz",
      "integrity": "sha512-8EbVDiu9iN/nESwxeSxDKe0dunta1GOlHufmSSXxMD2z2/tMZpDMpvXQGsc+ajGo8y2uYUmixaSRUc/QPoQ0GA==",
      "dev": true,
      "dependencies": {
        "@jridgewell/gen-mapping": "^0.3.2",
        "commander": "^4.0.0",
        "glob": "^10.3.10",
        "lines-and-columns": "^1.1.6",
        "mz": "^2.7.0",
        "pirates": "^4.0.1",
        "ts-interface-checker": "^0.1.9"
      },
      "bin": {
        "sucrase": "bin/sucrase",
        "sucrase-node": "bin/sucrase-node"
      },
      "engines": {
        "node": ">=16 || 14 >=14.17"
      }
    },
    "node_modules/supports-color": {
      "version": "5.5.0",
      "resolved": "https://registry.npmjs.org/supports-color/-/supports-color-5.5.0.tgz",
      "integrity": "sha512-QjVjwdXIt408MIiAqCX4oUKsgU2EqAGzs2Ppkm4aQYbjm+ZEWEcW4SfFNTr4uMNZma0ey4f5lgLrkB0aX0QMow==",
      "dev": true,
      "dependencies": {
        "has-flag": "^3.0.0"
      },
      "engines": {
        "node": ">=4"
      }
    },
    "node_modules/supports-preserve-symlinks-flag": {
      "version": "1.0.0",
      "resolved": "https://registry.npmjs.org/supports-preserve-symlinks-flag/-/supports-preserve-symlinks-flag-1.0.0.tgz",
      "integrity": "sha512-ot0WnXS9fgdkgIcePe6RHNk1WA8+muPa6cSjeR3V8K27q9BB1rTE3R1p7Hv0z1ZyAc8s6Vvv8DIyWf681MAt0w==",
      "dev": true,
      "engines": {
        "node": ">= 0.4"
      },
      "funding": {
        "url": "https://github.com/sponsors/ljharb"
      }
    },
    "node_modules/tailwindcss": {
      "version": "3.4.17",
      "resolved": "https://registry.npmjs.org/tailwindcss/-/tailwindcss-3.4.17.tgz",
      "integrity": "sha512-w33E2aCvSDP0tW9RZuNXadXlkHXqFzSkQew/aIa2i/Sj8fThxwovwlXHSPXTbAHwEIhBFXAedUhP2tueAKP8Og==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "@alloc/quick-lru": "^5.2.0",
        "arg": "^5.0.2",
        "chokidar": "^3.6.0",
        "didyoumean": "^1.2.2",
        "dlv": "^1.1.3",
        "fast-glob": "^3.3.2",
        "glob-parent": "^6.0.2",
        "is-glob": "^4.0.3",
        "jiti": "^1.21.6",
        "lilconfig": "^3.1.3",
        "micromatch": "^4.0.8",
        "normalize-path": "^3.0.0",
        "object-hash": "^3.0.0",
        "picocolors": "^1.1.1",
        "postcss": "^8.4.47",
        "postcss-import": "^15.1.0",
        "postcss-js": "^4.0.1",
        "postcss-load-config": "^4.0.2",
        "postcss-nested": "^6.2.0",
        "postcss-selector-parser": "^6.1.2",
        "resolve": "^1.22.8",
        "sucrase": "^3.35.0"
      },
      "bin": {
        "tailwind": "lib/cli.js",
        "tailwindcss": "lib/cli.js"
      },
      "engines": {
        "node": ">=14.0.0"
      }
    },
    "node_modules/text-table": {
      "version": "0.2.0",
      "resolved": "https://registry.npmjs.org/text-table/-/text-table-0.2.0.tgz",
      "integrity": "sha512-N+8UisAXDGk8PFXP4HAzVR9nbfmVJ3zYLAWiTIoqC5v5isinhr+r5uaO8+7r3BMfuNIufIsA7RdpVgacC2cSpw==",
      "dev": true
    },
    "node_modules/thenify": {
      "version": "3.3.1",
      "resolved": "https://registry.npmjs.org/thenify/-/thenify-3.3.1.tgz",
      "integrity": "sha512-RVZSIV5IG10Hk3enotrhvz0T9em6cyHBLkH/YAZuKqd8hRkKhSfCGIcP2KUY0EPxndzANBmNllzWPwak+bheSw==",
      "dev": true,
      "dependencies": {
        "any-promise": "^1.0.0"
      }
    },
    "node_modules/thenify-all": {
      "version": "1.6.0",
      "resolved": "https://registry.npmjs.org/thenify-all/-/thenify-all-1.6.0.tgz",
      "integrity": "sha512-RNxQH/qI8/t3thXJDwcstUO4zeqo64+Uy/+sNVRBx4Xn2OX+OZ9oP+iJnNFqplFra2ZUVeKCSa2oVWi3T4uVmA==",
      "dev": true,
      "dependencies": {
        "thenify": ">= 3.1.0 < 4"
      },
      "engines": {
        "node": ">=0.8"
      }
    },
    "node_modules/tiny-invariant": {
      "version": "1.3.3",
      "resolved": "https://registry.npmjs.org/tiny-invariant/-/tiny-invariant-1.3.3.tgz",
      "integrity": "sha512-+FbBPE1o9QAYvviau/qC5SE3caw21q3xkvWKBtja5vgqOWIHHJ3ioaq1VPfn/Szqctz2bU/oYeKd9/z5BL+PVg==",
      "license": "MIT"
    },
    "node_modules/to-fast-properties": {
      "version": "2.0.0",
      "resolved": "https://registry.npmjs.org/to-fast-properties/-/to-fast-properties-2.0.0.tgz",
      "integrity": "sha512-/OaKK0xYrs3DmxRYqL/yDc+FxFUVYhDlXMhRmv3z915w2HF1tnN1omB354j8VUGO/hbRzyD6Y3sA7v7GS/ceog==",
      "dev": true,
      "engines": {
        "node": ">=4"
      }
    },
    "node_modules/to-regex-range": {
      "version": "5.0.1",
      "resolved": "https://registry.npmjs.org/to-regex-range/-/to-regex-range-5.0.1.tgz",
      "integrity": "sha512-65P7iz6X5yEr1cwcgvQxbbIw7Uk3gOy5dIdtZ4rDveLqhrdJP+Li/Hx6tyK0NEb+2GCyneCMJiGqrADCSNk8sQ==",
      "dev": true,
      "dependencies": {
        "is-number": "^7.0.0"
      },
      "engines": {
        "node": ">=8.0"
      }
    },
    "node_modules/ts-api-utils": {
      "version": "1.3.0",
      "resolved": "https://registry.npmjs.org/ts-api-utils/-/ts-api-utils-1.3.0.tgz",
      "integrity": "sha512-UQMIo7pb8WRomKR1/+MFVLTroIvDVtMX3K6OUir8ynLyzB8Jeriont2bTAtmNPa1ekAgN7YPDyf6V+ygrdU+eQ==",
      "dev": true,
      "engines": {
        "node": ">=16"
      },
      "peerDependencies": {
        "typescript": ">=4.2.0"
      }
    },
    "node_modules/ts-interface-checker": {
      "version": "0.1.13",
      "resolved": "https://registry.npmjs.org/ts-interface-checker/-/ts-interface-checker-0.1.13.tgz",
      "integrity": "sha512-Y/arvbn+rrz3JCKl9C4kVNfTfSm2/mEp5FSz5EsZSANGPSlQrpRI5M4PKF+mJnE52jOO90PnPSc3Ur3bTQw0gA==",
      "dev": true
    },
    "node_modules/type-check": {
      "version": "0.4.0",
      "resolved": "https://registry.npmjs.org/type-check/-/type-check-0.4.0.tgz",
      "integrity": "sha512-XleUoc9uwGXqjWwXaUTZAmzMcFZ5858QA2vvx1Ur5xIcixXIP+8LnFDgRplU30us6teqdlskFfu+ae4K79Ooew==",
      "dev": true,
      "dependencies": {
        "prelude-ls": "^1.2.1"
      },
      "engines": {
        "node": ">= 0.8.0"
      }
    },
    "node_modules/typescript": {
      "version": "5.6.3",
      "resolved": "https://registry.npmjs.org/typescript/-/typescript-5.6.3.tgz",
      "integrity": "sha512-hjcS1mhfuyi4WW8IWtjP7brDrG2cuDZukyrYrSauoXGNgx0S7zceP07adYkJycEr56BOUTNPzbInooiN3fn1qw==",
      "dev": true,
      "bin": {
        "tsc": "bin/tsc",
        "tsserver": "bin/tsserver"
      },
      "engines": {
        "node": ">=14.17"
      }
    },
    "node_modules/typescript-eslint": {
      "version": "8.8.1",
      "resolved": "https://registry.npmjs.org/typescript-eslint/-/typescript-eslint-8.8.1.tgz",
      "integrity": "sha512-R0dsXFt6t4SAFjUSKFjMh4pXDtq04SsFKCVGDP3ZOzNP7itF0jBcZYU4fMsZr4y7O7V7Nc751dDeESbe4PbQMQ==",
      "dev": true,
      "dependencies": {
        "@typescript-eslint/eslint-plugin": "8.8.1",
        "@typescript-eslint/parser": "8.8.1",
        "@typescript-eslint/utils": "8.8.1"
      },
      "engines": {
        "node": "^18.18.0 || ^20.9.0 || >=21.1.0"
      },
      "funding": {
        "type": "opencollective",
        "url": "https://opencollective.com/typescript-eslint"
      },
      "peerDependenciesMeta": {
        "typescript": {
          "optional": true
        }
      }
    },
    "node_modules/update-browserslist-db": {
      "version": "1.1.1",
      "resolved": "https://registry.npmjs.org/update-browserslist-db/-/update-browserslist-db-1.1.1.tgz",
      "integrity": "sha512-R8UzCaa9Az+38REPiJ1tXlImTJXlVfgHZsglwBD/k6nj76ctsH1E3q4doGrukiLQd3sGQYu56r5+lo5r94l29A==",
      "dev": true,
      "funding": [
        {
          "type": "opencollective",
          "url": "https://opencollective.com/browserslist"
        },
        {
          "type": "tidelift",
          "url": "https://tidelift.com/funding/github/npm/browserslist"
        },
        {
          "type": "github",
          "url": "https://github.com/sponsors/ai"
        }
      ],
      "dependencies": {
        "escalade": "^3.2.0",
        "picocolors": "^1.1.0"
      },
      "bin": {
        "update-browserslist-db": "cli.js"
      },
      "peerDependencies": {
        "browserslist": ">= 4.21.0"
      }
    },
    "node_modules/uri-js": {
      "version": "4.4.1",
      "resolved": "https://registry.npmjs.org/uri-js/-/uri-js-4.4.1.tgz",
      "integrity": "sha512-7rKUyy33Q1yc98pQ1DAmLtwX109F7TIfWlW1Ydo8Wl1ii1SeHieeh0HHfPeL2fMXK6z0s8ecKs9frCuLJvndBg==",
      "dev": true,
      "dependencies": {
        "punycode": "^2.1.0"
      }
    },
    "node_modules/util-deprecate": {
      "version": "1.0.2",
      "resolved": "https://registry.npmjs.org/util-deprecate/-/util-deprecate-1.0.2.tgz",
      "integrity": "sha512-EPD5q1uXyFxJpCrLnCc1nHnq3gOa6DZBocAIiI2TaSCA7VCJ1UJDMagCzIkXNsUYfD1daK//LTEQ8xiIbrHtcw==",
      "dev": true
    },
    "node_modules/victory-vendor": {
      "version": "36.9.2",
      "resolved": "https://registry.npmjs.org/victory-vendor/-/victory-vendor-36.9.2.tgz",
      "integrity": "sha512-PnpQQMuxlwYdocC8fIJqVXvkeViHYzotI+NJrCuav0ZYFoq912ZHBk3mCeuj+5/VpodOjPe1z0Fk2ihgzlXqjQ==",
      "license": "MIT AND ISC",
      "dependencies": {
        "@types/d3-array": "^3.0.3",
        "@types/d3-ease": "^3.0.0",
        "@types/d3-interpolate": "^3.0.1",
        "@types/d3-scale": "^4.0.2",
        "@types/d3-shape": "^3.1.0",
        "@types/d3-time": "^3.0.0",
        "@types/d3-timer": "^3.0.0",
        "d3-array": "^3.1.6",
        "d3-ease": "^3.0.1",
        "d3-interpolate": "^3.0.1",
        "d3-scale": "^4.0.2",
        "d3-shape": "^3.1.0",
        "d3-time": "^3.0.0",
        "d3-timer": "^3.0.1"
      }
    },
    "node_modules/vite": {
      "version": "5.4.8",
      "resolved": "https://registry.npmjs.org/vite/-/vite-5.4.8.tgz",
      "integrity": "sha512-FqrItQ4DT1NC4zCUqMB4c4AZORMKIa0m8/URVCZ77OZ/QSNeJ54bU1vrFADbDsuwfIPcgknRkmqakQcgnL4GiQ==",
      "dev": true,
      "dependencies": {
        "esbuild": "^0.21.3",
        "postcss": "^8.4.43",
        "rollup": "^4.20.0"
      },
      "bin": {
        "vite": "bin/vite.js"
      },
      "engines": {
        "node": "^18.0.0 || >=20.0.0"
      },
      "funding": {
        "url": "https://github.com/vitejs/vite?sponsor=1"
      },
      "optionalDependencies": {
        "fsevents": "~2.3.3"
      },
      "peerDependencies": {
        "@types/node": "^18.0.0 || >=20.0.0",
        "less": "*",
        "lightningcss": "^1.21.0",
        "sass": "*",
        "sass-embedded": "*",
        "stylus": "*",
        "sugarss": "*",
        "terser": "^5.4.0"
      },
      "peerDependenciesMeta": {
        "@types/node": {
          "optional": true
        },
        "less": {
          "optional": true
        },
        "lightningcss": {
          "optional": true
        },
        "sass": {
          "optional": true
        },
        "sass-embedded": {
          "optional": true
        },
        "stylus": {
          "optional": true
        },
        "sugarss": {
          "optional": true
        },
        "terser": {
          "optional": true
        }
      }
    },
    "node_modules/which": {
      "version": "2.0.2",
      "resolved": "https://registry.npmjs.org/which/-/which-2.0.2.tgz",
      "integrity": "sha512-BLI3Tl1TW3Pvl70l3yq3Y64i+awpwXqsGBYWkkqMtnbXgrMD+yj7rhW0kuEDxzJaYXGjEW5ogapKNMEKNMjibA==",
      "dev": true,
      "dependencies": {
        "isexe": "^2.0.0"
      },
      "bin": {
        "node-which": "bin/node-which"
      },
      "engines": {
        "node": ">= 8"
      }
    },
    "node_modules/word-wrap": {
      "version": "1.2.5",
      "resolved": "https://registry.npmjs.org/word-wrap/-/word-wrap-1.2.5.tgz",
      "integrity": "sha512-BN22B5eaMMI9UMtjrGd5g5eCYPpCPDUy0FJXbYsaT5zYxjFOckS53SQDE3pWkVoWpHXVb3BrYcEN4Twa55B5cA==",
      "dev": true,
      "engines": {
        "node": ">=0.10.0"
      }
    },
    "node_modules/wrap-ansi": {
      "version": "8.1.0",
      "resolved": "https://registry.npmjs.org/wrap-ansi/-/wrap-ansi-8.1.0.tgz",
      "integrity": "sha512-si7QWI6zUMq56bESFvagtmzMdGOtoxfR+Sez11Mobfc7tm+VkUckk9bW2UeffTGVUbOksxmSw0AA2gs8g71NCQ==",
      "dev": true,
      "dependencies": {
        "ansi-styles": "^6.1.0",
        "string-width": "^5.0.1",
        "strip-ansi": "^7.0.1"
      },
      "engines": {
        "node": ">=12"
      },
      "funding": {
        "url": "https://github.com/chalk/wrap-ansi?sponsor=1"
      }
    },
    "node_modules/wrap-ansi-cjs": {
      "name": "wrap-ansi",
      "version": "7.0.0",
      "resolved": "https://registry.npmjs.org/wrap-ansi/-/wrap-ansi-7.0.0.tgz",
      "integrity": "sha512-YVGIj2kamLSTxw6NsZjoBxfSwsn0ycdesmc4p+Q21c5zPuZ1pl+NfxVdxPtdHvmNVOQ6XSYG4AUtyt/Fi7D16Q==",
      "dev": true,
      "dependencies": {
        "ansi-styles": "^4.0.0",
        "string-width": "^4.1.0",
        "strip-ansi": "^6.0.0"
      },
      "engines": {
        "node": ">=10"
      },
      "funding": {
        "url": "https://github.com/chalk/wrap-ansi?sponsor=1"
      }
    },
    "node_modules/wrap-ansi-cjs/node_modules/ansi-regex": {
      "version": "5.0.1",
      "resolved": "https://registry.npmjs.org/ansi-regex/-/ansi-regex-5.0.1.tgz",
      "integrity": "sha512-quJQXlTSUGL2LH9SUXo8VwsY4soanhgo6LNSm84E1LBcE8s3O0wpdiRzyR9z/ZZJMlMWv37qOOb9pdJlMUEKFQ==",
      "dev": true,
      "engines": {
        "node": ">=8"
      }
    },
    "node_modules/wrap-ansi-cjs/node_modules/ansi-styles": {
      "version": "4.3.0",
      "resolved": "https://registry.npmjs.org/ansi-styles/-/ansi-styles-4.3.0.tgz",
      "integrity": "sha512-zbB9rCJAT1rbjiVDb2hqKFHNYLxgtk8NURxZ3IZwD3F6NtxbXZQCnnSi1Lkx+IDohdPlFp222wVALIheZJQSEg==",
      "dev": true,
      "dependencies": {
        "color-convert": "^2.0.1"
      },
      "engines": {
        "node": ">=8"
      },
      "funding": {
        "url": "https://github.com/chalk/ansi-styles?sponsor=1"
      }
    },
    "node_modules/wrap-ansi-cjs/node_modules/color-convert": {
      "version": "2.0.1",
      "resolved": "https://registry.npmjs.org/color-convert/-/color-convert-2.0.1.tgz",
      "integrity": "sha512-RRECPsj7iu/xb5oKYcsFHSppFNnsj/52OVTRKb4zP5onXwVF3zVmmToNcOfGC+CRDpfK/U584fMg38ZHCaElKQ==",
      "dev": true,
      "dependencies": {
        "color-name": "~1.1.4"
      },
      "engines": {
        "node": ">=7.0.0"
      }
    },
    "node_modules/wrap-ansi-cjs/node_modules/color-name": {
      "version": "1.1.4",
      "resolved": "https://registry.npmjs.org/color-name/-/color-name-1.1.4.tgz",
      "integrity": "sha512-dOy+3AuW3a2wNbZHIuMZpTcgjGuLU/uBL/ubcZF9OXbDo8ff4O8yVp5Bf0efS8uEoYo5q4Fx7dY9OgQGXgAsQA==",
      "dev": true
    },
    "node_modules/wrap-ansi-cjs/node_modules/emoji-regex": {
      "version": "8.0.0",
      "resolved": "https://registry.npmjs.org/emoji-regex/-/emoji-regex-8.0.0.tgz",
      "integrity": "sha512-MSjYzcWNOA0ewAHpz0MxpYFvwg6yjy1NG3xteoqz644VCo/RPgnr1/GGt+ic3iJTzQ8Eu3TdM14SawnVUmGE6A==",
      "dev": true
    },
    "node_modules/wrap-ansi-cjs/node_modules/string-width": {
      "version": "4.2.3",
      "resolved": "https://registry.npmjs.org/string-width/-/string-width-4.2.3.tgz",
      "integrity": "sha512-wKyQRQpjJ0sIp62ErSZdGsjMJWsap5oRNihHhu6G7JVO/9jIB6UyevL+tXuOqrng8j/cxKTWyWUwvSTriiZz/g==",
      "dev": true,
      "dependencies": {
        "emoji-regex": "^8.0.0",
        "is-fullwidth-code-point": "^3.0.0",
        "strip-ansi": "^6.0.1"
      },
      "engines": {
        "node": ">=8"
      }
    },
    "node_modules/wrap-ansi-cjs/node_modules/strip-ansi": {
      "version": "6.0.1",
      "resolved": "https://registry.npmjs.org/strip-ansi/-/strip-ansi-6.0.1.tgz",
      "integrity": "sha512-Y38VPSHcqkFrCpFnQ9vuSXmquuv5oXOKpGeT6aGrr3o3Gc9AlVa6JBfUSOCnbxGGZF+/0ooI7KrPuUSztUdU5A==",
      "dev": true,
      "dependencies": {
        "ansi-regex": "^5.0.1"
      },
      "engines": {
        "node": ">=8"
      }
    },
    "node_modules/wrap-ansi/node_modules/ansi-styles": {
      "version": "6.2.1",
      "resolved": "https://registry.npmjs.org/ansi-styles/-/ansi-styles-6.2.1.tgz",
      "integrity": "sha512-bN798gFfQX+viw3R7yrGWRqnrN2oRkEkUjjl4JNn4E8GxxbjtG3FbrEIIY3l8/hrwUwIeCZvi4QuOTP4MErVug==",
      "dev": true,
      "engines": {
        "node": ">=12"
      },
      "funding": {
        "url": "https://github.com/chalk/ansi-styles?sponsor=1"
      }
    },
    "node_modules/yallist": {
      "version": "3.1.1",
      "resolved": "https://registry.npmjs.org/yallist/-/yallist-3.1.1.tgz",
      "integrity": "sha512-a4UGQaWPH59mOXUYnAG2ewncQS4i4F43Tv3JoAM+s2VDAmS9NsK8GpDMLrCHPksFT7h3K6TOoUNn2pb7RoXx4g==",
      "dev": true
    },
    "node_modules/yaml": {
      "version": "2.5.1",
      "resolved": "https://registry.npmjs.org/yaml/-/yaml-2.5.1.tgz",
      "integrity": "sha512-bLQOjaX/ADgQ20isPJRvF0iRUHIxVhYvr53Of7wGcWlO2jvtUlH5m87DsmulFVxRpNLOnI4tB6p/oh8D7kpn9Q==",
      "dev": true,
      "bin": {
        "yaml": "bin.mjs"
      },
      "engines": {
        "node": ">= 14"
      }
    },
    "node_modules/yocto-queue": {
      "version": "0.1.0",
      "resolved": "https://registry.npmjs.org/yocto-queue/-/yocto-queue-0.1.0.tgz",
      "integrity": "sha512-rVksvsnNCdJ/ohGc6xgPwyN8eheCxsiLM8mxuE/t/mOVqJewPuO1miLpTHQiRgTKCLexL4MeAFVagts7HmNZ2Q==",
      "dev": true,
      "engines": {
        "node": ">=10"
      },
      "funding": {
        "url": "https://github.com/sponsors/sindresorhus"
      }
    }
  }
}

----------------------------------------

----------------------------------------
FILE: /mnt/c/Users/sansk/OneDrive/Documents/GitHub/SRE-Monitoring-Dashboard/package.json
----------------------------------------
{
  "name": "advanced-sre-monitoring-dashboard",
  "private": true,
  "version": "0.0.0",
  "type": "module",
  "scripts": {
    "dev": "vite",
    "build": "vite build",
    "lint": "eslint .",
    "preview": "vite preview"
  },
  "dependencies": {
    "lucide-react": "^0.344.0",
    "react": "^18.3.1",
    "react-dom": "^18.3.1",
    "date-fns": "^3.6.0",
    "recharts": "^2.12.7",
    "react-router-dom": "^6.20.1",
    "react-hook-form": "^7.48.2",
    "react-hot-toast": "^2.4.1"
  },
  "devDependencies": {
    "@eslint/js": "^9.9.1",
    "@types/react": "^18.3.5",
    "@types/react-dom": "^18.3.0",
    "@vitejs/plugin-react": "^4.3.1",
    "autoprefixer": "^10.4.18",
    "eslint": "^9.9.1",
    "eslint-plugin-react-hooks": "^5.1.0-rc.0",
    "eslint-plugin-react-refresh": "^0.4.11",
    "globals": "^15.9.0",
    "postcss": "^8.4.35",
    "tailwindcss": "^3.4.1",
    "typescript": "^5.5.3",
    "typescript-eslint": "^8.3.0",
    "vite": "^5.4.2"
  }
}

----------------------------------------

----------------------------------------
FILE: /mnt/c/Users/sansk/OneDrive/Documents/GitHub/SRE-Monitoring-Dashboard/postcss.config.js
----------------------------------------
export default {
  plugins: {
    tailwindcss: {},
    autoprefixer: {},
  },
};

----------------------------------------

----------------------------------------
FILE: /mnt/c/Users/sansk/OneDrive/Documents/GitHub/SRE-Monitoring-Dashboard/print.py
----------------------------------------
#!/usr/bin/env python3
"""
Directory Content Extractor
Recursively traverses directories and prints all file contents to an output file
"""

import os
import sys
from pathlib import Path
import argparse

def is_binary_file(file_path):
    """Check if a file is binary by looking for null bytes"""
    try:
        with open(file_path, 'rb') as f:
            chunk = f.read(1024)
            return b'\0' in chunk
    except:
        return True

def get_file_content(file_path):
    """Get the content of a file, handling different encodings"""
    encodings = ['utf-8', 'latin-1', 'cp1252', 'iso-8859-1']
    
    for encoding in encodings:
        try:
            with open(file_path, 'r', encoding=encoding) as f:
                return f.read()
        except UnicodeDecodeError:
            continue
        except Exception as e:
            return f"[ERROR reading file: {str(e)}]"
    
    return "[ERROR: Could not decode file with any supported encoding]"

def extract_directory_contents(root_path, output_file, max_file_size=1024*1024):
    """
    Extract contents of all files in directory tree
    
    Args:
        root_path: Starting directory path
        output_file: Output file handle
        max_file_size: Maximum file size to read (default 1MB)
    """
    
    root_path = Path(root_path).resolve()
    
    # Write header
    output_file.write("="*80 + "\n")
    output_file.write(f"DIRECTORY CONTENT EXTRACTION\n")
    output_file.write(f"Root Path: {root_path}\n")
    output_file.write("="*80 + "\n\n")
    
    file_count = 0
    skipped_count = 0
    
    # Walk through directory tree
    for root, dirs, files in os.walk(root_path):
        current_dir = Path(root)
        
        # Skip hidden directories
        dirs[:] = [d for d in dirs if not d.startswith('.')]
        
        if files:
            output_file.write(f"\n{'='*60}\n")
            output_file.write(f"DIRECTORY: {current_dir}\n")
            output_file.write(f"{'='*60}\n\n")
            
            for file_name in sorted(files):
                file_path = current_dir / file_name
                
                # Skip hidden files
                if file_name.startswith('.'):
                    continue
                
                output_file.write(f"\n{'-'*40}\n")
                output_file.write(f"FILE: {file_path}\n")
                output_file.write(f"{'-'*40}\n")
                
                try:
                    # Check file size
                    file_size = file_path.stat().st_size
                    if file_size > max_file_size:
                        output_file.write(f"[SKIPPED: File too large ({file_size} bytes)]\n")
                        skipped_count += 1
                        continue
                    
                    # Check if binary
                    if is_binary_file(file_path):
                        output_file.write(f"[SKIPPED: Binary file ({file_size} bytes)]\n")
                        skipped_count += 1
                        continue
                    
                    # Read and write file content
                    content = get_file_content(file_path)
                    if content.strip():
                        output_file.write(content)
                        if not content.endswith('\n'):
                            output_file.write('\n')
                    else:
                        output_file.write("[EMPTY FILE]\n")
                    
                    file_count += 1
                    
                except Exception as e:
                    output_file.write(f"[ERROR: {str(e)}]\n")
                    skipped_count += 1
                
                output_file.write(f"\n{'-'*40}\n")
    
    # Write summary
    output_file.write(f"\n\n{'='*80}\n")
    output_file.write(f"EXTRACTION SUMMARY\n")
    output_file.write(f"{'='*80}\n")
    output_file.write(f"Files processed: {file_count}\n")
    output_file.write(f"Files skipped: {skipped_count}\n")
    output_file.write(f"Total files: {file_count + skipped_count}\n")

def main():
    parser = argparse.ArgumentParser(description='Extract contents of all files in a directory tree')
    parser.add_argument('directory', nargs='?', default='.', 
                       help='Directory to extract from (default: current directory)')
    parser.add_argument('-o', '--output', default='directory_contents.txt',
                       help='Output file name (default: directory_contents.txt)')
    parser.add_argument('--max-size', type=int, default=1024*1024,
                       help='Maximum file size to read in bytes (default: 1MB)')
    parser.add_argument('--include-hidden', action='store_true',
                       help='Include hidden files and directories')
    
    args = parser.parse_args()
    
    # Validate input directory
    if not os.path.exists(args.directory):
        print(f"Error: Directory '{args.directory}' does not exist")
        sys.exit(1)
    
    if not os.path.isdir(args.directory):
        print(f"Error: '{args.directory}' is not a directory")
        sys.exit(1)
    
    # Create output file
    try:
        with open(args.output, 'w', encoding='utf-8') as output_file:
            print(f"Extracting contents from '{args.directory}'...")
            print(f"Output will be saved to '{args.output}'")
            
            extract_directory_contents(args.directory, output_file, args.max_size)
            
            print(f"Extraction complete! Results saved to '{args.output}'")
            
    except Exception as e:
        print(f"Error: {str(e)}")
        sys.exit(1)

if __name__ == "__main__":
    main()

----------------------------------------

----------------------------------------
FILE: /mnt/c/Users/sansk/OneDrive/Documents/GitHub/SRE-Monitoring-Dashboard/tailwind.config.js
----------------------------------------
/** @type {import('tailwindcss').Config} */
export default {
  content: ['./index.html', './src/**/*.{js,ts,jsx,tsx}'],
  theme: {
    extend: {},
  },
  plugins: [],
};

----------------------------------------

----------------------------------------
FILE: /mnt/c/Users/sansk/OneDrive/Documents/GitHub/SRE-Monitoring-Dashboard/tsconfig.app.json
----------------------------------------
{
  "compilerOptions": {
    "target": "ES2020",
    "useDefineForClassFields": true,
    "lib": ["ES2020", "DOM", "DOM.Iterable"],
    "module": "ESNext",
    "skipLibCheck": true,

    /* Bundler mode */
    "moduleResolution": "bundler",
    "allowImportingTsExtensions": true,
    "isolatedModules": true,
    "moduleDetection": "force",
    "noEmit": true,
    "jsx": "react-jsx",

    /* Linting */
    "strict": true,
    "noUnusedLocals": true,
    "noUnusedParameters": true,
    "noFallthroughCasesInSwitch": true
  },
  "include": ["src"]
}

----------------------------------------

----------------------------------------
FILE: /mnt/c/Users/sansk/OneDrive/Documents/GitHub/SRE-Monitoring-Dashboard/tsconfig.json
----------------------------------------
{
  "files": [],
  "references": [
    { "path": "./tsconfig.app.json" },
    { "path": "./tsconfig.node.json" }
  ]
}

----------------------------------------

----------------------------------------
FILE: /mnt/c/Users/sansk/OneDrive/Documents/GitHub/SRE-Monitoring-Dashboard/tsconfig.node.json
----------------------------------------
{
  "compilerOptions": {
    "target": "ES2022",
    "lib": ["ES2023"],
    "module": "ESNext",
    "skipLibCheck": true,

    /* Bundler mode */
    "moduleResolution": "bundler",
    "allowImportingTsExtensions": true,
    "isolatedModules": true,
    "moduleDetection": "force",
    "noEmit": true,

    /* Linting */
    "strict": true,
    "noUnusedLocals": true,
    "noUnusedParameters": true,
    "noFallthroughCasesInSwitch": true
  },
  "include": ["vite.config.ts"]
}

----------------------------------------

----------------------------------------
FILE: /mnt/c/Users/sansk/OneDrive/Documents/GitHub/SRE-Monitoring-Dashboard/vite.config.ts
----------------------------------------
import { defineConfig } from 'vite';
import react from '@vitejs/plugin-react';

// https://vitejs.dev/config/
export default defineConfig({
  plugins: [react()],
  optimizeDeps: {
    exclude: ['lucide-react'],
  },
});

----------------------------------------

============================================================
DIRECTORY: /mnt/c/Users/sansk/OneDrive/Documents/GitHub/SRE-Monitoring-Dashboard/src
============================================================


----------------------------------------
FILE: /mnt/c/Users/sansk/OneDrive/Documents/GitHub/SRE-Monitoring-Dashboard/src/App.tsx
----------------------------------------
import React, { useState, useEffect } from 'react';
import { BrowserRouter as Router, Routes, Route, Navigate } from 'react-router-dom';
import { Toaster } from 'react-hot-toast';
import { Dashboard } from './components/Dashboard';
import { Reports } from './components/Reports';
import { Scheduler } from './components/Scheduler';
import { Settings } from './components/Settings';
import { AlertingConfig } from './components/AlertingConfig';
import { FileManager } from './components/FileManager';
import { EnvironmentTester } from './components/EnvironmentTester';
import { Sidebar } from './components/Sidebar';
import { Header } from './components/Header';
import { useLocalStorage } from './hooks/useLocalStorage';
import { MonitoringService } from './services/monitoringService';
import { EnvironmentResult, ClusterMetrics, ErrorDistribution, AppConfig, AlertConfig, FileConfig, AlertState } from './types';
import toast from 'react-hot-toast';

function App() {
  const [activeTab, setActiveTab] = useState('dashboard');
  const [config, setConfig] = useLocalStorage<AppConfig>('sreConfig', {
    apiKeys: {
      logging: '',
      data: ''
    },
    endpoints: {
      groundcoverLogging: 'https://grgrer.platform.grcv.io/json/logs',
      victoriaMetrics: 'https://ds.groundcover.com/datasources/prometheus/api/v1/query_range',
      clickhouse: 'https://ds.groundcover.com/'
    },
    environmentUrls: [
      'https://tenant-tempo2.erag-c1.gigaspaces.net',
      'https://tenant-demo.ws-use1.gigaspaces.net'
    ],
    errorDistUrls: [
      'https://tenant-tempo2.erag-c1.gigaspaces.net',
      'https://tenant-demo.ws-use1.gigaspaces.net'
    ],
    credentials: {
      email: '',
      password: ''
    },
    applicationIds: {
      default: 'ac115209-2353-4271-84f7-e2aa67090286',
      environmentSpecific: {}
    }
  });

  const [alertConfig, setAlertConfig] = useLocalStorage<AlertConfig>('alertConfig', {
    enabled: true,
    channels: {
      slack: {
        enabled: true,
        botToken: '',
        alertChannelId: 'C091MP3ECQJ',
        reportChannelId: 'C091MP3ECQJ'
      },
      email: {
        enabled: true,
        senderEmail: '',
        appPassword: '',
        recipients: ['sanskargupta966@gmail.com']
      }
    },
    thresholds: {
      queryResponseTime: 60,
      reminderInterval: 4
    },
    testExclusions: {
      environments: []
    }
  });

  const [fileConfig, setFileConfig] = useLocalStorage<FileConfig>('fileConfig', {
    baseDirectory: '/home/erag-noc/scripts/DailyReport-Script',
    files: {
      envList: '/home/erag-noc/Paras/dynamic_envs_list_genrator/prod-envs-list.txt',
      errorDistEnvs: 'error_dist_env_urls.txt',
      logo: 'logo.png',
      checkIcon: 'check-circle.png',
      timesIcon: 'times-circle.png',
      exclamationIcon: 'exclamation-circle.png'
    }
  });

  const [environments, setEnvironments] = useState<EnvironmentResult[]>([]);
  const [clusterMetrics, setClusterMetrics] = useState<ClusterMetrics[]>([]);
  const [errorDistributions, setErrorDistributions] = useState<ErrorDistribution[]>([]);
  const [isMonitoring, setIsMonitoring] = useState(false);
  const [isRunningTests, setIsRunningTests] = useState(false);
  const [lastUpdate, setLastUpdate] = useState<Date | null>(null);
  const [alertState, setAlertState] = useLocalStorage<AlertState>('alertState', {});
  const [monitoringService, setMonitoringService] = useState<MonitoringService | null>(null);

  // Initialize monitoring service when config changes
  useEffect(() => {
    if (config.apiKeys.logging && config.credentials.email && config.credentials.password) {
      const service = new MonitoringService(config, alertConfig);
      setMonitoringService(service);
    } else {
      setMonitoringService(null);
    }
  }, [config, alertConfig]);

  const validateConfiguration = (): boolean => {
    if (!config.apiKeys.logging) {
      toast.error('Logging API key is required. Please configure it in Settings.');
      return false;
    }
    if (!config.apiKeys.data) {
      toast.error('Data API key is required. Please configure it in Settings.');
      return false;
    }
    if (!config.credentials.email || !config.credentials.password) {
      toast.error('Login credentials are required. Please configure them in Settings.');
      return false;
    }
    return true;
  };

  const handleRunTests = async (urls: string[], exclusions: string[]) => {
    if (!validateConfiguration() || !monitoringService) {
      return;
    }

    setIsRunningTests(true);
    toast.loading('Running environment tests...');

    try {
      const results = await monitoringService.runEnvironmentTests(urls, exclusions);
      
      // Convert to the format expected by the UI
      const convertedResults: EnvironmentResult[] = results.map((result, index) => ({
        id: `${index + 1}`,
        namespace: result.namespace,
        cluster: result.cluster,
        region: result.region,
        url: result.url,
        loginPage: result.loginPage,
        authorization: result.authorization,
        message: result.message,
        queryTimeS: result.queryTimeS,
        version: result.version,
        lastChecked: result.lastChecked,
        lastTransactionDate: result.lastTransactionDate
      }));

      setEnvironments(convertedResults);
      setLastUpdate(new Date());

      // Process alerts
      if (alertConfig.enabled) {
        const newAlertState = await monitoringService.processAlerts(results, alertState);
        setAlertState(newAlertState);
      }

      toast.dismiss();
      toast.success(`Environment tests completed - ${results.length} environments tested`);
    } catch (error) {
      toast.dismiss();
      toast.error('Failed to run environment tests');
      console.error('Environment test error:', error);
    } finally {
      setIsRunningTests(false);
    }
  };

  const handleStartMonitoring = () => {
    if (!validateConfiguration() || !monitoringService) {
      return;
    }

    setIsMonitoring(true);
    setLastUpdate(new Date());
    toast.success('Monitoring started - running full monitoring cycle');
    
    // Run initial full monitoring
    handleRunFullMonitoring();
    
    // Set up interval for continuous monitoring
    const interval = setInterval(async () => {
      if (monitoringService) {
        try {
          const results = await monitoringService.runFullMonitoring(alertConfig.testExclusions.environments);
          
          // Convert and update state
          const convertedEnvironments: EnvironmentResult[] = results.environments.map((result, index) => ({
            id: `${index + 1}`,
            namespace: result.namespace,
            cluster: result.cluster,
            region: result.region,
            url: result.url,
            loginPage: result.loginPage,
            authorization: result.authorization,
            message: result.message,
            queryTimeS: result.queryTimeS,
            version: result.version,
            lastChecked: result.lastChecked,
            lastTransactionDate: result.lastTransactionDate
          }));

          const convertedClusterMetrics: ClusterMetrics[] = results.clusterMetrics.map(metric => ({
            cluster: metric.cluster,
            region: metric.region,
            nodes: metric.nodes,
            ramUsage: metric.ramUsage,
            cpuUsage: metric.cpuUsage,
            lastUpdated: metric.lastUpdated
          }));

          const convertedErrorDistributions: ErrorDistribution[] = results.errorDistributions.map(error => ({
            namespace: error.namespace,
            cluster: error.cluster,
            region: error.region,
            errors24h: error.errors24h,
            errorRate24h: error.errorRate24h,
            errors48h: error.errors48h,
            errorRate48h: error.errorRate48h,
            errors72h: error.errors72h,
            errorRate72h: error.errorRate72h
          }));

          setEnvironments(convertedEnvironments);
          setClusterMetrics(convertedClusterMetrics);
          setErrorDistributions(convertedErrorDistributions);
          setLastUpdate(new Date());
        } catch (error) {
          console.error('Monitoring cycle error:', error);
        }
      }
    }, 300000); // Run every 5 minutes

    // Store interval ID for cleanup
    (window as any).monitoringInterval = interval;
  };

  const handleStopMonitoring = () => {
    setIsMonitoring(false);
    
    // Clear monitoring interval
    if ((window as any).monitoringInterval) {
      clearInterval((window as any).monitoringInterval);
      delete (window as any).monitoringInterval;
    }
    
    toast.success('Monitoring stopped');
  };

  const handleRunFullMonitoring = async () => {
    if (!validateConfiguration() || !monitoringService) {
      return;
    }

    toast.loading('Running full monitoring cycle...');
    
    try {
      const results = await monitoringService.runFullMonitoring(alertConfig.testExclusions.environments);
      
      // Convert and update state
      const convertedEnvironments: EnvironmentResult[] = results.environments.map((result, index) => ({
        id: `${index + 1}`,
        namespace: result.namespace,
        cluster: result.cluster,
        region: result.region,
        url: result.url,
        loginPage: result.loginPage,
        authorization: result.authorization,
        message: result.message,
        queryTimeS: result.queryTimeS,
        version: result.version,
        lastChecked: result.lastChecked,
        lastTransactionDate: result.lastTransactionDate
      }));

      const convertedClusterMetrics: ClusterMetrics[] = results.clusterMetrics.map(metric => ({
        cluster: metric.cluster,
        region: metric.region,
        nodes: metric.nodes,
        ramUsage: metric.ramUsage,
        cpuUsage: metric.cpuUsage,
        lastUpdated: metric.lastUpdated
      }));

      const convertedErrorDistributions: ErrorDistribution[] = results.errorDistributions.map(error => ({
        namespace: error.namespace,
        cluster: error.cluster,
        region: error.region,
        errors24h: error.errors24h,
        errorRate24h: error.errorRate24h,
        errors48h: error.errors48h,
        errorRate48h: error.errorRate48h,
        errors72h: error.errors72h,
        errorRate72h: error.errorRate72h
      }));

      setEnvironments(convertedEnvironments);
      setClusterMetrics(convertedClusterMetrics);
      setErrorDistributions(convertedErrorDistributions);
      setLastUpdate(new Date());

      toast.dismiss();
      toast.success('Full monitoring cycle completed successfully');
    } catch (error) {
      toast.dismiss();
      toast.error('Full monitoring cycle failed');
      console.error('Full monitoring error:', error);
    }
  };

  const handleManualRun = async () => {
    await handleRunFullMonitoring();
  };

  const handleRunFrequentMode = async () => {
    toast.loading('Running frequent mode...');
    await handleRunTests(config.environmentUrls, alertConfig.testExclusions.environments);
    toast.dismiss();
    toast.success('Frequent mode completed - stateful alerting processed');
  };

  const handleRunDailyMode = async () => {
    toast.loading('Running daily mode...');
    await handleRunFullMonitoring();
    
    // TODO: Generate and send daily report
    toast.dismiss();
    toast.success('Daily mode completed - full monitoring and reporting');
  };

  // Cleanup on unmount
  useEffect(() => {
    return () => {
      if ((window as any).monitoringInterval) {
        clearInterval((window as any).monitoringInterval);
      }
    };
  }, []);

  return (
    <Router>
      <div className="min-h-screen bg-gradient-to-br from-slate-50 to-blue-50">
        <Toaster position="top-right" />
        <div className="flex">
          <Sidebar activeTab={activeTab} setActiveTab={setActiveTab} />
          
          <div className="flex-1 ml-64">
            <Header 
              isMonitoring={isMonitoring}
              lastUpdate={lastUpdate}
              onStartMonitoring={handleStartMonitoring}
              onStopMonitoring={handleStopMonitoring}
              onManualRun={handleManualRun}
              onRunFrequentMode={handleRunFrequentMode}
              onRunDailyMode={handleRunDailyMode}
            />
            
            <main className="p-6">
              <Routes>
                <Route path="/" element={<Navigate to="/dashboard" replace />} />
                <Route 
                  path="/dashboard" 
                  element={
                    <Dashboard 
                      environments={environments}
                      clusterMetrics={clusterMetrics}
                      errorDistributions={errorDistributions}
                      isMonitoring={isMonitoring}
                      alertState={alertState}
                    />
                  } 
                />
                <Route 
                  path="/reports" 
                  element={
                    <Reports 
                      environments={environments}
                      clusterMetrics={clusterMetrics}
                      errorDistributions={errorDistributions}
                    />
                  } 
                />
                <Route 
                  path="/scheduler" 
                  element={
                    <Scheduler 
                      config={config} 
                      setConfig={setConfig}
                      alertConfig={alertConfig}
                      setAlertConfig={setAlertConfig}
                    />
                  } 
                />
                <Route 
                  path="/alerting" 
                  element={
                    <AlertingConfig 
                      alertConfig={alertConfig}
                      setAlertConfig={setAlertConfig}
                      alertState={alertState}
                      setAlertState={setAlertState}
                    />
                  } 
                />
                <Route 
                  path="/files" 
                  element={
                    <FileManager 
                      fileConfig={fileConfig}
                      setFileConfig={setFileConfig}
                    />
                  } 
                />
                <Route 
                  path="/testing" 
                  element={
                    <EnvironmentTester 
                      config={config}
                      setConfig={setConfig}
                      onRunTests={handleRunTests}
                      isRunning={isRunningTests}
                    />
                  } 
                />
                <Route 
                  path="/settings" 
                  element={
                    <Settings 
                      config={config} 
                      setConfig={setConfig}
                    />
                  } 
                />
              </Routes>
            </main>
          </div>
        </div>
      </div>
    </Router>
  );
}

export default App;

----------------------------------------

----------------------------------------
FILE: /mnt/c/Users/sansk/OneDrive/Documents/GitHub/SRE-Monitoring-Dashboard/src/index.css
----------------------------------------
@tailwind base;
@tailwind components;
@tailwind utilities;

----------------------------------------

----------------------------------------
FILE: /mnt/c/Users/sansk/OneDrive/Documents/GitHub/SRE-Monitoring-Dashboard/src/main.tsx
----------------------------------------
import { StrictMode } from 'react';
import { createRoot } from 'react-dom/client';
import App from './App.tsx';
import './index.css';

createRoot(document.getElementById('root')!).render(
  <StrictMode>
    <App />
  </StrictMode>
);

----------------------------------------

----------------------------------------
FILE: /mnt/c/Users/sansk/OneDrive/Documents/GitHub/SRE-Monitoring-Dashboard/src/vite-env.d.ts
----------------------------------------
/// <reference types="vite/client" />

----------------------------------------

============================================================
DIRECTORY: /mnt/c/Users/sansk/OneDrive/Documents/GitHub/SRE-Monitoring-Dashboard/src/components
============================================================


----------------------------------------
FILE: /mnt/c/Users/sansk/OneDrive/Documents/GitHub/SRE-Monitoring-Dashboard/src/components/AlertOverview.tsx
----------------------------------------
import React from 'react';
import { AlertTriangle, CheckCircle, Clock, Bell } from 'lucide-react';
import { AlertState } from '../types';

interface AlertOverviewProps {
  alertState: AlertState;
}

export function AlertOverview({ alertState }: AlertOverviewProps) {
  const ongoingAlerts = Object.entries(alertState).filter(([_, state]) => state.status === 'FAIL');
  const totalTests = Object.keys(alertState).length;
  const passingTests = totalTests - ongoingAlerts.length;

  if (totalTests === 0) {
    return (
      <div className="bg-blue-50 border border-blue-200 rounded-xl p-6">
        <div className="flex items-center space-x-3">
          <Bell className="w-6 h-6 text-blue-600" />
          <h3 className="text-lg font-semibold text-blue-900">Alert Status</h3>
        </div>
        <p className="text-blue-700 mt-2">No monitoring data available. Start monitoring to see alert status.</p>
      </div>
    );
  }

  return (
    <div className="bg-white rounded-xl shadow-sm border border-gray-200">
      <div className="px-6 py-4 border-b border-gray-200">
        <div className="flex items-center space-x-3">
          <Bell className="w-5 h-5 text-blue-600" />
          <h3 className="text-lg font-semibold text-gray-900">Alert Overview</h3>
        </div>
      </div>
      
      <div className="p-6">
        <div className="grid grid-cols-1 md:grid-cols-3 gap-4 mb-6">
          <div className="bg-green-50 border border-green-200 rounded-lg p-4">
            <div className="flex items-center space-x-2">
              <CheckCircle className="w-5 h-5 text-green-600" />
              <span className="font-medium text-green-900">Passing Tests</span>
            </div>
            <p className="text-2xl font-bold text-green-700 mt-2">{passingTests}</p>
          </div>
          
          <div className="bg-red-50 border border-red-200 rounded-lg p-4">
            <div className="flex items-center space-x-2">
              <AlertTriangle className="w-5 h-5 text-red-600" />
              <span className="font-medium text-red-900">Failing Tests</span>
            </div>
            <p className="text-2xl font-bold text-red-700 mt-2">{ongoingAlerts.length}</p>
          </div>
          
          <div className="bg-blue-50 border border-blue-200 rounded-lg p-4">
            <div className="flex items-center space-x-2">
              <Clock className="w-5 h-5 text-blue-600" />
              <span className="font-medium text-blue-900">Total Tests</span>
            </div>
            <p className="text-2xl font-bold text-blue-700 mt-2">{totalTests}</p>
          </div>
        </div>

        {ongoingAlerts.length > 0 && (
          <div className="bg-red-50 border border-red-200 rounded-lg p-4">
            <h4 className="font-medium text-red-900 mb-3 flex items-center space-x-2">
              <AlertTriangle className="w-4 h-4" />
              <span>Active Alerts ({ongoingAlerts.length})</span>
            </h4>
            <div className="space-y-2 max-h-48 overflow-y-auto">
              {ongoingAlerts.map(([testKey, state]) => (
                <div key={testKey} className="flex items-center justify-between bg-white p-3 rounded border">
                  <div className="flex-1">
                    <div className="flex items-center space-x-2">
                      <span className="font-medium text-gray-900">{testKey}</span>
                      <span className="text-xs bg-red-100 text-red-800 px-2 py-1 rounded">FAILING</span>
                    </div>
                    <p className="text-sm text-gray-600 mt-1">
                      Environment: {state.namespace} • Cluster: {state.cluster}
                    </p>
                    {state.reason && (
                      <p className="text-xs text-red-600 mt-1">Reason: {state.reason}</p>
                    )}
                  </div>
                  <div className="text-right">
                    <p className="text-xs text-gray-500">
                      Since: {state.firstFailureTimestamp ? 
                        new Date(state.firstFailureTimestamp).toLocaleString() : 
                        'Unknown'
                      }
                    </p>
                  </div>
                </div>
              ))}
            </div>
          </div>
        )}

        {ongoingAlerts.length === 0 && totalTests > 0 && (
          <div className="bg-green-50 border border-green-200 rounded-lg p-4 text-center">
            <CheckCircle className="w-8 h-8 text-green-600 mx-auto mb-2" />
            <h4 className="font-medium text-green-900">All Tests Passing</h4>
            <p className="text-green-700 text-sm">No active alerts at this time</p>
          </div>
        )}
      </div>
    </div>
  );
}

----------------------------------------

----------------------------------------
FILE: /mnt/c/Users/sansk/OneDrive/Documents/GitHub/SRE-Monitoring-Dashboard/src/components/AlertingConfig.tsx
----------------------------------------
import React, { useState } from 'react';
import { Bell, Slack, Mail, AlertTriangle, CheckCircle, Clock, Settings as SettingsIcon } from 'lucide-react';
import { AlertConfig, AlertState } from '../types';
import { AlertingService } from '../services/alertingService';
import toast from 'react-hot-toast';

interface AlertingConfigProps {
  alertConfig: AlertConfig;
  setAlertConfig: (config: AlertConfig) => void;
  alertState: AlertState;
  setAlertState: (state: AlertState) => void;
}

export function AlertingConfig({ alertConfig, setAlertConfig, alertState, setAlertState }: AlertingConfigProps) {
  const [activeSection, setActiveSection] = useState('overview');
  const [testingConnections, setTestingConnections] = useState(false);

  const updateAlertConfig = (section: keyof AlertConfig, field: string, value: any) => {
    setAlertConfig({
      ...alertConfig,
      [section]: typeof alertConfig[section] === 'object' ? {
        ...alertConfig[section],
        [field]: value
      } : value
    });
  };

  const updateChannelConfig = (channel: 'slack' | 'email', field: string, value: any) => {
    setAlertConfig({
      ...alertConfig,
      channels: {
        ...alertConfig.channels,
        [channel]: {
          ...alertConfig.channels[channel],
          [field]: value
        }
      }
    });
  };

  const testConnections = async () => {
    if (!alertConfig.channels.slack.botToken && !alertConfig.channels.email.senderEmail) {
      toast.error('Please configure at least one notification channel first');
      return;
    }
    
    setTestingConnections(true);
    toast.loading('Testing connections...');
    
    try {
      const alertingService = new AlertingService(alertConfig);
      const results = await alertingService.testConnections();
      
      toast.dismiss();
      
      if (results.slack && alertConfig.channels.slack.enabled) {
        toast.success('Slack connection successful!');
      } else if (alertConfig.channels.slack.enabled) {
        toast.error('Slack connection failed - check your bot token and permissions');
      }
      
      if (results.email && alertConfig.channels.email.enabled) {
        toast.success('Email connection successful!');
      } else if (alertConfig.channels.email.enabled) {
        toast.error('Email connection failed - check your credentials');
      }
      
      if (results.groundcover) {
        toast.success('Groundcover logging connection successful!');
      } else {
        toast.error('Groundcover logging connection failed - check your API key');
      }
      
    } catch (error) {
      toast.dismiss();
      toast.error('Connection test failed');
      console.error('Connection test error:', error);
    } finally {
      setTestingConnections(false);
    }
  };

  const sendTestAlert = async () => {
    if (!alertConfig.enabled) {
      toast.error('Alerting is disabled. Enable it first.');
      return;
    }

    toast.loading('Sending test alert...');
    
    try {
      const alertingService = new AlertingService(alertConfig);
      
      // Send test alert to all configured channels
      if (alertConfig.channels.slack.enabled && alertConfig.channels.slack.botToken) {
        const slackService = new (await import('../services/slackService')).SlackService(alertConfig.channels.slack.botToken);
        await slackService.sendAlert(
          alertConfig.channels.slack.alertChannelId,
          'test-environment',
          'test-cluster',
          'This is a test alert from the SRE Monitoring Dashboard'
        );
      }
      
      if (alertConfig.channels.email.enabled && alertConfig.channels.email.senderEmail) {
        const emailService = new (await import('../services/emailService')).EmailService(
          alertConfig.channels.email.senderEmail,
          alertConfig.channels.email.appPassword
        );
        await emailService.sendAlert(
          alertConfig.channels.email.recipients,
          'test-environment',
          'test-cluster',
          'This is a test alert from the SRE Monitoring Dashboard'
        );
      }
      
      toast.dismiss();
      toast.success('Test alert sent successfully!');
    } catch (error) {
      toast.dismiss();
      toast.error('Failed to send test alert');
      console.error('Test alert error:', error);
    }
  };

  const clearAlertState = () => {
    setAlertState({});
    toast.success('Alert state cleared successfully');
  };

  const sections = [
    { id: 'overview', label: 'Overview', icon: Bell },
    { id: 'slack', label: 'Slack Config', icon: Slack },
    { id: 'email', label: 'Email Config', icon: Mail },
    { id: 'thresholds', label: 'Thresholds', icon: SettingsIcon },
    { id: 'exclusions', label: 'Exclusions', icon: AlertTriangle }
  ];

  const ongoingAlerts = Object.entries(alertState).filter(([_, state]) => state.status === 'FAIL');

  return (
    <div className="space-y-6">
      <div className="bg-white rounded-xl shadow-sm border border-gray-200">
        <div className="flex items-center justify-between p-6 border-b border-gray-200">
          <div className="flex items-center space-x-3">
            <Bell className="w-6 h-6 text-blue-600" />
            <h2 className="text-xl font-semibold text-gray-900">Alerting Configuration</h2>
          </div>
          
          <div className="flex items-center space-x-3">
            <button
              onClick={testConnections}
              disabled={testingConnections}
              className="flex items-center space-x-2 px-4 py-2 bg-blue-600 text-white rounded-lg hover:bg-blue-700 disabled:opacity-50 transition-colors"
            >
              <CheckCircle className="w-4 h-4" />
              <span>{testingConnections ? 'Testing...' : 'Test Connections'}</span>
            </button>
            
            <button
              onClick={sendTestAlert}
              className="flex items-center space-x-2 px-4 py-2 bg-orange-600 text-white rounded-lg hover:bg-orange-700 transition-colors"
            >
              <AlertTriangle className="w-4 h-4" />
              <span>Send Test Alert</span>
            </button>
            
            <div className={`flex items-center space-x-2 px-3 py-2 rounded-lg ${
              alertConfig.enabled ? 'bg-green-100 text-green-800' : 'bg-red-100 text-red-800'
            }`}>
              {alertConfig.enabled ? <CheckCircle className="w-4 h-4" /> : <AlertTriangle className="w-4 h-4" />}
              <span className="text-sm font-medium">
                {alertConfig.enabled ? 'Alerting Enabled' : 'Alerting Disabled'}
              </span>
            </div>
            
            <label className="flex items-center space-x-2 cursor-pointer">
              <input
                type="checkbox"
                checked={alertConfig.enabled}
                onChange={(e) => updateAlertConfig('enabled', '', e.target.checked)}
                className="text-blue-600 focus:ring-blue-500"
              />
              <span className="text-sm font-medium text-gray-700">Enable Alerting</span>
            </label>
          </div>
        </div>

        <div className="flex">
          {/* Sidebar */}
          <div className="w-64 p-6 border-r border-gray-200">
            <nav className="space-y-2">
              {sections.map((section) => {
                const Icon = section.icon;
                return (
                  <button
                    key={section.id}
                    onClick={() => setActiveSection(section.id)}
                    className={`w-full flex items-center space-x-3 px-3 py-2 rounded-lg text-left transition-colors ${
                      activeSection === section.id
                        ? 'bg-blue-50 text-blue-700 border border-blue-200'
                        : 'text-gray-600 hover:bg-gray-50'
                    }`}
                  >
                    <Icon className="w-4 h-4" />
                    <span className="font-medium">{section.label}</span>
                  </button>
                );
              })}
            </nav>
          </div>

          {/* Content */}
          <div className="flex-1 p-6">
            {activeSection === 'overview' && (
              <div className="space-y-6">
                <h3 className="text-lg font-medium text-gray-900">Alert Overview</h3>
                
                <div className="grid grid-cols-1 md:grid-cols-3 gap-4">
                  <div className="bg-green-50 border border-green-200 rounded-lg p-4">
                    <div className="flex items-center space-x-2">
                      <CheckCircle className="w-5 h-5 text-green-600" />
                      <span className="font-medium text-green-900">Active Channels</span>
                    </div>
                    <p className="text-2xl font-bold text-green-700 mt-2">
                      {(alertConfig.channels.slack.enabled ? 1 : 0) + (alertConfig.channels.email.enabled ? 1 : 0)}
                    </p>
                  </div>
                  
                  <div className="bg-red-50 border border-red-200 rounded-lg p-4">
                    <div className="flex items-center space-x-2">
                      <AlertTriangle className="w-5 h-5 text-red-600" />
                      <span className="font-medium text-red-900">Ongoing Alerts</span>
                    </div>
                    <p className="text-2xl font-bold text-red-700 mt-2">{ongoingAlerts.length}</p>
                  </div>
                  
                  <div className="bg-blue-50 border border-blue-200 rounded-lg p-4">
                    <div className="flex items-center space-x-2">
                      <Clock className="w-5 h-5 text-blue-600" />
                      <span className="font-medium text-blue-900">Reminder Interval</span>
                    </div>
                    <p className="text-2xl font-bold text-blue-700 mt-2">{alertConfig.thresholds.reminderInterval}h</p>
                  </div>
                </div>

                {ongoingAlerts.length > 0 && (
                  <div className="bg-red-50 border border-red-200 rounded-lg p-4">
                    <h4 className="font-medium text-red-900 mb-3">Current Active Alerts</h4>
                    <div className="space-y-2">
                      {ongoingAlerts.map(([testKey, state]) => (
                        <div key={testKey} className="flex items-center justify-between bg-white p-3 rounded border">
                          <div>
                            <span className="font-medium text-gray-900">{testKey}</span>
                            <p className="text-sm text-gray-600">
                              {state.namespace} • {state.cluster}
                              {state.reason && ` • ${state.reason}`}
                            </p>
                          </div>
                          <span className="text-xs text-red-600 bg-red-100 px-2 py-1 rounded">
                            {state.firstFailureTimestamp ? 
                              new Date(state.firstFailureTimestamp).toLocaleString() : 
                              'Unknown'
                            }
                          </span>
                        </div>
                      ))}
                    </div>
                    <button
                      onClick={clearAlertState}
                      className="mt-3 px-4 py-2 bg-red-600 text-white rounded-lg hover:bg-red-700 transition-colors"
                    >
                      Clear All Alert States
                    </button>
                  </div>
                )}

                <div className="bg-blue-50 border border-blue-200 rounded-lg p-4">
                  <h4 className="font-medium text-blue-900 mb-3">Integration Status</h4>
                  <div className="space-y-2">
                    <div className="flex items-center justify-between">
                      <span className="text-sm text-gray-700">Slack Integration</span>
                      <span className={`text-xs px-2 py-1 rounded ${
                        alertConfig.channels.slack.enabled && alertConfig.channels.slack.botToken
                          ? 'bg-green-100 text-green-800'
                          : 'bg-gray-100 text-gray-600'
                      }`}>
                        {alertConfig.channels.slack.enabled && alertConfig.channels.slack.botToken ? 'Configured' : 'Not Configured'}
                      </span>
                    </div>
                    <div className="flex items-center justify-between">
                      <span className="text-sm text-gray-700">Email Integration</span>
                      <span className={`text-xs px-2 py-1 rounded ${
                        alertConfig.channels.email.enabled && alertConfig.channels.email.senderEmail
                          ? 'bg-green-100 text-green-800'
                          : 'bg-gray-100 text-gray-600'
                      }`}>
                        {alertConfig.channels.email.enabled && alertConfig.channels.email.senderEmail ? 'Configured' : 'Not Configured'}
                      </span>
                    </div>
                    <div className="flex items-center justify-between">
                      <span className="text-sm text-gray-700">Groundcover Logging</span>
                      <span className="text-xs px-2 py-1 rounded bg-green-100 text-green-800">
                        Active
                      </span>
                    </div>
                  </div>
                </div>
              </div>
            )}

            {activeSection === 'slack' && (
              <div className="space-y-6">
                <div className="flex items-center justify-between">
                  <h3 className="text-lg font-medium text-gray-900">Slack Configuration</h3>
                  <label className="flex items-center space-x-2">
                    <input
                      type="checkbox"
                      checked={alertConfig.channels.slack.enabled}
                      onChange={(e) => updateChannelConfig('slack', 'enabled', e.target.checked)}
                      className="text-blue-600 focus:ring-blue-500"
                    />
                    <span className="text-sm font-medium text-gray-700">Enable Slack Alerts</span>
                  </label>
                </div>

                <div className="bg-blue-50 border border-blue-200 rounded-lg p-4">
                  <h4 className="font-medium text-blue-900 mb-2">Setup Instructions</h4>
                  <ol className="text-sm text-blue-800 space-y-1">
                    <li>1. Create a Slack app at <a href="https://api.slack.com/apps" target="_blank" rel="noopener noreferrer" className="underline">api.slack.com/apps</a></li>
                    <li>2. Add the "chat:write" OAuth scope</li>
                    <li>3. Install the app to your workspace</li>
                    <li>4. Copy the Bot User OAuth Token (starts with xoxb-)</li>
                    <li>5. Invite the bot to your alert channels</li>
                  </ol>
                </div>

                <div className="space-y-4">
                  <div>
                    <label className="block text-sm font-medium text-gray-700 mb-2">
                      Bot Token *
                    </label>
                    <input
                      type="password"
                      value={alertConfig.channels.slack.botToken}
                      onChange={(e) => updateChannelConfig('slack', 'botToken', e.target.value)}
                      className="w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-transparent"
                      placeholder="xoxb-..."
                    />
                    <p className="text-xs text-gray-500 mt-1">Required for Slack integration</p>
                  </div>

                  <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
                    <div>
                      <label className="block text-sm font-medium text-gray-700 mb-2">
                        Alert Channel ID *
                      </label>
                      <input
                        type="text"
                        value={alertConfig.channels.slack.alertChannelId}
                        onChange={(e) => updateChannelConfig('slack', 'alertChannelId', e.target.value)}
                        className="w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-transparent"
                        placeholder="C091MP3ECQJ"
                      />
                      <p className="text-xs text-gray-500 mt-1">Channel for immediate alerts</p>
                    </div>

                    <div>
                      <label className="block text-sm font-medium text-gray-700 mb-2">
                        Report Channel ID *
                      </label>
                      <input
                        type="text"
                        value={alertConfig.channels.slack.reportChannelId}
                        onChange={(e) => updateChannelConfig('slack', 'reportChannelId', e.target.value)}
                        className="w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-transparent"
                        placeholder="C091MP3ECQJ"
                      />
                      <p className="text-xs text-gray-500 mt-1">Channel for daily reports</p>
                    </div>
                  </div>
                </div>
              </div>
            )}

            {activeSection === 'email' && (
              <div className="space-y-6">
                <div className="flex items-center justify-between">
                  <h3 className="text-lg font-medium text-gray-900">Email Configuration</h3>
                  <label className="flex items-center space-x-2">
                    <input
                      type="checkbox"
                      checked={alertConfig.channels.email.enabled}
                      onChange={(e) => updateChannelConfig('email', 'enabled', e.target.checked)}
                      className="text-blue-600 focus:ring-blue-500"
                    />
                    <span className="text-sm font-medium text-gray-700">Enable Email Alerts</span>
                  </label>
                </div>

                <div className="bg-yellow-50 border border-yellow-200 rounded-lg p-4">
                  <h4 className="font-medium text-yellow-900 mb-2">Setup Instructions</h4>
                  <p className="text-sm text-yellow-800">
                    For Gmail: Use an App Password instead of your regular password. 
                    Enable 2FA and generate an App Password in your Google Account settings.
                  </p>
                </div>

                <div className="space-y-4">
                  <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
                    <div>
                      <label className="block text-sm font-medium text-gray-700 mb-2">
                        Sender Email *
                      </label>
                      <input
                        type="email"
                        value={alertConfig.channels.email.senderEmail}
                        onChange={(e) => updateChannelConfig('email', 'senderEmail', e.target.value)}
                        className="w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-transparent"
                        placeholder="alerts@company.com"
                      />
                    </div>

                    <div>
                      <label className="block text-sm font-medium text-gray-700 mb-2">
                        App Password *
                      </label>
                      <input
                        type="password"
                        value={alertConfig.channels.email.appPassword}
                        onChange={(e) => updateChannelConfig('email', 'appPassword', e.target.value)}
                        className="w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-transparent"
                        placeholder="••••••••••••••••"
                      />
                    </div>
                  </div>

                  <div>
                    <label className="block text-sm font-medium text-gray-700 mb-2">
                      Recipients (comma-separated) *
                    </label>
                    <textarea
                      value={alertConfig.channels.email.recipients.join(', ')}
                      onChange={(e) => updateChannelConfig('email', 'recipients', e.target.value.split(',').map(s => s.trim()))}
                      className="w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-transparent"
                      rows={3}
                      placeholder="user1@company.com, user2@company.com"
                    />
                  </div>
                </div>
              </div>
            )}

            {activeSection === 'thresholds' && (
              <div className="space-y-6">
                <h3 className="text-lg font-medium text-gray-900">Alert Thresholds</h3>

                <div className="space-y-4">
                  <div>
                    <label className="block text-sm font-medium text-gray-700 mb-2">
                      Query Response Time Threshold (seconds)
                    </label>
                    <input
                      type="number"
                      value={alertConfig.thresholds.queryResponseTime}
                      onChange={(e) => updateAlertConfig('thresholds', 'queryResponseTime', parseInt(e.target.value))}
                      className="w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-transparent"
                      min="1"
                      max="300"
                    />
                    <p className="text-sm text-gray-500 mt-1">
                      Queries taking longer than this will trigger alerts
                    </p>
                  </div>

                  <div>
                    <label className="block text-sm font-medium text-gray-700 mb-2">
                      Reminder Interval (hours)
                    </label>
                    <input
                      type="number"
                      value={alertConfig.thresholds.reminderInterval}
                      onChange={(e) => updateAlertConfig('thresholds', 'reminderInterval', parseInt(e.target.value))}
                      className="w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-transparent"
                      min="1"
                      max="24"
                    />
                    <p className="text-sm text-gray-500 mt-1">
                      How often to send reminder alerts for ongoing failures
                    </p>
                  </div>
                </div>
              </div>
            )}

            {activeSection === 'exclusions' && (
              <div className="space-y-6">
                <h3 className="text-lg font-medium text-gray-900">Test Exclusions</h3>

                <div>
                  <label className="block text-sm font-medium text-gray-700 mb-2">
                    Excluded Environments (one per line)
                  </label>
                  <textarea
                    value={alertConfig.testExclusions.environments.join('\n')}
                    onChange={(e) => updateAlertConfig('testExclusions', 'environments', e.target.value.split('\n').filter(url => url.trim()))}
                    className="w-full h-32 px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-transparent"
                    placeholder="https://tenant-demo.erag-c1.gigaspaces.net"
                  />
                  <p className="text-sm text-gray-500 mt-1">
                    Environments listed here will be monitored but won't trigger alerts
                  </p>
                </div>
              </div>
            )}
          </div>
        </div>
      </div>
    </div>
  );
}

----------------------------------------

----------------------------------------
FILE: /mnt/c/Users/sansk/OneDrive/Documents/GitHub/SRE-Monitoring-Dashboard/src/components/ClusterMetricsTable.tsx
----------------------------------------
import React from 'react';
import { Server, Cpu, HardDrive } from 'lucide-react';
import { ClusterMetrics } from '../types';

interface ClusterMetricsTableProps {
  clusterMetrics: ClusterMetrics[];
}

export function ClusterMetricsTable({ clusterMetrics }: ClusterMetricsTableProps) {
  const getUsageColor = (usage: number, type: 'cpu' | 'ram') => {
    const threshold = type === 'cpu' ? 80 : 85;
    if (usage > threshold) return 'text-red-600 bg-red-50';
    if (usage > threshold - 20) return 'text-yellow-600 bg-yellow-50';
    return 'text-green-600 bg-green-50';
  };

  return (
    <div className="bg-white rounded-xl shadow-sm border border-gray-200">
      <div className="px-6 py-4 border-b border-gray-200">
        <h3 className="text-lg font-semibold text-gray-900">Cluster Metrics</h3>
        <p className="text-sm text-gray-500">Resource utilization across clusters</p>
      </div>
      
      <div className="p-6">
        {clusterMetrics.length === 0 ? (
          <div className="text-center text-gray-500 py-8">
            No cluster metrics available. Start monitoring to collect data.
          </div>
        ) : (
          <div className="space-y-4">
            {clusterMetrics.map((cluster, index) => (
              <div
                key={index}
                className="p-4 border border-gray-200 rounded-lg hover:shadow-md transition-all duration-200"
              >
                <div className="flex items-center justify-between mb-3">
                  <div>
                    <h4 className="text-sm font-semibold text-gray-900">{cluster.cluster}</h4>
                    <p className="text-xs text-gray-500">{cluster.region}</p>
                  </div>
                  <div className="flex items-center space-x-1 text-sm text-gray-600">
                    <Server className="w-4 h-4" />
                    <span>{cluster.nodes} nodes</span>
                  </div>
                </div>
                
                <div className="grid grid-cols-2 gap-4">
                  <div>
                    <div className="flex items-center space-x-2 mb-2">
                      <Cpu className="w-4 h-4 text-blue-500" />
                      <span className="text-sm font-medium text-gray-700">CPU Usage</span>
                    </div>
                    <div className="flex items-center space-x-2">
                      <div className="flex-1 bg-gray-200 rounded-full h-2">
                        <div
                          className="bg-blue-500 h-2 rounded-full transition-all duration-300"
                          style={{ width: `${cluster.cpuUsage}%` }}
                        />
                      </div>
                      <span className={`text-xs px-2 py-1 rounded-full font-medium ${getUsageColor(cluster.cpuUsage, 'cpu')}`}>
                        {cluster.cpuUsage.toFixed(1)}%
                      </span>
                    </div>
                  </div>
                  
                  <div>
                    <div className="flex items-center space-x-2 mb-2">
                      <HardDrive className="w-4 h-4 text-purple-500" />
                      <span className="text-sm font-medium text-gray-700">RAM Usage</span>
                    </div>
                    <div className="flex items-center space-x-2">
                      <div className="flex-1 bg-gray-200 rounded-full h-2">
                        <div
                          className="bg-purple-500 h-2 rounded-full transition-all duration-300"
                          style={{ width: `${cluster.ramUsage}%` }}
                        />
                      </div>
                      <span className={`text-xs px-2 py-1 rounded-full font-medium ${getUsageColor(cluster.ramUsage, 'ram')}`}>
                        {cluster.ramUsage.toFixed(1)}%
                      </span>
                    </div>
                  </div>
                </div>
              </div>
            ))}
          </div>
        )}
      </div>
    </div>
  );
}

----------------------------------------

----------------------------------------
FILE: /mnt/c/Users/sansk/OneDrive/Documents/GitHub/SRE-Monitoring-Dashboard/src/components/Dashboard.tsx
----------------------------------------
import React from 'react';
import { EnvironmentTable } from './EnvironmentTable';
import { ClusterMetricsTable } from './ClusterMetricsTable';
import { ErrorDistributionTable } from './ErrorDistributionTable';
import { MetricsOverview } from './MetricsOverview';
import { AlertOverview } from './AlertOverview';
import { EnvironmentResult, ClusterMetrics, ErrorDistribution, AlertState } from '../types';

interface DashboardProps {
  environments: EnvironmentResult[];
  clusterMetrics: ClusterMetrics[];
  errorDistributions: ErrorDistribution[];
  isMonitoring: boolean;
  alertState: AlertState;
}

export function Dashboard({ 
  environments, 
  clusterMetrics, 
  errorDistributions, 
  isMonitoring,
  alertState 
}: DashboardProps) {
  return (
    <div className="space-y-6">
      <MetricsOverview 
        environments={environments}
        clusterMetrics={clusterMetrics}
        errorDistributions={errorDistributions}
      />
      
      <AlertOverview alertState={alertState} />
      
      <div className="grid grid-cols-1 lg:grid-cols-2 gap-6">
        <div className="space-y-6">
          <EnvironmentTable environments={environments} />
        </div>
        
        <div className="space-y-6">
          <ClusterMetricsTable clusterMetrics={clusterMetrics} />
        </div>
      </div>
      
      <ErrorDistributionTable errorDistributions={errorDistributions} />
    </div>
  );
}

----------------------------------------

----------------------------------------
FILE: /mnt/c/Users/sansk/OneDrive/Documents/GitHub/SRE-Monitoring-Dashboard/src/components/EnvironmentTable.tsx
----------------------------------------
import React from 'react';
import { CheckCircle, XCircle, Clock, ExternalLink } from 'lucide-react';
import { EnvironmentResult } from '../types';

interface EnvironmentTableProps {
  environments: EnvironmentResult[];
}

export function EnvironmentTable({ environments }: EnvironmentTableProps) {
  const getStatusIcon = (status: string) => {
    switch (status) {
      case 'Live':
      case 'Success':
        return <CheckCircle className="w-4 h-4 text-green-500" />;
      case 'Fail':
      case 'Not Live':
        return <XCircle className="w-4 h-4 text-red-500" />;
      default:
        return <Clock className="w-4 h-4 text-gray-400" />;
    }
  };

  const getStatusColor = (status: string) => {
    switch (status) {
      case 'Live':
      case 'Success':
        return 'text-green-700 bg-green-50';
      case 'Fail':
      case 'Not Live':
        return 'text-red-700 bg-red-50';
      default:
        return 'text-gray-700 bg-gray-50';
    }
  };

  return (
    <div className="bg-white rounded-xl shadow-sm border border-gray-200">
      <div className="px-6 py-4 border-b border-gray-200">
        <h3 className="text-lg font-semibold text-gray-900">Environment Health</h3>
        <p className="text-sm text-gray-500">Real-time status of production environments</p>
      </div>
      
      <div className="overflow-x-auto">
        <table className="w-full">
          <thead>
            <tr className="bg-gray-50 border-b border-gray-200">
              <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
                Environment
              </th>
              <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
                Region
              </th>
              <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
                Status
              </th>
              <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
                Query Time
              </th>
              <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
                Actions
              </th>
            </tr>
          </thead>
          <tbody className="bg-white divide-y divide-gray-200">
            {environments.length === 0 ? (
              <tr>
                <td colSpan={5} className="px-6 py-8 text-center text-gray-500">
                  No environment data available. Run a manual check to populate data.
                </td>
              </tr>
            ) : (
              environments.map((env) => (
                <tr key={env.id} className="hover:bg-gray-50 transition-colors">
                  <td className="px-6 py-4 whitespace-nowrap">
                    <div>
                      <div className="text-sm font-medium text-gray-900">{env.namespace}</div>
                      <div className="text-sm text-gray-500">{env.cluster}</div>
                    </div>
                  </td>
                  <td className="px-6 py-4 whitespace-nowrap">
                    <span className="text-sm text-gray-900">{env.region}</span>
                  </td>
                  <td className="px-6 py-4 whitespace-nowrap">
                    <div className="flex items-center space-x-2">
                      {getStatusIcon(env.loginPage)}
                      <span className={`inline-flex px-2 py-1 text-xs font-semibold rounded-full ${getStatusColor(env.loginPage)}`}>
                        {env.loginPage}
                      </span>
                    </div>
                  </td>
                  <td className="px-6 py-4 whitespace-nowrap">
                    <span className="text-sm text-gray-900">{env.queryTimeS}s</span>
                  </td>
                  <td className="px-6 py-4 whitespace-nowrap">
                    <a
                      href={env.url}
                      target="_blank"
                      rel="noopener noreferrer"
                      className="inline-flex items-center space-x-1 text-blue-600 hover:text-blue-800 text-sm"
                    >
                      <ExternalLink className="w-4 h-4" />
                      <span>Open</span>
                    </a>
                  </td>
                </tr>
              ))
            )}
          </tbody>
        </table>
      </div>
    </div>
  );
}

----------------------------------------

----------------------------------------
FILE: /mnt/c/Users/sansk/OneDrive/Documents/GitHub/SRE-Monitoring-Dashboard/src/components/EnvironmentTester.tsx
----------------------------------------
import React, { useState } from 'react';
import { Play, Square, Settings, Plus, Trash2, AlertTriangle } from 'lucide-react';
import { AppConfig } from '../types';
import toast from 'react-hot-toast';

interface EnvironmentTesterProps {
  config: AppConfig;
  setConfig: (config: AppConfig) => void;
  onRunTests: (urls: string[], exclusions: string[]) => Promise<void>;
  isRunning: boolean;
}

export function EnvironmentTester({ config, setConfig, onRunTests, isRunning }: EnvironmentTesterProps) {
  const [selectedUrls, setSelectedUrls] = useState<string[]>([]);
  const [exclusions, setExclusions] = useState<string[]>([]);
  const [newUrl, setNewUrl] = useState('');
  const [newExclusion, setNewExclusion] = useState('');
  const [showAdvanced, setShowAdvanced] = useState(false);

  const handleAddUrl = () => {
    if (newUrl.trim() && !config.environmentUrls.includes(newUrl.trim())) {
      const updatedUrls = [...config.environmentUrls, newUrl.trim()];
      setConfig({
        ...config,
        environmentUrls: updatedUrls
      });
      setNewUrl('');
      toast.success('Environment URL added');
    }
  };

  const handleRemoveUrl = (url: string) => {
    const updatedUrls = config.environmentUrls.filter(u => u !== url);
    setConfig({
      ...config,
      environmentUrls: updatedUrls
    });
    setSelectedUrls(selectedUrls.filter(u => u !== url));
    toast.success('Environment URL removed');
  };

  const handleAddExclusion = () => {
    if (newExclusion.trim() && !exclusions.includes(newExclusion.trim())) {
      setExclusions([...exclusions, newExclusion.trim()]);
      setNewExclusion('');
      toast.success('Exclusion added');
    }
  };

  const handleRemoveExclusion = (exclusion: string) => {
    setExclusions(exclusions.filter(e => e !== exclusion));
    toast.success('Exclusion removed');
  };

  const handleRunTests = async () => {
    const urlsToTest = selectedUrls.length > 0 ? selectedUrls : config.environmentUrls;
    
    if (urlsToTest.length === 0) {
      toast.error('No environments selected for testing');
      return;
    }

    await onRunTests(urlsToTest, exclusions);
  };

  const handleSelectAll = () => {
    if (selectedUrls.length === config.environmentUrls.length) {
      setSelectedUrls([]);
    } else {
      setSelectedUrls([...config.environmentUrls]);
    }
  };

  return (
    <div className="bg-white rounded-xl shadow-sm border border-gray-200 p-6">
      <div className="flex items-center justify-between mb-6">
        <div className="flex items-center space-x-3">
          <Settings className="w-6 h-6 text-blue-600" />
          <h3 className="text-lg font-semibold text-gray-900">Environment Testing</h3>
        </div>
        
        <div className="flex items-center space-x-3">
          <button
            onClick={() => setShowAdvanced(!showAdvanced)}
            className="px-3 py-2 text-sm border border-gray-300 text-gray-700 rounded-lg hover:bg-gray-50 transition-colors"
          >
            {showAdvanced ? 'Hide Advanced' : 'Show Advanced'}
          </button>
          
          <button
            onClick={handleRunTests}
            disabled={isRunning || config.environmentUrls.length === 0}
            className="flex items-center space-x-2 px-4 py-2 bg-blue-600 text-white rounded-lg hover:bg-blue-700 disabled:opacity-50 disabled:cursor-not-allowed transition-colors"
          >
            {isRunning ? <Square className="w-4 h-4" /> : <Play className="w-4 h-4" />}
            <span>{isRunning ? 'Testing...' : 'Run Tests'}</span>
          </button>
        </div>
      </div>

      {/* Environment URLs */}
      <div className="space-y-4">
        <div className="flex items-center justify-between">
          <h4 className="font-medium text-gray-900">Environment URLs</h4>
          <div className="flex items-center space-x-2">
            <button
              onClick={handleSelectAll}
              className="text-sm text-blue-600 hover:text-blue-800"
            >
              {selectedUrls.length === config.environmentUrls.length ? 'Deselect All' : 'Select All'}
            </button>
            <span className="text-sm text-gray-500">
              ({selectedUrls.length} of {config.environmentUrls.length} selected)
            </span>
          </div>
        </div>

        <div className="grid grid-cols-1 gap-2 max-h-48 overflow-y-auto">
          {config.environmentUrls.map((url, index) => (
            <div key={index} className="flex items-center space-x-3 p-3 border border-gray-200 rounded-lg">
              <input
                type="checkbox"
                checked={selectedUrls.includes(url)}
                onChange={(e) => {
                  if (e.target.checked) {
                    setSelectedUrls([...selectedUrls, url]);
                  } else {
                    setSelectedUrls(selectedUrls.filter(u => u !== url));
                  }
                }}
                className="text-blue-600 focus:ring-blue-500"
              />
              <span className="flex-1 text-sm text-gray-900 font-mono">{url}</span>
              <button
                onClick={() => handleRemoveUrl(url)}
                className="p-1 text-red-600 hover:bg-red-50 rounded"
                title="Remove URL"
              >
                <Trash2 className="w-4 h-4" />
              </button>
            </div>
          ))}
        </div>

        <div className="flex space-x-2">
          <input
            type="url"
            value={newUrl}
            onChange={(e) => setNewUrl(e.target.value)}
            placeholder="https://tenant-example.erag-c1.gigaspaces.net"
            className="flex-1 px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-transparent"
          />
          <button
            onClick={handleAddUrl}
            className="flex items-center space-x-2 px-4 py-2 bg-green-600 text-white rounded-lg hover:bg-green-700 transition-colors"
          >
            <Plus className="w-4 h-4" />
            <span>Add</span>
          </button>
        </div>
      </div>

      {/* Advanced Options */}
      {showAdvanced && (
        <div className="mt-6 pt-6 border-t border-gray-200 space-y-4">
          <h4 className="font-medium text-gray-900">Test Exclusions</h4>
          <p className="text-sm text-gray-600">
            URLs listed here will be monitored but won't trigger alerts or be included in failure counts.
          </p>

          <div className="space-y-2">
            {exclusions.map((exclusion, index) => (
              <div key={index} className="flex items-center space-x-3 p-3 bg-yellow-50 border border-yellow-200 rounded-lg">
                <AlertTriangle className="w-4 h-4 text-yellow-600" />
                <span className="flex-1 text-sm text-gray-900 font-mono">{exclusion}</span>
                <button
                  onClick={() => handleRemoveExclusion(exclusion)}
                  className="p-1 text-red-600 hover:bg-red-50 rounded"
                  title="Remove exclusion"
                >
                  <Trash2 className="w-4 h-4" />
                </button>
              </div>
            ))}
          </div>

          <div className="flex space-x-2">
            <input
              type="url"
              value={newExclusion}
              onChange={(e) => setNewExclusion(e.target.value)}
              placeholder="https://tenant-example.erag-c1.gigaspaces.net"
              className="flex-1 px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-transparent"
            />
            <button
              onClick={handleAddExclusion}
              className="flex items-center space-x-2 px-4 py-2 bg-yellow-600 text-white rounded-lg hover:bg-yellow-700 transition-colors"
            >
              <Plus className="w-4 h-4" />
              <span>Add Exclusion</span>
            </button>
          </div>
        </div>
      )}

      {config.environmentUrls.length === 0 && (
        <div className="mt-4 p-4 bg-blue-50 border border-blue-200 rounded-lg">
          <p className="text-blue-800 text-sm">
            No environment URLs configured. Add some URLs above to start testing.
          </p>
        </div>
      )}
    </div>
  );
}

----------------------------------------

----------------------------------------
FILE: /mnt/c/Users/sansk/OneDrive/Documents/GitHub/SRE-Monitoring-Dashboard/src/components/ErrorDistributionTable.tsx
----------------------------------------
import React from 'react';
import { AlertTriangle, TrendingUp, TrendingDown } from 'lucide-react';
import { ErrorDistribution } from '../types';

interface ErrorDistributionTableProps {
  errorDistributions: ErrorDistribution[];
}

export function ErrorDistributionTable({ errorDistributions }: ErrorDistributionTableProps) {
  const getErrorRateColor = (rate: number, timeframe: '24h' | '48h' | '72h') => {
    const threshold = timeframe === '24h' ? 10 : 5;
    if (rate > threshold) return 'text-red-600 bg-red-50';
    if (rate > threshold / 2) return 'text-yellow-600 bg-yellow-50';
    return 'text-green-600 bg-green-50';
  };

  const getTrendIcon = (current: number, previous: number) => {
    if (current > previous) return <TrendingUp className="w-3 h-3 text-red-500" />;
    if (current < previous) return <TrendingDown className="w-3 h-3 text-green-500" />;
    return null;
  };

  return (
    <div className="bg-white rounded-xl shadow-sm border border-gray-200">
      <div className="px-6 py-4 border-b border-gray-200">
        <div className="flex items-center space-x-2">
          <AlertTriangle className="w-5 h-5 text-orange-500" />
          <h3 className="text-lg font-semibold text-gray-900">Error Distribution</h3>
        </div>
        <p className="text-sm text-gray-500">Error rates across namespaces (last 72 hours)</p>
      </div>
      
      <div className="overflow-x-auto">
        <table className="w-full">
          <thead>
            <tr className="bg-gray-50 border-b border-gray-200">
              <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
                Namespace
              </th>
              <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
                Cluster
              </th>
              <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
                24h Errors / Rate
              </th>
              <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
                48h Errors / Rate
              </th>
              <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
                72h Errors / Rate
              </th>
              <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
                Trend
              </th>
            </tr>
          </thead>
          <tbody className="bg-white divide-y divide-gray-200">
            {errorDistributions.length === 0 ? (
              <tr>
                <td colSpan={6} className="px-6 py-8 text-center text-gray-500">
                  No error distribution data available. Run monitoring to collect error metrics.
                </td>
              </tr>
            ) : (
              errorDistributions.map((error, index) => (
                <tr key={index} className="hover:bg-gray-50 transition-colors">
                  <td className="px-6 py-4 whitespace-nowrap">
                    <div>
                      <div className="text-sm font-medium text-blue-600 hover:text-blue-800 cursor-pointer">
                        {error.namespace}
                      </div>
                      <div className="text-sm text-gray-500">{error.region}</div>
                    </div>
                  </td>
                  <td className="px-6 py-4 whitespace-nowrap">
                    <span className="text-sm text-gray-900">{error.cluster}</span>
                  </td>
                  <td className="px-6 py-4 whitespace-nowrap">
                    <div>
                      <div className="text-sm font-medium text-gray-900">{error.errors24h}</div>
                      <span className={`inline-flex px-2 py-1 text-xs font-semibold rounded-full ${getErrorRateColor(error.errorRate24h, '24h')}`}>
                        {error.errorRate24h.toFixed(2)}%
                      </span>
                    </div>
                  </td>
                  <td className="px-6 py-4 whitespace-nowrap">
                    <div>
                      <div className="text-sm font-medium text-gray-900">{error.errors48h}</div>
                      <span className={`inline-flex px-2 py-1 text-xs font-semibold rounded-full ${getErrorRateColor(error.errorRate48h, '48h')}`}>
                        {error.errorRate48h.toFixed(2)}%
                      </span>
                    </div>
                  </td>
                  <td className="px-6 py-4 whitespace-nowrap">
                    <div>
                      <div className="text-sm font-medium text-gray-900">{error.errors72h}</div>
                      <span className={`inline-flex px-2 py-1 text-xs font-semibold rounded-full ${getErrorRateColor(error.errorRate72h, '72h')}`}>
                        {error.errorRate72h.toFixed(2)}%
                      </span>
                    </div>
                  </td>
                  <td className="px-6 py-4 whitespace-nowrap">
                    <div className="flex items-center space-x-1">
                      {getTrendIcon(error.errorRate24h, error.errorRate48h)}
                      <span className="text-xs text-gray-500">
                        {error.errorRate24h > error.errorRate48h ? 'Increasing' : 'Decreasing'}
                      </span>
                    </div>
                  </td>
                </tr>
              ))
            )}
          </tbody>
        </table>
      </div>
    </div>
  );
}

----------------------------------------

----------------------------------------
FILE: /mnt/c/Users/sansk/OneDrive/Documents/GitHub/SRE-Monitoring-Dashboard/src/components/FileManager.tsx
----------------------------------------
import React, { useState } from 'react';
import { FolderOpen, File, Upload, Download, Trash2, Edit, Save, X } from 'lucide-react';
import { FileConfig } from '../types';
import toast from 'react-hot-toast';

interface FileManagerProps {
  fileConfig: FileConfig;
  setFileConfig: (config: FileConfig) => void;
}

export function FileManager({ fileConfig, setFileConfig }: FileManagerProps) {
  const [editingFile, setEditingFile] = useState<string | null>(null);
  const [fileContents, setFileContents] = useState<Record<string, string>>({});

  const updateFileConfig = (field: string, value: string) => {
    if (field === 'baseDirectory') {
      setFileConfig({
        ...fileConfig,
        baseDirectory: value
      });
    } else {
      setFileConfig({
        ...fileConfig,
        files: {
          ...fileConfig.files,
          [field]: value
        }
      });
    }
  };

  const handleFileUpload = (fileKey: string, event: React.ChangeEvent<HTMLInputElement>) => {
    const file = event.target.files?.[0];
    if (file) {
      const reader = new FileReader();
      reader.onload = (e) => {
        const content = e.target?.result as string;
        setFileContents(prev => ({
          ...prev,
          [fileKey]: content
        }));
        toast.success(`${file.name} uploaded successfully`);
      };
      reader.readAsText(file);
    }
  };

  const handleSaveFile = (fileKey: string) => {
    // Simulate saving file
    toast.success(`${fileKey} saved successfully`);
    setEditingFile(null);
  };

  const handleDeleteFile = (fileKey: string) => {
    if (confirm(`Are you sure you want to delete ${fileKey}?`)) {
      setFileContents(prev => {
        const newContents = { ...prev };
        delete newContents[fileKey];
        return newContents;
      });
      toast.success(`${fileKey} deleted successfully`);
    }
  };

  const downloadFile = (fileKey: string, content: string) => {
    const blob = new Blob([content], { type: 'text/plain' });
    const url = URL.createObjectURL(blob);
    const a = document.createElement('a');
    a.href = url;
    a.download = fileKey;
    document.body.appendChild(a);
    a.click();
    document.body.removeChild(a);
    URL.revokeObjectURL(url);
    toast.success(`${fileKey} downloaded`);
  };

  const fileTypes = [
    { key: 'envList', label: 'Environment List', description: 'List of production environment URLs' },
    { key: 'errorDistEnvs', label: 'Error Distribution Envs', description: 'URLs for error distribution analysis' },
    { key: 'logo', label: 'Logo Image', description: 'Company logo for PDF reports' },
    { key: 'checkIcon', label: 'Check Icon', description: 'Success indicator icon' },
    { key: 'timesIcon', label: 'Times Icon', description: 'Failure indicator icon' },
    { key: 'exclamationIcon', label: 'Exclamation Icon', description: 'Warning indicator icon' }
  ];

  return (
    <div className="space-y-6">
      <div className="bg-white rounded-xl shadow-sm border border-gray-200">
        <div className="flex items-center justify-between p-6 border-b border-gray-200">
          <div className="flex items-center space-x-3">
            <FolderOpen className="w-6 h-6 text-blue-600" />
            <h2 className="text-xl font-semibold text-gray-900">File Manager</h2>
          </div>
        </div>

        <div className="p-6 space-y-6">
          {/* Base Directory Configuration */}
          <div className="bg-gray-50 rounded-lg p-4">
            <h3 className="text-lg font-medium text-gray-900 mb-4">Base Directory Configuration</h3>
            <div>
              <label className="block text-sm font-medium text-gray-700 mb-2">
                Base Directory Path
              </label>
              <input
                type="text"
                value={fileConfig.baseDirectory}
                onChange={(e) => updateFileConfig('baseDirectory', e.target.value)}
                className="w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-transparent"
                placeholder="/home/erag-noc/scripts/DailyReport-Script"
              />
              <p className="text-sm text-gray-500 mt-1">
                Root directory where all script files are located
              </p>
            </div>
          </div>

          {/* File Management */}
          <div>
            <h3 className="text-lg font-medium text-gray-900 mb-4">File Management</h3>
            <div className="grid grid-cols-1 lg:grid-cols-2 gap-6">
              {fileTypes.map((fileType) => (
                <div key={fileType.key} className="border border-gray-200 rounded-lg p-4">
                  <div className="flex items-center justify-between mb-3">
                    <div className="flex items-center space-x-2">
                      <File className="w-4 h-4 text-gray-500" />
                      <h4 className="font-medium text-gray-900">{fileType.label}</h4>
                    </div>
                    <div className="flex items-center space-x-2">
                      {fileContents[fileType.key] && (
                        <>
                          <button
                            onClick={() => downloadFile(fileType.key, fileContents[fileType.key])}
                            className="p-1 text-blue-600 hover:bg-blue-50 rounded"
                            title="Download"
                          >
                            <Download className="w-4 h-4" />
                          </button>
                          <button
                            onClick={() => setEditingFile(fileType.key)}
                            className="p-1 text-green-600 hover:bg-green-50 rounded"
                            title="Edit"
                          >
                            <Edit className="w-4 h-4" />
                          </button>
                          <button
                            onClick={() => handleDeleteFile(fileType.key)}
                            className="p-1 text-red-600 hover:bg-red-50 rounded"
                            title="Delete"
                          >
                            <Trash2 className="w-4 h-4" />
                          </button>
                        </>
                      )}
                    </div>
                  </div>

                  <p className="text-sm text-gray-600 mb-3">{fileType.description}</p>

                  <div className="space-y-3">
                    <div>
                      <label className="block text-sm font-medium text-gray-700 mb-1">
                        File Path
                      </label>
                      <input
                        type="text"
                        value={fileConfig.files[fileType.key as keyof typeof fileConfig.files]}
                        onChange={(e) => updateFileConfig(fileType.key, e.target.value)}
                        className="w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-transparent text-sm"
                        placeholder={`${fileType.key}.txt`}
                      />
                    </div>

                    <div>
                      <label className="block text-sm font-medium text-gray-700 mb-1">
                        Upload File
                      </label>
                      <input
                        type="file"
                        onChange={(e) => handleFileUpload(fileType.key, e)}
                        className="w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-transparent text-sm"
                        accept={fileType.key.includes('Icon') || fileType.key === 'logo' ? 'image/*' : '.txt,.json'}
                      />
                    </div>

                    {fileContents[fileType.key] && (
                      <div className="bg-gray-50 rounded p-2">
                        <span className="text-xs text-green-600 font-medium">✓ File loaded</span>
                      </div>
                    )}
                  </div>
                </div>
              ))}
            </div>
          </div>

          {/* File Editor Modal */}
          {editingFile && (
            <div className="fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center z-50">
              <div className="bg-white rounded-lg shadow-xl w-full max-w-4xl max-h-[80vh] overflow-hidden">
                <div className="flex items-center justify-between p-4 border-b border-gray-200">
                  <h3 className="text-lg font-medium text-gray-900">
                    Editing: {fileTypes.find(f => f.key === editingFile)?.label}
                  </h3>
                  <div className="flex items-center space-x-2">
                    <button
                      onClick={() => handleSaveFile(editingFile)}
                      className="flex items-center space-x-2 px-3 py-2 bg-green-600 text-white rounded-lg hover:bg-green-700 transition-colors"
                    >
                      <Save className="w-4 h-4" />
                      <span>Save</span>
                    </button>
                    <button
                      onClick={() => setEditingFile(null)}
                      className="flex items-center space-x-2 px-3 py-2 bg-gray-600 text-white rounded-lg hover:bg-gray-700 transition-colors"
                    >
                      <X className="w-4 h-4" />
                      <span>Close</span>
                    </button>
                  </div>
                </div>
                <div className="p-4">
                  <textarea
                    value={fileContents[editingFile] || ''}
                    onChange={(e) => setFileContents(prev => ({
                      ...prev,
                      [editingFile]: e.target.value
                    }))}
                    className="w-full h-96 px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-transparent font-mono text-sm"
                    placeholder="Enter file content here..."
                  />
                </div>
              </div>
            </div>
          )}
        </div>
      </div>
    </div>
  );
}

----------------------------------------

----------------------------------------
FILE: /mnt/c/Users/sansk/OneDrive/Documents/GitHub/SRE-Monitoring-Dashboard/src/components/Header.tsx
----------------------------------------
import React from 'react';
import { Play, Square, RefreshCw, Clock, Zap, FileText } from 'lucide-react';
import { format } from 'date-fns';

interface HeaderProps {
  isMonitoring: boolean;
  lastUpdate: Date | null;
  onStartMonitoring: () => void;
  onStopMonitoring: () => void;
  onManualRun: () => void;
  onRunFrequentMode: () => void;
  onRunDailyMode: () => void;
}

export function Header({ 
  isMonitoring, 
  lastUpdate, 
  onStartMonitoring, 
  onStopMonitoring, 
  onManualRun,
  onRunFrequentMode,
  onRunDailyMode
}: HeaderProps) {
  return (
    <header className="bg-white shadow-sm border-b border-gray-200 p-6">
      <div className="flex items-center justify-between">
        <div>
          <h2 className="text-2xl font-bold text-gray-900">Advanced SRE Monitor</h2>
          <p className="text-gray-600 mt-1">Real-time monitoring, alerting, and reporting dashboard</p>
        </div>

        <div className="flex items-center space-x-4">
          {lastUpdate && (
            <div className="flex items-center space-x-2 text-sm text-gray-500">
              <Clock className="w-4 h-4" />
              <span>Last updated: {format(lastUpdate, 'HH:mm:ss')}</span>
            </div>
          )}

          <div className="flex items-center space-x-2">
            {!isMonitoring ? (
              <button
                onClick={onStartMonitoring}
                className="flex items-center space-x-2 px-4 py-2 bg-green-600 text-white rounded-lg hover:bg-green-700 transition-colors"
              >
                <Play className="w-4 h-4" />
                <span>Start Monitoring</span>
              </button>
            ) : (
              <button
                onClick={onStopMonitoring}
                className="flex items-center space-x-2 px-4 py-2 bg-red-600 text-white rounded-lg hover:bg-red-700 transition-colors"
              >
                <Square className="w-4 h-4" />
                <span>Stop Monitoring</span>
              </button>
            )}

            <button
              onClick={onManualRun}
              className="flex items-center space-x-2 px-4 py-2 bg-blue-600 text-white rounded-lg hover:bg-blue-700 transition-colors"
            >
              <RefreshCw className="w-4 h-4" />
              <span>Manual Run</span>
            </button>

            <button
              onClick={onRunFrequentMode}
              className="flex items-center space-x-2 px-3 py-2 bg-purple-600 text-white rounded-lg hover:bg-purple-700 transition-colors"
            >
              <Zap className="w-4 h-4" />
              <span>Frequent Mode</span>
            </button>

            <button
              onClick={onRunDailyMode}
              className="flex items-center space-x-2 px-3 py-2 bg-orange-600 text-white rounded-lg hover:bg-orange-700 transition-colors"
            >
              <FileText className="w-4 h-4" />
              <span>Daily Mode</span>
            </button>
          </div>

          <div className={`flex items-center space-x-2 px-3 py-2 rounded-lg ${
            isMonitoring ? 'bg-green-100 text-green-800' : 'bg-gray-100 text-gray-600'
          }`}>
            <div className={`w-2 h-2 rounded-full ${
              isMonitoring ? 'bg-green-500' : 'bg-gray-400'
            }`} />
            <span className="text-sm font-medium">
              {isMonitoring ? 'Monitoring Active' : 'Monitoring Stopped'}
            </span>
          </div>
        </div>
      </div>
    </header>
  );
}

----------------------------------------

----------------------------------------
FILE: /mnt/c/Users/sansk/OneDrive/Documents/GitHub/SRE-Monitoring-Dashboard/src/components/MetricsOverview.tsx
----------------------------------------
import React from 'react';
import { Activity, Server, AlertTriangle, CheckCircle } from 'lucide-react';
import { EnvironmentResult, ClusterMetrics, ErrorDistribution } from '../types';

interface MetricsOverviewProps {
  environments: EnvironmentResult[];
  clusterMetrics: ClusterMetrics[];
  errorDistributions: ErrorDistribution[];
}

export function MetricsOverview({ 
  environments, 
  clusterMetrics, 
  errorDistributions 
}: MetricsOverviewProps) {
  const successfulEnvironments = environments.filter(env => env.loginPage === 'Live').length;
  const successfulQueries = environments.filter(env => env.message === 'Success').length;
  const totalNodes = clusterMetrics.reduce((sum, cluster) => sum + cluster.nodes, 0);
  const highestErrorRate = Math.max(...errorDistributions.map(err => err.errorRate24h), 0);

  const metrics = [
    {
      title: 'Environment Health',
      value: `${successfulEnvironments}/${environments.length}`,
      subtitle: 'Environments Live',
      icon: Activity,
      color: successfulEnvironments === environments.length ? 'green' : 'red',
      change: successfulEnvironments === environments.length ? '+100%' : `-${Math.round((1 - successfulEnvironments/environments.length) * 100)}%`
    },
    {
      title: 'Query Success',
      value: `${successfulQueries}/${environments.length}`,
      subtitle: 'Successful Queries',
      icon: CheckCircle,
      color: successfulQueries === environments.length ? 'green' : 'yellow',
      change: `${Math.round((successfulQueries/environments.length) * 100)}%`
    },
    {
      title: 'Total Nodes',
      value: totalNodes.toString(),
      subtitle: 'Across All Clusters',
      icon: Server,
      color: 'blue',
      change: '+12.5%'
    },
    {
      title: 'Highest Error Rate',
      value: `${highestErrorRate.toFixed(1)}%`,
      subtitle: 'Last 24 Hours',
      icon: AlertTriangle,
      color: highestErrorRate > 10 ? 'red' : highestErrorRate > 5 ? 'yellow' : 'green',
      change: highestErrorRate > 10 ? '+5.2%' : '-2.1%'
    }
  ];

  const getColorClasses = (color: string) => {
    switch (color) {
      case 'green':
        return 'bg-green-50 text-green-700 border-green-200';
      case 'red':
        return 'bg-red-50 text-red-700 border-red-200';
      case 'yellow':
        return 'bg-yellow-50 text-yellow-700 border-yellow-200';
      case 'blue':
        return 'bg-blue-50 text-blue-700 border-blue-200';
      default:
        return 'bg-gray-50 text-gray-700 border-gray-200';
    }
  };

  return (
    <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-6">
      {metrics.map((metric, index) => {
        const Icon = metric.icon;
        return (
          <div
            key={index}
            className={`p-6 rounded-xl border ${getColorClasses(metric.color)} transition-all duration-200 hover:shadow-lg`}
          >
            <div className="flex items-start justify-between">
              <div>
                <p className="text-sm font-medium opacity-70">{metric.title}</p>
                <p className="text-2xl font-bold mt-1">{metric.value}</p>
                <p className="text-xs opacity-60 mt-1">{metric.subtitle}</p>
              </div>
              <Icon className="w-8 h-8 opacity-60" />
            </div>
            <div className="flex items-center mt-4 space-x-2">
              <span className="text-xs font-medium">{metric.change}</span>
              <span className="text-xs opacity-50">vs last period</span>
            </div>
          </div>
        );
      })}
    </div>
  );
}

----------------------------------------

----------------------------------------
FILE: /mnt/c/Users/sansk/OneDrive/Documents/GitHub/SRE-Monitoring-Dashboard/src/components/Reports.tsx
----------------------------------------
import React, { useState } from 'react';
import { FileText, Download, Eye, Calendar, Clock } from 'lucide-react';
import { EnvironmentResult, ClusterMetrics, ErrorDistribution } from '../types';
import { format } from 'date-fns';

interface ReportsProps {
  environments: EnvironmentResult[];
  clusterMetrics: ClusterMetrics[];
  errorDistributions: ErrorDistribution[];
}

export function Reports({ environments, clusterMetrics, errorDistributions }: ReportsProps) {
  const [selectedFormat, setSelectedFormat] = useState<'html' | 'pdf'>('html');
  const [showPreview, setShowPreview] = useState(false);

  const generateReport = (format: 'html' | 'pdf') => {
    // Simulate report generation
    const reportData = {
      generated: new Date(),
      environments,
      clusterMetrics,
      errorDistributions
    };

    if (format === 'html') {
      setShowPreview(true);
    } else {
      // Simulate PDF download
      console.log('Generating PDF report...', reportData);
      // In real implementation, this would generate and download a PDF
    }
  };

  const ReportPreview = () => (
    <div className="bg-white rounded-xl shadow-sm border border-gray-200 p-8">
      <div className="text-center mb-8">
        <h1 className="text-3xl font-bold text-gray-900 mb-2">
          Daily Production Environment Report
        </h1>
        <p className="text-gray-600">
          Generated on: {format(new Date(), 'MMMM d, yyyy \'at\' HH:mm:ss')}
        </p>
      </div>

      <div className="grid grid-cols-1 md:grid-cols-4 gap-6 mb-8">
        <div className="text-center p-4 bg-blue-50 rounded-lg">
          <div className="text-2xl font-bold text-blue-700">
            {environments.filter(env => env.loginPage === 'Live').length}/{environments.length}
          </div>
          <div className="text-sm text-blue-600">Environments Live</div>
        </div>
        <div className="text-center p-4 bg-green-50 rounded-lg">
          <div className="text-2xl font-bold text-green-700">
            {environments.filter(env => env.message === 'Success').length}/{environments.length}
          </div>
          <div className="text-sm text-green-600">Successful Queries</div>
        </div>
        <div className="text-center p-4 bg-purple-50 rounded-lg">
          <div className="text-2xl font-bold text-purple-700">
            {clusterMetrics.reduce((sum, cluster) => sum + cluster.nodes, 0)}
          </div>
          <div className="text-sm text-purple-600">Total Nodes</div>
        </div>
        <div className="text-center p-4 bg-red-50 rounded-lg">
          <div className="text-2xl font-bold text-red-700">
            {Math.max(...errorDistributions.map(err => err.errorRate24h), 0).toFixed(1)}%
          </div>
          <div className="text-sm text-red-600">Highest Error Rate</div>
        </div>
      </div>

      <div className="space-y-8">
        <section>
          <h2 className="text-xl font-semibold text-gray-900 mb-4">Environment Health Overview</h2>
          <div className="overflow-x-auto">
            <table className="w-full border-collapse border border-gray-300">
              <thead>
                <tr className="bg-gray-50">
                  <th className="border border-gray-300 px-4 py-2 text-left">Environment</th>
                  <th className="border border-gray-300 px-4 py-2 text-left">Region</th>
                  <th className="border border-gray-300 px-4 py-2 text-left">Status</th>
                  <th className="border border-gray-300 px-4 py-2 text-left">Query Time</th>
                </tr>
              </thead>
              <tbody>
                {environments.map((env) => (
                  <tr key={env.id}>
                    <td className="border border-gray-300 px-4 py-2">{env.namespace}</td>
                    <td className="border border-gray-300 px-4 py-2">{env.region}</td>
                    <td className="border border-gray-300 px-4 py-2">
                      <span className={`px-2 py-1 text-xs rounded-full ${
                        env.loginPage === 'Live' ? 'bg-green-100 text-green-800' : 'bg-red-100 text-red-800'
                      }`}>
                        {env.loginPage}
                      </span>
                    </td>
                    <td className="border border-gray-300 px-4 py-2">{env.queryTimeS}s</td>
                  </tr>
                ))}
              </tbody>
            </table>
          </div>
        </section>

        <section>
          <h2 className="text-xl font-semibold text-gray-900 mb-4">Cluster Metrics</h2>
          <div className="overflow-x-auto">
            <table className="w-full border-collapse border border-gray-300">
              <thead>
                <tr className="bg-gray-50">
                  <th className="border border-gray-300 px-4 py-2 text-left">Cluster</th>
                  <th className="border border-gray-300 px-4 py-2 text-left">Region</th>
                  <th className="border border-gray-300 px-4 py-2 text-left">Nodes</th>
                  <th className="border border-gray-300 px-4 py-2 text-left">RAM Usage</th>
                  <th className="border border-gray-300 px-4 py-2 text-left">CPU Usage</th>
                </tr>
              </thead>
              <tbody>
                {clusterMetrics.map((cluster, index) => (
                  <tr key={index}>
                    <td className="border border-gray-300 px-4 py-2">{cluster.cluster}</td>
                    <td className="border border-gray-300 px-4 py-2">{cluster.region}</td>
                    <td className="border border-gray-300 px-4 py-2">{cluster.nodes}</td>
                    <td className="border border-gray-300 px-4 py-2">{cluster.ramUsage.toFixed(1)}%</td>
                    <td className="border border-gray-300 px-4 py-2">{cluster.cpuUsage.toFixed(1)}%</td>
                  </tr>
                ))}
              </tbody>
            </table>
          </div>
        </section>

        <section>
          <h2 className="text-xl font-semibold text-gray-900 mb-4">Error Distribution</h2>
          <div className="overflow-x-auto">
            <table className="w-full border-collapse border border-gray-300">
              <thead>
                <tr className="bg-gray-50">
                  <th className="border border-gray-300 px-4 py-2 text-left">Namespace</th>
                  <th className="border border-gray-300 px-4 py-2 text-left">24h Rate</th>
                  <th className="border border-gray-300 px-4 py-2 text-left">48h Rate</th>
                  <th className="border border-gray-300 px-4 py-2 text-left">72h Rate</th>
                </tr>
              </thead>
              <tbody>
                {errorDistributions.map((error, index) => (
                  <tr key={index}>
                    <td className="border border-gray-300 px-4 py-2">{error.namespace}</td>
                    <td className="border border-gray-300 px-4 py-2">
                      <span className={`px-2 py-1 text-xs rounded-full ${
                        error.errorRate24h > 10 ? 'bg-red-100 text-red-800' : 'bg-green-100 text-green-800'
                      }`}>
                        {error.errorRate24h.toFixed(2)}%
                      </span>
                    </td>
                    <td className="border border-gray-300 px-4 py-2">
                      <span className={`px-2 py-1 text-xs rounded-full ${
                        error.errorRate48h > 5 ? 'bg-yellow-100 text-yellow-800' : 'bg-green-100 text-green-800'
                      }`}>
                        {error.errorRate48h.toFixed(2)}%
                      </span>
                    </td>
                    <td className="border border-gray-300 px-4 py-2">
                      <span className={`px-2 py-1 text-xs rounded-full ${
                        error.errorRate72h > 5 ? 'bg-yellow-100 text-yellow-800' : 'bg-green-100 text-green-800'
                      }`}>
                        {error.errorRate72h.toFixed(2)}%
                      </span>
                    </td>
                  </tr>
                ))}
              </tbody>
            </table>
          </div>
        </section>
      </div>
    </div>
  );

  return (
    <div className="space-y-6">
      <div className="bg-white rounded-xl shadow-sm border border-gray-200 p-6">
        <div className="flex items-center space-x-3 mb-6">
          <FileText className="w-6 h-6 text-blue-600" />
          <h2 className="text-xl font-semibold text-gray-900">Report Generation</h2>
        </div>

        <div className="grid grid-cols-1 lg:grid-cols-3 gap-6">
          <div className="lg:col-span-2 space-y-6">
            <div>
              <h3 className="text-lg font-medium text-gray-900 mb-4">Report Format</h3>
              <div className="flex space-x-4">
                <label className="flex items-center space-x-2 cursor-pointer">
                  <input
                    type="radio"
                    value="html"
                    checked={selectedFormat === 'html'}
                    onChange={(e) => setSelectedFormat(e.target.value as 'html' | 'pdf')}
                    className="text-blue-600 focus:ring-blue-500"
                  />
                  <span className="text-sm font-medium text-gray-700">HTML Report</span>
                </label>
                <label className="flex items-center space-x-2 cursor-pointer">
                  <input
                    type="radio"
                    value="pdf"
                    checked={selectedFormat === 'pdf'}
                    onChange={(e) => setSelectedFormat(e.target.value as 'html' | 'pdf')}
                    className="text-blue-600 focus:ring-blue-500"
                  />
                  <span className="text-sm font-medium text-gray-700">PDF Report</span>
                </label>
              </div>
            </div>

            <div className="flex space-x-4">
              <button
                onClick={() => generateReport(selectedFormat)}
                className="flex items-center space-x-2 px-6 py-3 bg-blue-600 text-white rounded-lg hover:bg-blue-700 transition-colors"
              >
                {selectedFormat === 'html' ? <Eye className="w-4 h-4" /> : <Download className="w-4 h-4" />}
                <span>{selectedFormat === 'html' ? 'Preview Report' : 'Download PDF'}</span>
              </button>

              {showPreview && (
                <button
                  onClick={() => setShowPreview(false)}
                  className="px-6 py-3 border border-gray-300 text-gray-700 rounded-lg hover:bg-gray-50 transition-colors"
                >
                  Close Preview
                </button>
              )}
            </div>
          </div>

          <div className="bg-gray-50 rounded-lg p-4">
            <h4 className="font-medium text-gray-900 mb-3">Report Statistics</h4>
            <div className="space-y-2 text-sm">
              <div className="flex justify-between">
                <span className="text-gray-600">Environments:</span>
                <span className="font-medium">{environments.length}</span>
              </div>
              <div className="flex justify-between">
                <span className="text-gray-600">Clusters:</span>
                <span className="font-medium">{clusterMetrics.length}</span>
              </div>
              <div className="flex justify-between">
                <span className="text-gray-600">Error Records:</span>
                <span className="font-medium">{errorDistributions.length}</span>
              </div>
              <div className="flex justify-between">
                <span className="text-gray-600">Generated:</span>
                <span className="font-medium">{format(new Date(), 'HH:mm')}</span>
              </div>
            </div>
          </div>
        </div>
      </div>

      {showPreview && <ReportPreview />}
    </div>
  );
}

----------------------------------------

----------------------------------------
FILE: /mnt/c/Users/sansk/OneDrive/Documents/GitHub/SRE-Monitoring-Dashboard/src/components/Scheduler.tsx
----------------------------------------
import React, { useState } from 'react';
import { Calendar, Clock, Mail, MessageSquare, Play, Pause, Zap, FileText } from 'lucide-react';
import { AppConfig, AlertConfig, ScheduleConfig } from '../types';
import { useLocalStorage } from '../hooks/useLocalStorage';
import toast from 'react-hot-toast';

interface SchedulerProps {
  config: AppConfig;
  setConfig: (config: AppConfig) => void;
  alertConfig: AlertConfig;
  setAlertConfig: (config: AlertConfig) => void;
}

export function Scheduler({ config, setConfig, alertConfig, setAlertConfig }: SchedulerProps) {
  const [scheduleConfig, setScheduleConfig] = useLocalStorage('scheduleConfig', {
    monitoringInterval: 5,
    reportGeneration: {
      enabled: true,
      time: '08:00',
      timezone: 'Asia/Jerusalem'
    },
    emailNotifications: {
      enabled: true,
      dailyReport: true,
      alerts: true
    },
    slackNotifications: {
      enabled: true,
      dailyReport: true,
      alerts: true
    }
  });

  const [isScheduleActive, setIsScheduleActive] = useLocalStorage('scheduleActive', false);
  const [executionMode, setExecutionMode] = useState<'frequent' | 'daily'>('frequent');

  const updateScheduleConfig = (section: string, field: string, value: any) => {
    setScheduleConfig(prev => ({
      ...prev,
      [section]: typeof prev[section] === 'object' ? {
        ...prev[section],
        [field]: value
      } : value
    }));
  };

  const toggleSchedule = () => {
    setIsScheduleActive(!isScheduleActive);
    toast.success(isScheduleActive ? 'Schedule disabled' : 'Schedule enabled');
  };

  const runManualExecution = (mode: 'frequent' | 'daily') => {
    setExecutionMode(mode);
    toast.loading(`Running ${mode} mode execution...`);
    
    // Simulate execution
    setTimeout(() => {
      toast.dismiss();
      toast.success(`${mode} mode execution completed successfully`);
    }, 3000);
  };

  return (
    <div className="space-y-6">
      <div className="bg-white rounded-xl shadow-sm border border-gray-200 p-6">
        <div className="flex items-center justify-between mb-6">
          <div className="flex items-center space-x-3">
            <Calendar className="w-6 h-6 text-blue-600" />
            <h2 className="text-xl font-semibold text-gray-900">Automated Scheduling</h2>
          </div>
          
          <button
            onClick={toggleSchedule}
            className={`flex items-center space-x-2 px-4 py-2 rounded-lg transition-colors ${
              isScheduleActive 
                ? 'bg-red-600 text-white hover:bg-red-700' 
                : 'bg-green-600 text-white hover:bg-green-700'
            }`}
          >
            {isScheduleActive ? <Pause className="w-4 h-4" /> : <Play className="w-4 h-4" />}
            <span>{isScheduleActive ? 'Disable Schedule' : 'Enable Schedule'}</span>
          </button>
        </div>

        {/* Execution Mode Controls */}
        <div className="bg-gray-50 rounded-lg p-4 mb-6">
          <h3 className="text-lg font-medium text-gray-900 mb-4">Manual Execution</h3>
          <div className="flex space-x-4">
            <button
              onClick={() => runManualExecution('frequent')}
              className="flex items-center space-x-2 px-4 py-2 bg-purple-600 text-white rounded-lg hover:bg-purple-700 transition-colors"
            >
              <Zap className="w-4 h-4" />
              <span>Run Frequent Mode</span>
            </button>
            
            <button
              onClick={() => runManualExecution('daily')}
              className="flex items-center space-x-2 px-4 py-2 bg-orange-600 text-white rounded-lg hover:bg-orange-700 transition-colors"
            >
              <FileText className="w-4 h-4" />
              <span>Run Daily Mode</span>
            </button>
          </div>
          <div className="mt-3 text-sm text-gray-600">
            <p><strong>Frequent Mode:</strong> Runs environment checks and stateful alerting</p>
            <p><strong>Daily Mode:</strong> Generates PDF reports and sends notifications</p>
          </div>
        </div>

        <div className="grid grid-cols-1 lg:grid-cols-2 gap-6">
          {/* Monitoring Schedule */}
          <div className="space-y-4">
            <h3 className="text-lg font-medium text-gray-900">Monitoring Schedule</h3>
            
            <div className="bg-gray-50 rounded-lg p-4">
              <div className="flex items-center space-x-2 mb-3">
                <Clock className="w-5 h-5 text-blue-500" />
                <span className="font-medium text-gray-900">Monitoring Interval</span>
              </div>
              
              <div className="space-y-3">
                <div>
                  <label className="block text-sm font-medium text-gray-700 mb-2">
                    Run monitoring every (minutes)
                  </label>
                  <select
                    value={scheduleConfig.monitoringInterval}
                    onChange={(e) => updateScheduleConfig('monitoringInterval', '', parseInt(e.target.value))}
                    className="w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-transparent"
                  >
                    <option value={1}>1 minute</option>
                    <option value={5}>5 minutes</option>
                    <option value={10}>10 minutes</option>
                    <option value={15}>15 minutes</option>
                    <option value={30}>30 minutes</option>
                    <option value={60}>1 hour</option>
                  </select>
                </div>
                
                <div className="text-sm text-gray-600">
                  Next run: {isScheduleActive ? `In ${scheduleConfig.monitoringInterval} minutes` : 'Schedule disabled'}
                </div>
              </div>
            </div>
          </div>

          {/* Report Generation */}
          <div className="space-y-4">
            <h3 className="text-lg font-medium text-gray-900">Report Generation</h3>
            
            <div className="bg-gray-50 rounded-lg p-4">
              <div className="space-y-3">
                <label className="flex items-center space-x-2">
                  <input
                    type="checkbox"
                    checked={scheduleConfig.reportGeneration.enabled}
                    onChange={(e) => updateScheduleConfig('reportGeneration', 'enabled', e.target.checked)}
                    className="text-blue-600 focus:ring-blue-500"
                  />
                  <span className="text-sm font-medium text-gray-700">Enable daily reports</span>
                </label>
                
                {scheduleConfig.reportGeneration.enabled && (
                  <>
                    <div>
                      <label className="block text-sm font-medium text-gray-700 mb-2">
                        Daily report time
                      </label>
                      <input
                        type="time"
                        value={scheduleConfig.reportGeneration.time}
                        onChange={(e) => updateScheduleConfig('reportGeneration', 'time', e.target.value)}
                        className="w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-transparent"
                      />
                    </div>
                    
                    <div>
                      <label className="block text-sm font-medium text-gray-700 mb-2">
                        Timezone
                      </label>
                      <select
                        value={scheduleConfig.reportGeneration.timezone}
                        onChange={(e) => updateScheduleConfig('reportGeneration', 'timezone', e.target.value)}
                        className="w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-transparent"
                      >
                        <option value="Asia/Jerusalem">Asia/Jerusalem</option>
                        <option value="UTC">UTC</option>
                        <option value="America/New_York">America/New_York</option>
                        <option value="Europe/London">Europe/London</option>
                      </select>
                    </div>
                  </>
                )}
              </div>
            </div>
          </div>
        </div>

        {/* Notification Settings */}
        <div className="mt-8">
          <h3 className="text-lg font-medium text-gray-900 mb-4">Notification Settings</h3>
          
          <div className="grid grid-cols-1 lg:grid-cols-2 gap-6">
            {/* Email Notifications */}
            <div className="bg-gray-50 rounded-lg p-4">
              <div className="flex items-center space-x-2 mb-3">
                <Mail className="w-5 h-5 text-green-500" />
                <span className="font-medium text-gray-900">Email Notifications</span>
              </div>
              
              <div className="space-y-3">
                <label className="flex items-center space-x-2">
                  <input
                    type="checkbox"
                    checked={scheduleConfig.emailNotifications.enabled}
                    onChange={(e) => updateScheduleConfig('emailNotifications', 'enabled', e.target.checked)}
                    className="text-blue-600 focus:ring-blue-500"
                  />
                  <span className="text-sm font-medium text-gray-700">Enable email notifications</span>
                </label>
                
                {scheduleConfig.emailNotifications.enabled && (
                  <>
                    <label className="flex items-center space-x-2">
                      <input
                        type="checkbox"
                        checked={scheduleConfig.emailNotifications.dailyReport}
                        onChange={(e) => updateScheduleConfig('emailNotifications', 'dailyReport', e.target.checked)}
                        className="text-blue-600 focus:ring-blue-500"
                      />
                      <span className="text-sm text-gray-700">Daily reports</span>
                    </label>
                    
                    <label className="flex items-center space-x-2">
                      <input
                        type="checkbox"
                        checked={scheduleConfig.emailNotifications.alerts}
                        onChange={(e) => updateScheduleConfig('emailNotifications', 'alerts', e.target.checked)}
                        className="text-blue-600 focus:ring-blue-500"
                      />
                      <span className="text-sm text-gray-700">Alert notifications</span>
                    </label>
                  </>
                )}
              </div>
            </div>

            {/* Slack Notifications */}
            <div className="bg-gray-50 rounded-lg p-4">
              <div className="flex items-center space-x-2 mb-3">
                <MessageSquare className="w-5 h-5 text-purple-500" />
                <span className="font-medium text-gray-900">Slack Notifications</span>
              </div>
              
              <div className="space-y-3">
                <label className="flex items-center space-x-2">
                  <input
                    type="checkbox"
                    checked={scheduleConfig.slackNotifications.enabled}
                    onChange={(e) => updateScheduleConfig('slackNotifications', 'enabled', e.target.checked)}
                    className="text-blue-600 focus:ring-blue-500"
                  />
                  <span className="text-sm font-medium text-gray-700">Enable Slack notifications</span>
                </label>
                
                {scheduleConfig.slackNotifications.enabled && (
                  <>
                    <label className="flex items-center space-x-2">
                      <input
                        type="checkbox"
                        checked={scheduleConfig.slackNotifications.dailyReport}
                        onChange={(e) => updateScheduleConfig('slackNotifications', 'dailyReport', e.target.checked)}
                        className="text-blue-600 focus:ring-blue-500"
                      />
                      <span className="text-sm text-gray-700">Daily reports</span>
                    </label>
                    
                    <label className="flex items-center space-x-2">
                      <input
                        type="checkbox"
                        checked={scheduleConfig.slackNotifications.alerts}
                        onChange={(e) => updateScheduleConfig('slackNotifications', 'alerts', e.target.checked)}
                        className="text-blue-600 focus:ring-blue-500"
                      />
                      <span className="text-sm text-gray-700">Alert notifications</span>
                    </label>
                  </>
                )}
              </div>
            </div>
          </div>
        </div>

        {/* Schedule Status */}
        <div className="mt-6 p-4 rounded-lg bg-blue-50 border border-blue-200">
          <div className="flex items-center space-x-2">
            <div className={`w-3 h-3 rounded-full ${isScheduleActive ? 'bg-green-500' : 'bg-gray-400'}`} />
            <span className="font-medium text-gray-900">
              Schedule Status: {isScheduleActive ? 'Active' : 'Inactive'}
            </span>
          </div>
          <p className="text-sm text-gray-600 mt-1">
            {isScheduleActive 
              ? `Monitoring runs every ${scheduleConfig.monitoringInterval} minute(s). Daily reports ${scheduleConfig.reportGeneration.enabled ? `at ${scheduleConfig.reportGeneration.time}` : 'disabled'}.`
              : 'All scheduled tasks are disabled. Enable the schedule to start automated monitoring and reporting.'
            }
          </p>
        </div>
      </div>
    </div>
  );
}

----------------------------------------

----------------------------------------
FILE: /mnt/c/Users/sansk/OneDrive/Documents/GitHub/SRE-Monitoring-Dashboard/src/components/Settings.tsx
----------------------------------------
import React, { useState } from 'react';
import { Settings as SettingsIcon, Save, Key, Globe, RefreshCw, User, Eye, EyeOff } from 'lucide-react';
import { AppConfig } from '../types';
import toast from 'react-hot-toast';

interface SettingsProps {
  config: AppConfig;
  setConfig: (config: AppConfig) => void;
}

export function Settings({ config, setConfig }: SettingsProps) {
  const [formData, setFormData] = useState(config);
  const [activeSection, setActiveSection] = useState('api');
  const [isSaving, setIsSaving] = useState(false);
  const [showPasswords, setShowPasswords] = useState<Record<string, boolean>>({});

  const updateFormData = (section: keyof AppConfig, field: string, value: any) => {
    setFormData(prev => ({
      ...prev,
      [section]: field === '' ? value : {
        ...prev[section],
        [field]: value
      }
    }));
  };

  const handleSave = async () => {
    setIsSaving(true);
    await new Promise(resolve => setTimeout(resolve, 1000));
    setConfig(formData);
    setIsSaving(false);
    toast.success('Settings saved successfully');
  };

  const resetToDefaults = () => {
    if (confirm('Are you sure you want to reset all settings to defaults? This action cannot be undone.')) {
      const defaultConfig: AppConfig = {
        apiKeys: {
          logging: '',
          data: ''
        },
        endpoints: {
          groundcoverLogging: 'https://grgrer.platform.grcv.io/json/logs',
          victoriaMetrics: 'https://ds.groundcover.com/datasources/prometheus/api/v1/query_range',
          clickhouse: 'https://ds.groundcover.com/'
        },
        environmentUrls: [],
        errorDistUrls: [],
        credentials: {
          email: '',
          password: ''
        },
        applicationIds: {
          default: 'ac115209-2353-4271-84f7-e2aa67090286',
          environmentSpecific: {}
        }
      };
      setFormData(defaultConfig);
      toast.success('Settings reset to defaults');
    }
  };

  const togglePasswordVisibility = (field: string) => {
    setShowPasswords(prev => ({
      ...prev,
      [field]: !prev[field]
    }));
  };

  const sections = [
    { id: 'api', label: 'API Configuration', icon: Globe },
    { id: 'credentials', label: 'Credentials', icon: User },
    { id: 'environments', label: 'Environments', icon: RefreshCw },
    { id: 'applications', label: 'Application IDs', icon: Key }
  ];

  return (
    <div className="space-y-6">
      <div className="bg-white rounded-xl shadow-sm border border-gray-200">
        <div className="flex items-center justify-between p-6 border-b border-gray-200">
          <div className="flex items-center space-x-3">
            <SettingsIcon className="w-6 h-6 text-blue-600" />
            <h2 className="text-xl font-semibold text-gray-900">Application Settings</h2>
          </div>
          
          <div className="flex space-x-3">
            <button
              onClick={resetToDefaults}
              className="px-4 py-2 border border-gray-300 text-gray-700 rounded-lg hover:bg-gray-50 transition-colors"
            >
              Reset to Defaults
            </button>
            <button
              onClick={handleSave}
              disabled={isSaving}
              className="flex items-center space-x-2 px-4 py-2 bg-blue-600 text-white rounded-lg hover:bg-blue-700 disabled:opacity-50 transition-colors"
            >
              <Save className="w-4 h-4" />
              <span>{isSaving ? 'Saving...' : 'Save Changes'}</span>
            </button>
          </div>
        </div>

        <div className="flex">
          {/* Sidebar */}
          <div className="w-64 p-6 border-r border-gray-200">
            <nav className="space-y-2">
              {sections.map((section) => {
                const Icon = section.icon;
                return (
                  <button
                    key={section.id}
                    onClick={() => setActiveSection(section.id)}
                    className={`w-full flex items-center space-x-3 px-3 py-2 rounded-lg text-left transition-colors ${
                      activeSection === section.id
                        ? 'bg-blue-50 text-blue-700 border border-blue-200'
                        : 'text-gray-600 hover:bg-gray-50'
                    }`}
                  >
                    <Icon className="w-4 h-4" />
                    <span className="font-medium">{section.label}</span>
                  </button>
                );
              })}
            </nav>
          </div>

          {/* Content */}
          <div className="flex-1 p-6">
            {activeSection === 'api' && (
              <div className="space-y-6">
                <h3 className="text-lg font-medium text-gray-900">API Configuration</h3>
                
                <div className="bg-yellow-50 border border-yellow-200 rounded-lg p-4">
                  <h4 className="font-medium text-yellow-900 mb-2">Required Configuration</h4>
                  <p className="text-sm text-yellow-800">
                    Both API keys are required for the dashboard to function properly. The logging API key is used for sending logs to Groundcover, 
                    and the data API key is used for fetching metrics and error distributions.
                  </p>
                </div>

                <div className="space-y-4">
                  <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
                    <div>
                      <label className="block text-sm font-medium text-gray-700 mb-2">
                        Logging API Key *
                      </label>
                      <div className="relative">
                        <input
                          type={showPasswords.logging ? 'text' : 'password'}
                          value={formData.apiKeys.logging}
                          onChange={(e) => updateFormData('apiKeys', 'logging', e.target.value)}
                          className="w-full px-3 py-2 pr-10 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-transparent"
                          placeholder="Enter logging API key"
                        />
                        <button
                          type="button"
                          onClick={() => togglePasswordVisibility('logging')}
                          className="absolute inset-y-0 right-0 pr-3 flex items-center"
                        >
                          {showPasswords.logging ? (
                            <EyeOff className="w-4 h-4 text-gray-400" />
                          ) : (
                            <Eye className="w-4 h-4 text-gray-400" />
                          )}
                        </button>
                      </div>
                    </div>
                    <div>
                      <label className="block text-sm font-medium text-gray-700 mb-2">
                        Data API Key *
                      </label>
                      <div className="relative">
                        <input
                          type={showPasswords.data ? 'text' : 'password'}
                          value={formData.apiKeys.data}
                          onChange={(e) => updateFormData('apiKeys', 'data', e.target.value)}
                          className="w-full px-3 py-2 pr-10 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-transparent"
                          placeholder="Enter data API key"
                        />
                        <button
                          type="button"
                          onClick={() => togglePasswordVisibility('data')}
                          className="absolute inset-y-0 right-0 pr-3 flex items-center"
                        >
                          {showPasswords.data ? (
                            <EyeOff className="w-4 h-4 text-gray-400" />
                          ) : (
                            <Eye className="w-4 h-4 text-gray-400" />
                          )}
                        </button>
                      </div>
                    </div>
                  </div>
                  
                  <div className="space-y-4">
                    <h4 className="text-md font-medium text-gray-800">API Endpoints</h4>
                    <div className="grid grid-cols-1 gap-4">
                      <div>
                        <label className="block text-sm font-medium text-gray-700 mb-2">
                          Groundcover Logging URL
                        </label>
                        <input
                          type="url"
                          value={formData.endpoints.groundcoverLogging}
                          onChange={(e) => updateFormData('endpoints', 'groundcoverLogging', e.target.value)}
                          className="w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-transparent"
                          placeholder="https://..."
                        />
                      </div>
                      <div>
                        <label className="block text-sm font-medium text-gray-700 mb-2">
                          Victoria Metrics URL
                        </label>
                        <input
                          type="url"
                          value={formData.endpoints.victoriaMetrics}
                          onChange={(e) => updateFormData('endpoints', 'victoriaMetrics', e.target.value)}
                          className="w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-transparent"
                          placeholder="https://..."
                        />
                      </div>
                      <div>
                        <label className="block text-sm font-medium text-gray-700 mb-2">
                          ClickHouse URL
                        </label>
                        <input
                          type="url"
                          value={formData.endpoints.clickhouse}
                          onChange={(e) => updateFormData('endpoints', 'clickhouse', e.target.value)}
                          className="w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-transparent"
                          placeholder="https://..."
                        />
                      </div>
                    </div>
                  </div>
                </div>
              </div>
            )}

            {activeSection === 'credentials' && (
              <div className="space-y-6">
                <h3 className="text-lg font-medium text-gray-900">Authentication Credentials</h3>
                
                <div className="bg-blue-50 border border-blue-200 rounded-lg p-4">
                  <h4 className="font-medium text-blue-900 mb-2">Environment Login Credentials</h4>
                  <p className="text-sm text-blue-800">
                    These credentials are used to authenticate with the production environments during testing. 
                    They should have access to all environments you want to monitor.
                  </p>
                </div>

                <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
                  <div>
                    <label className="block text-sm font-medium text-gray-700 mb-2">
                      Email *
                    </label>
                    <input
                      type="email"
                      value={formData.credentials.email}
                      onChange={(e) => updateFormData('credentials', 'email', e.target.value)}
                      className="w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-transparent"
                      placeholder="user@company.com"
                    />
                  </div>
                  <div>
                    <label className="block text-sm font-medium text-gray-700 mb-2">
                      Password *
                    </label>
                    <div className="relative">
                      <input
                        type={showPasswords.password ? 'text' : 'password'}
                        value={formData.credentials.password}
                        onChange={(e) => updateFormData('credentials', 'password', e.target.value)}
                        className="w-full px-3 py-2 pr-10 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-transparent"
                        placeholder="••••••••••••••••"
                      />
                      <button
                        type="button"
                        onClick={() => togglePasswordVisibility('password')}
                        className="absolute inset-y-0 right-0 pr-3 flex items-center"
                      >
                        {showPasswords.password ? (
                          <EyeOff className="w-4 h-4 text-gray-400" />
                        ) : (
                          <Eye className="w-4 h-4 text-gray-400" />
                        )}
                      </button>
                    </div>
                  </div>
                </div>
              </div>
            )}

            {activeSection === 'environments' && (
              <div className="space-y-6">
                <h3 className="text-lg font-medium text-gray-900">Environment Configuration</h3>
                
                <div className="bg-green-50 border border-green-200 rounded-lg p-4">
                  <h4 className="font-medium text-green-900 mb-2">Environment URLs</h4>
                  <p className="text-sm text-green-800">
                    Configure the environment URLs that will be monitored. You can also manage these in the Environment Testing section.
                  </p>
                </div>

                <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
                  <div>
                    <label className="block text-sm font-medium text-gray-700 mb-2">
                      Environment URLs (one per line)
                    </label>
                    <textarea
                      value={formData.environmentUrls.join('\n')}
                      onChange={(e) => updateFormData('environmentUrls', '', e.target.value.split('\n').filter(url => url.trim()))}
                      className="w-full h-48 px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-transparent"
                      placeholder="https://tenant-demo.erag-c1.gigaspaces.net"
                    />
                  </div>
                  <div>
                    <label className="block text-sm font-medium text-gray-700 mb-2">
                      Error Distribution URLs (one per line)
                    </label>
                    <textarea
                      value={formData.errorDistUrls.join('\n')}
                      onChange={(e) => updateFormData('errorDistUrls', '', e.target.value.split('\n').filter(url => url.trim()))}
                      className="w-full h-48 px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-transparent"
                      placeholder="https://tenant-tempo2.ws-use1.gigaspaces.net"
                    />
                  </div>
                </div>
              </div>
            )}

            {activeSection === 'applications' && (
              <div className="space-y-6">
                <h3 className="text-lg font-medium text-gray-900">Application ID Configuration</h3>
                
                <div className="bg-purple-50 border border-purple-200 rounded-lg p-4">
                  <h4 className="font-medium text-purple-900 mb-2">Application IDs</h4>
                  <p className="text-sm text-purple-800">
                    Configure application IDs used for authentication with different environments. 
                    Each environment may require a specific application ID for proper access.
                  </p>
                </div>
                
                <div className="space-y-4">
                  <div>
                    <label className="block text-sm font-medium text-gray-700 mb-2">
                      Default Application ID
                    </label>
                    <input
                      type="text"
                      value={formData.applicationIds.default}
                      onChange={(e) => updateFormData('applicationIds', 'default', e.target.value)}
                      className="w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-transparent"
                      placeholder="ac115209-2353-4271-84f7-e2aa67090286"
                    />
                    <p className="text-sm text-gray-500 mt-1">
                      Default application ID used for all environments unless overridden
                    </p>
                  </div>

                  <div>
                    <label className="block text-sm font-medium text-gray-700 mb-2">
                      Environment-Specific Application IDs
                    </label>
                    <div className="space-y-2">
                      {Object.entries(formData.applicationIds.environmentSpecific).map(([url, appId], index) => (
                        <div key={index} className="flex space-x-2">
                          <input
                            type="text"
                            value={url}
                            onChange={(e) => {
                              const newEnvSpecific = { ...formData.applicationIds.environmentSpecific };
                              delete newEnvSpecific[url];
                              newEnvSpecific[e.target.value] = appId;
                              updateFormData('applicationIds', 'environmentSpecific', newEnvSpecific);
                            }}
                            className="flex-1 px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-transparent"
                            placeholder="Environment URL"
                          />
                          <input
                            type="text"
                            value={appId}
                            onChange={(e) => {
                              const newEnvSpecific = { ...formData.applicationIds.environmentSpecific };
                              newEnvSpecific[url] = e.target.value;
                              updateFormData('applicationIds', 'environmentSpecific', newEnvSpecific);
                            }}
                            className="flex-1 px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-transparent"
                            placeholder="Application ID"
                          />
                          <button
                            onClick={() => {
                              const newEnvSpecific = { ...formData.applicationIds.environmentSpecific };
                              delete newEnvSpecific[url];
                              updateFormData('applicationIds', 'environmentSpecific', newEnvSpecific);
                            }}
                            className="px-3 py-2 bg-red-600 text-white rounded-lg hover:bg-red-700 transition-colors"
                          >
                            Remove
                          </button>
                        </div>
                      ))}
                      <button
                        onClick={() => {
                          const newEnvSpecific = { ...formData.applicationIds.environmentSpecific };
                          newEnvSpecific[''] = '';
                          updateFormData('applicationIds', 'environmentSpecific', newEnvSpecific);
                        }}
                        className="px-4 py-2 bg-green-600 text-white rounded-lg hover:bg-green-700 transition-colors"
                      >
                        Add Environment-Specific ID
                      </button>
                    </div>
                    <p className="text-sm text-gray-500 mt-1">
                      Override the default application ID for specific environments
                    </p>
                  </div>
                </div>
              </div>
            )}
          </div>
        </div>
      </div>
    </div>
  );
}

----------------------------------------

----------------------------------------
FILE: /mnt/c/Users/sansk/OneDrive/Documents/GitHub/SRE-Monitoring-Dashboard/src/components/Setup.tsx
----------------------------------------
import React, { useState } from 'react';
import { Shield, CheckCircle } from 'lucide-react';
import { AppConfig } from '../types';

interface SetupProps {
  onComplete: () => void;
  config: AppConfig;
  setConfig: (config: AppConfig) => void;
}

export function Setup({ onComplete, config, setConfig }: SetupProps) {
  const [step, setStep] = useState(1);
  const [formData, setFormData] = useState(config);

  const updateFormData = (section: keyof AppConfig, field: string, value: any) => {
    setFormData(prev => ({
      ...prev,
      [section]: field === '' ? value : {
        ...prev[section],
        [field]: value
      }
    }));
  };

  const handleComplete = () => {
    setConfig(formData);
    onComplete();
  };

  const steps = [
    { id: 1, title: 'API Keys', description: 'Set up monitoring API keys' },
    { id: 2, title: 'Notifications', description: 'Configure email and Slack' },
    { id: 3, title: 'Environments', description: 'Add monitoring URLs' }
  ];

  return (
    <div className="min-h-screen flex items-center justify-center p-6">
      <div className="max-w-4xl w-full">
        <div className="text-center mb-8">
          <div className="w-16 h-16 bg-gradient-to-br from-blue-600 to-purple-600 rounded-full flex items-center justify-center mx-auto mb-4">
            <Shield className="w-8 h-8 text-white" />
          </div>
          <h1 className="text-3xl font-bold text-gray-900 mb-2">Production Monitor Setup</h1>
          <p className="text-gray-600">Configure your monitoring dashboard to get started</p>
        </div>

        <div className="bg-white rounded-xl shadow-lg border border-gray-200 p-8">
          {/* Progress Steps */}
          <div className="flex items-center justify-between mb-8">
            {steps.map((stepItem, index) => (
              <div key={stepItem.id} className="flex items-center">
                <div className={`w-8 h-8 rounded-full flex items-center justify-center ${
                  step > stepItem.id ? 'bg-green-500 text-white' :
                  step === stepItem.id ? 'bg-blue-500 text-white' :
                  'bg-gray-200 text-gray-600'
                }`}>
                  {step > stepItem.id ? <CheckCircle className="w-5 h-5" /> : stepItem.id}
                </div>
                {index < steps.length - 1 && (
                  <div className={`w-16 h-1 mx-4 ${
                    step > stepItem.id ? 'bg-green-500' : 'bg-gray-200'
                  }`} />
                )}
              </div>
            ))}
          </div>

          {/* Step Content */}
          {step === 1 && (
            <div className="space-y-6">
              <h2 className="text-xl font-semibold text-gray-900">API Configuration</h2>
              <div className="space-y-4">
                <div>
                  <label className="block text-sm font-medium text-gray-700 mb-2">
                    Logging API Key
                  </label>
                  <input
                    type="text"
                    value={formData.apiKeys.logging}
                    onChange={(e) => updateFormData('apiKeys', 'logging', e.target.value)}
                    className="w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-transparent"
                    placeholder="Enter logging API key"
                  />
                </div>
                <div>
                  <label className="block text-sm font-medium text-gray-700 mb-2">
                    Data API Key
                  </label>
                  <input
                    type="text"
                    value={formData.apiKeys.data}
                    onChange={(e) => updateFormData('apiKeys', 'data', e.target.value)}
                    className="w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-transparent"
                    placeholder="Enter data API key"
                  />
                </div>
                <div className="grid grid-cols-1 md:grid-cols-3 gap-4">
                  <div>
                    <label className="block text-sm font-medium text-gray-700 mb-2">
                      Groundcover Logging URL
                    </label>
                    <input
                      type="url"
                      value={formData.endpoints.groundcoverLogging}
                      onChange={(e) => updateFormData('endpoints', 'groundcoverLogging', e.target.value)}
                      className="w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-transparent"
                      placeholder="https://..."
                    />
                  </div>
                  <div>
                    <label className="block text-sm font-medium text-gray-700 mb-2">
                      Victoria Metrics URL
                    </label>
                    <input
                      type="url"
                      value={formData.endpoints.victoriaMetrics}
                      onChange={(e) => updateFormData('endpoints', 'victoriaMetrics', e.target.value)}
                      className="w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-transparent"
                      placeholder="https://..."
                    />
                  </div>
                  <div>
                    <label className="block text-sm font-medium text-gray-700 mb-2">
                      ClickHouse URL
                    </label>
                    <input
                      type="url"
                      value={formData.endpoints.clickhouse}
                      onChange={(e) => updateFormData('endpoints', 'clickhouse', e.target.value)}
                      className="w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-transparent"
                      placeholder="https://..."
                    />
                  </div>
                </div>
              </div>
            </div>
          )}

          {step === 2 && (
            <div className="space-y-6">
              <h2 className="text-xl font-semibold text-gray-900">Notification Settings</h2>
              <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
                <div className="space-y-4">
                  <h3 className="text-lg font-medium text-gray-800">Email Configuration</h3>
                  <div>
                    <label className="block text-sm font-medium text-gray-700 mb-2">
                      Sender Email
                    </label>
                    <input
                      type="email"
                      value={formData.emailSettings.senderEmail}
                      onChange={(e) => updateFormData('emailSettings', 'senderEmail', e.target.value)}
                      className="w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-transparent"
                      placeholder="notifications@company.com"
                    />
                  </div>
                  <div>
                    <label className="block text-sm font-medium text-gray-700 mb-2">
                      App Password
                    </label>
                    <input
                      type="password"
                      value={formData.emailSettings.appPassword}
                      onChange={(e) => updateFormData('emailSettings', 'appPassword', e.target.value)}
                      className="w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-transparent"
                      placeholder="••••••••••••••••"
                    />
                  </div>
                  <div>
                    <label className="block text-sm font-medium text-gray-700 mb-2">
                      Recipients (comma-separated)
                    </label>
                    <textarea
                      value={formData.emailSettings.recipients.join(', ')}
                      onChange={(e) => updateFormData('emailSettings', 'recipients', e.target.value.split(',').map(s => s.trim()))}
                      className="w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-transparent"
                      rows={3}
                      placeholder="user1@company.com, user2@company.com"
                    />
                  </div>
                </div>
                <div className="space-y-4">
                  <h3 className="text-lg font-medium text-gray-800">Slack Configuration</h3>
                  <div>
                    <label className="block text-sm font-medium text-gray-700 mb-2">
                      Bot Token
                    </label>
                    <input
                      type="text"
                      value={formData.slackSettings.botToken}
                      onChange={(e) => updateFormData('slackSettings', 'botToken', e.target.value)}
                      className="w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-transparent"
                      placeholder="xoxb-..."
                    />
                  </div>
                  <div>
                    <label className="block text-sm font-medium text-gray-700 mb-2">
                      Channel ID
                    </label>
                    <input
                      type="text"
                      value={formData.slackSettings.channelId}
                      onChange={(e) => updateFormData('slackSettings', 'channelId', e.target.value)}
                      className="w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-transparent"
                      placeholder="C08UUK12G74"
                    />
                  </div>
                </div>
              </div>
            </div>
          )}

          {step === 3 && (
            <div className="space-y-6">
              <h2 className="text-xl font-semibold text-gray-900">Environment Configuration</h2>
              <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
                <div>
                  <label className="block text-sm font-medium text-gray-700 mb-2">
                    Environment URLs (one per line)
                  </label>
                  <textarea
                    value={formData.environmentUrls.join('\n')}
                    onChange={(e) => updateFormData('environmentUrls', '', e.target.value.split('\n').filter(url => url.trim()))}
                    className="w-full h-32 px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-transparent"
                    placeholder="https://tenant-demo.erag-c1.gigaspaces.net"
                  />
                </div>
                <div>
                  <label className="block text-sm font-medium text-gray-700 mb-2">
                    Error Distribution URLs (one per line)
                  </label>
                  <textarea
                    value={formData.errorDistUrls.join('\n')}
                    onChange={(e) => updateFormData('errorDistUrls', '', e.target.value.split('\n').filter(url => url.trim()))}
                    className="w-full h-32 px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-transparent"
                    placeholder="https://tenant-tempo2.ws-use1.gigaspaces.net"
                  />
                </div>
              </div>
            </div>
          )}

          {/* Navigation */}
          <div className="flex justify-between mt-8 pt-6 border-t border-gray-200">
            <button
              onClick={() => setStep(step - 1)}
              disabled={step === 1}
              className="px-6 py-2 border border-gray-300 text-gray-700 rounded-lg hover:bg-gray-50 disabled:opacity-50 disabled:cursor-not-allowed transition-colors"
            >
              Previous
            </button>
            
            {step < 3 ? (
              <button
                onClick={() => setStep(step + 1)}
                className="px-6 py-2 bg-blue-600 text-white rounded-lg hover:bg-blue-700 transition-colors"
              >
                Next
              </button>
            ) : (
              <button
                onClick={handleComplete}
                className="px-6 py-2 bg-green-600 text-white rounded-lg hover:bg-green-700 transition-colors"
              >
                Complete Setup
              </button>
            )}
          </div>
        </div>
      </div>
    </div>
  );
}

----------------------------------------

----------------------------------------
FILE: /mnt/c/Users/sansk/OneDrive/Documents/GitHub/SRE-Monitoring-Dashboard/src/components/Sidebar.tsx
----------------------------------------
import React from 'react';
import { 
  BarChart3, 
  FileText, 
  Calendar, 
  Settings, 
  Activity,
  Shield,
  Bell,
  FolderOpen,
  TestTube
} from 'lucide-react';
import { useNavigate, useLocation } from 'react-router-dom';

interface SidebarProps {
  activeTab: string;
  setActiveTab: (tab: string) => void;
}

export function Sidebar({ activeTab, setActiveTab }: SidebarProps) {
  const navigate = useNavigate();
  const location = useLocation();

  const menuItems = [
    { id: 'dashboard', label: 'Dashboard', icon: BarChart3, path: '/dashboard' },
    { id: 'testing', label: 'Environment Testing', icon: TestTube, path: '/testing' },
    { id: 'reports', label: 'Reports', icon: FileText, path: '/reports' },
    { id: 'scheduler', label: 'Scheduler', icon: Calendar, path: '/scheduler' },
    { id: 'alerting', label: 'Alerting', icon: Bell, path: '/alerting' },
    { id: 'files', label: 'File Manager', icon: FolderOpen, path: '/files' },
    { id: 'settings', label: 'Settings', icon: Settings, path: '/settings' },
  ];

  const handleNavigation = (item: typeof menuItems[0]) => {
    setActiveTab(item.id);
    navigate(item.path);
  };

  const isActive = (path: string) => location.pathname === path;

  return (
    <div className="fixed left-0 top-0 h-full w-64 bg-white shadow-lg border-r border-gray-200 z-40">
      <div className="p-6 border-b border-gray-200">
        <div className="flex items-center space-x-3">
          <div className="w-10 h-10 bg-gradient-to-br from-blue-600 to-purple-600 rounded-lg flex items-center justify-center">
            <Shield className="w-6 h-6 text-white" />
          </div>
          <div>
            <h1 className="text-lg font-bold text-gray-900">SRE Monitor</h1>
            <p className="text-sm text-gray-500">Advanced Dashboard</p>
          </div>
        </div>
      </div>

      <nav className="p-4">
        <ul className="space-y-2">
          {menuItems.map((item) => {
            const Icon = item.icon;
            const active = isActive(item.path);
            
            return (
              <li key={item.id}>
                <button
                  onClick={() => handleNavigation(item)}
                  className={`w-full flex items-center space-x-3 px-4 py-3 rounded-lg text-left transition-all duration-200 ${
                    active
                      ? 'bg-blue-50 text-blue-700 border border-blue-200 shadow-sm'
                      : 'text-gray-600 hover:bg-gray-50 hover:text-gray-900'
                  }`}
                >
                  <Icon className="w-5 h-5" />
                  <span className="font-medium">{item.label}</span>
                </button>
              </li>
            );
          })}
        </ul>
      </nav>

      <div className="absolute bottom-0 left-0 right-0 p-4 border-t border-gray-200">
        <div className="flex items-center space-x-3 p-3 bg-gray-50 rounded-lg">
          <Activity className="w-5 h-5 text-green-500" />
          <div>
            <p className="text-sm font-medium text-gray-900">System Status</p>
            <p className="text-xs text-green-600">All systems operational</p>
          </div>
        </div>
      </div>
    </div>
  );
}

----------------------------------------

============================================================
DIRECTORY: /mnt/c/Users/sansk/OneDrive/Documents/GitHub/SRE-Monitoring-Dashboard/src/hooks
============================================================


----------------------------------------
FILE: /mnt/c/Users/sansk/OneDrive/Documents/GitHub/SRE-Monitoring-Dashboard/src/hooks/useLocalStorage.ts
----------------------------------------
import { useState, useEffect } from 'react';

export function useLocalStorage<T>(key: string, initialValue: T): [T, (value: T) => void] {
  const [storedValue, setStoredValue] = useState<T>(() => {
    try {
      const item = window.localStorage.getItem(key);
      return item ? JSON.parse(item) : initialValue;
    } catch (error) {
      console.error(`Error reading localStorage key "${key}":`, error);
      return initialValue;
    }
  });

  const setValue = (value: T) => {
    try {
      setStoredValue(value);
      window.localStorage.setItem(key, JSON.stringify(value));
    } catch (error) {
      console.error(`Error setting localStorage key "${key}":`, error);
    }
  };

  return [storedValue, setValue];
}

----------------------------------------

============================================================
DIRECTORY: /mnt/c/Users/sansk/OneDrive/Documents/GitHub/SRE-Monitoring-Dashboard/src/services
============================================================


----------------------------------------
FILE: /mnt/c/Users/sansk/OneDrive/Documents/GitHub/SRE-Monitoring-Dashboard/src/services/alertingService.ts
----------------------------------------
import { SlackService } from './slackService';
import { EmailService } from './emailService';
import { GroundcoverService } from './groundcoverService';
import { AlertConfig, AlertState, EnvironmentResult } from '../types';

export class AlertingService {
  private slackService?: SlackService;
  private emailService?: EmailService;
  private groundcoverService?: GroundcoverService;
  private alertConfig: AlertConfig;

  constructor(alertConfig: AlertConfig, groundcoverApiKey?: string, groundcoverEndpoint?: string) {
    this.alertConfig = alertConfig;

    if (alertConfig.channels.slack.enabled && alertConfig.channels.slack.botToken) {
      this.slackService = new SlackService(alertConfig.channels.slack.botToken);
    }

    if (alertConfig.channels.email.enabled && alertConfig.channels.email.senderEmail && alertConfig.channels.email.appPassword) {
      this.emailService = new EmailService(
        alertConfig.channels.email.senderEmail,
        alertConfig.channels.email.appPassword
      );
    }

    if (groundcoverApiKey && groundcoverEndpoint) {
      this.groundcoverService = new GroundcoverService(groundcoverApiKey, groundcoverEndpoint);
    }
  }

  async processEnvironmentResults(
    environments: EnvironmentResult[],
    currentAlertState: AlertState
  ): Promise<AlertState> {
    const newAlertState = { ...currentAlertState };

    for (const env of environments) {
      const testKey = `${env.namespace}-${env.cluster}`;
      const isExcluded = this.alertConfig.testExclusions.environments.includes(env.url);
      
      if (isExcluded) {
        continue;
      }

      const isFailing = env.loginPage !== 'Live' || 
                       env.authorization !== 'Success' || 
                       env.message !== 'Success' ||
                       env.queryTimeS > this.alertConfig.thresholds.queryResponseTime;

      const currentState = newAlertState[testKey];
      const now = new Date().toISOString();

      // Log environment check to Groundcover
      if (this.groundcoverService) {
        await this.groundcoverService.logEnvironmentCheck(
          env.namespace,
          env.cluster,
          isFailing ? 'failure' : 'success',
          env
        );
      }

      if (isFailing) {
        if (!currentState || currentState.status === 'SUCCESS') {
          // New failure - send immediate alert
          const reason = this.getFailureReason(env);
          
          newAlertState[testKey] = {
            status: 'FAIL',
            firstFailureTimestamp: now,
            lastReminderTimestamp: now,
            namespace: env.namespace,
            cluster: env.cluster,
            reason,
          };

          await this.sendAlert(env.namespace, env.cluster, reason, 'new');
        } else {
          // Existing failure - check if reminder needed
          const hoursSinceLastReminder = this.getHoursDifference(
            currentState.lastReminderTimestamp || currentState.firstFailureTimestamp || now,
            now
          );

          if (hoursSinceLastReminder >= this.alertConfig.thresholds.reminderInterval) {
            newAlertState[testKey] = {
              ...currentState,
              lastReminderTimestamp: now,
            };

            await this.sendAlert(env.namespace, env.cluster, currentState.reason || 'Unknown', 'reminder');
          }
        }
      } else {
        if (currentState && currentState.status === 'FAIL') {
          // Recovery - send resolution alert
          await this.sendAlert(env.namespace, env.cluster, 'Environment recovered', 'resolved');
          delete newAlertState[testKey];
        }
      }
    }

    return newAlertState;
  }

  private getFailureReason(env: EnvironmentResult): string {
    const reasons = [];
    
    if (env.loginPage !== 'Live') {
      reasons.push(`Login page: ${env.loginPage}`);
    }
    if (env.authorization !== 'Success') {
      reasons.push(`Authorization: ${env.authorization}`);
    }
    if (env.message !== 'Success') {
      reasons.push(`Message: ${env.message}`);
    }
    if (env.queryTimeS > this.alertConfig.thresholds.queryResponseTime) {
      reasons.push(`Query timeout: ${env.queryTimeS}s > ${this.alertConfig.thresholds.queryResponseTime}s`);
    }

    return reasons.join(', ') || 'Unknown failure';
  }

  private getHoursDifference(from: string, to: string): number {
    const fromDate = new Date(from);
    const toDate = new Date(to);
    return (toDate.getTime() - fromDate.getTime()) / (1000 * 60 * 60);
  }

  private async sendAlert(environment: string, cluster: string, reason: string, type: 'new' | 'reminder' | 'resolved'): Promise<void> {
    if (!this.alertConfig.enabled) {
      return;
    }

    // Log alert to Groundcover
    if (this.groundcoverService) {
      await this.groundcoverService.logAlert(environment, cluster, reason, type);
    }

    // Send Slack alert
    if (this.slackService && this.alertConfig.channels.slack.enabled) {
      try {
        if (type === 'resolved') {
          await this.slackService.sendMessage({
            channel: this.alertConfig.channels.slack.alertChannelId,
            text: `✅ Resolved: ${environment}`,
            blocks: [
              {
                type: 'section',
                text: {
                  type: 'mrkdwn',
                  text: `✅ *Environment Recovered*\n*Environment:* ${environment}\n*Cluster:* ${cluster}\n*Time:* ${new Date().toLocaleString()}`
                }
              }
            ]
          });
        } else {
          await this.slackService.sendAlert(
            this.alertConfig.channels.slack.alertChannelId,
            environment,
            cluster,
            `${type === 'reminder' ? '[REMINDER] ' : ''}${reason}`
          );
        }
      } catch (error) {
        console.error('Failed to send Slack alert:', error);
      }
    }

    // Send email alert
    if (this.emailService && this.alertConfig.channels.email.enabled) {
      try {
        if (type === 'resolved') {
          await this.emailService.sendEmail({
            to: this.alertConfig.channels.email.recipients,
            subject: `✅ Resolved: ${environment}`,
            html: `
              <div style="font-family: Arial, sans-serif; max-width: 600px; margin: 0 auto;">
                <div style="background: #059669; color: white; padding: 20px; text-align: center;">
                  <h1 style="margin: 0;">✅ Environment Recovered</h1>
                </div>
                <div style="padding: 20px;">
                  <p><strong>Environment:</strong> ${environment}</p>
                  <p><strong>Cluster:</strong> ${cluster}</p>
                  <p><strong>Recovery Time:</strong> ${new Date().toLocaleString()}</p>
                </div>
              </div>
            `
          });
        } else {
          await this.emailService.sendAlert(
            this.alertConfig.channels.email.recipients,
            environment,
            cluster,
            `${type === 'reminder' ? '[REMINDER] ' : ''}${reason}`
          );
        }
      } catch (error) {
        console.error('Failed to send email alert:', error);
      }
    }
  }

  async sendDailyReport(reportData: any): Promise<void> {
    if (!this.alertConfig.enabled) {
      return;
    }

    // Log report generation to Groundcover
    if (this.groundcoverService) {
      await this.groundcoverService.logSystemEvent('daily_report_generated', {
        environmentCount: reportData.environments.length,
        clusterCount: reportData.clusterMetrics.length,
        errorRecordCount: reportData.errorDistributions.length,
      });
    }

    // Send Slack report
    if (this.slackService && this.alertConfig.channels.slack.enabled) {
      try {
        await this.slackService.sendDailyReport(
          this.alertConfig.channels.slack.reportChannelId,
          reportData
        );
      } catch (error) {
        console.error('Failed to send Slack daily report:', error);
      }
    }

    // Send email report
    if (this.emailService && this.alertConfig.channels.email.enabled) {
      try {
        await this.emailService.sendDailyReport(
          this.alertConfig.channels.email.recipients,
          reportData
        );
      } catch (error) {
        console.error('Failed to send email daily report:', error);
      }
    }
  }

  async testConnections(): Promise<{ slack: boolean; email: boolean; groundcover: boolean }> {
    const results = {
      slack: false,
      email: false,
      groundcover: false,
    };

    if (this.slackService) {
      results.slack = await this.slackService.testConnection();
    }

    if (this.emailService) {
      results.email = await this.emailService.testConnection();
    }

    if (this.groundcoverService) {
      results.groundcover = await this.groundcoverService.testConnection();
    }

    return results;
  }
}

----------------------------------------

----------------------------------------
FILE: /mnt/c/Users/sansk/OneDrive/Documents/GitHub/SRE-Monitoring-Dashboard/src/services/emailService.ts
----------------------------------------
export interface EmailMessage {
  to: string[];
  subject: string;
  html: string;
  text?: string;
}

export class EmailService {
  private senderEmail: string;
  private appPassword: string;

  constructor(senderEmail: string, appPassword: string) {
    this.senderEmail = senderEmail;
    this.appPassword = appPassword;
  }

  async sendEmail(message: EmailMessage): Promise<boolean> {
    if (!this.senderEmail || !this.appPassword) {
      console.error('Email credentials not configured');
      return false;
    }

    try {
      // Using a serverless email service like EmailJS or similar
      // For production, you'd want to use a proper email service
      const response = await fetch('https://api.emailjs.com/api/v1.0/email/send', {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify({
          service_id: 'your_service_id', // Configure in EmailJS
          template_id: 'your_template_id', // Configure in EmailJS
          user_id: 'your_user_id', // Configure in EmailJS
          template_params: {
            from_email: this.senderEmail,
            to_email: message.to.join(','),
            subject: message.subject,
            message: message.html,
          },
        }),
      });

      return response.ok;
    } catch (error) {
      console.error('Failed to send email:', error);
      return false;
    }
  }

  async sendAlert(recipients: string[], environment: string, cluster: string, reason: string): Promise<boolean> {
    const subject = `🚨 Production Alert: ${environment}`;
    const html = `
      <div style="font-family: Arial, sans-serif; max-width: 600px; margin: 0 auto;">
        <div style="background: #dc2626; color: white; padding: 20px; text-align: center;">
          <h1 style="margin: 0;">🚨 Production Environment Alert</h1>
        </div>
        
        <div style="padding: 20px; background: #f9fafb;">
          <table style="width: 100%; border-collapse: collapse;">
            <tr>
              <td style="padding: 10px; border-bottom: 1px solid #e5e7eb; font-weight: bold;">Environment:</td>
              <td style="padding: 10px; border-bottom: 1px solid #e5e7eb;">${environment}</td>
            </tr>
            <tr>
              <td style="padding: 10px; border-bottom: 1px solid #e5e7eb; font-weight: bold;">Cluster:</td>
              <td style="padding: 10px; border-bottom: 1px solid #e5e7eb;">${cluster}</td>
            </tr>
            <tr>
              <td style="padding: 10px; border-bottom: 1px solid #e5e7eb; font-weight: bold;">Status:</td>
              <td style="padding: 10px; border-bottom: 1px solid #e5e7eb; color: #dc2626;">❌ FAILED</td>
            </tr>
            <tr>
              <td style="padding: 10px; border-bottom: 1px solid #e5e7eb; font-weight: bold;">Time:</td>
              <td style="padding: 10px; border-bottom: 1px solid #e5e7eb;">${new Date().toLocaleString()}</td>
            </tr>
            <tr>
              <td style="padding: 10px; font-weight: bold;">Reason:</td>
              <td style="padding: 10px;">${reason}</td>
            </tr>
          </table>
        </div>
        
        <div style="background: #fef3c7; padding: 15px; margin: 20px 0; border-left: 4px solid #f59e0b;">
          <p style="margin: 0; color: #92400e;">
            <strong>Action Required:</strong> Please investigate this issue immediately.
          </p>
        </div>
        
        <div style="text-align: center; padding: 20px; color: #6b7280; font-size: 12px;">
          <p>This alert was generated by the SRE Monitoring Dashboard</p>
        </div>
      </div>
    `;

    return this.sendEmail({
      to: recipients,
      subject,
      html,
      text: `Production Alert: ${environment} - ${reason}`
    });
  }

  async sendDailyReport(recipients: string[], reportData: any): Promise<boolean> {
    const { environments, clusterMetrics, errorDistributions } = reportData;
    const successfulEnvs = environments.filter((env: any) => env.loginPage === 'Live').length;
    const totalEnvs = environments.length;
    const totalNodes = clusterMetrics.reduce((sum: number, cluster: any) => sum + cluster.nodes, 0);

    const subject = `📊 Daily Production Report - ${new Date().toLocaleDateString()}`;
    const html = `
      <div style="font-family: Arial, sans-serif; max-width: 800px; margin: 0 auto;">
        <div style="background: #2563eb; color: white; padding: 20px; text-align: center;">
          <h1 style="margin: 0;">📊 Daily Production Report</h1>
          <p style="margin: 10px 0 0 0;">${new Date().toLocaleDateString()}</p>
        </div>
        
        <div style="padding: 20px;">
          <div style="display: grid; grid-template-columns: repeat(auto-fit, minmax(200px, 1fr)); gap: 20px; margin-bottom: 30px;">
            <div style="background: #f0f9ff; padding: 20px; border-radius: 8px; text-align: center;">
              <h3 style="margin: 0; color: #1e40af;">Environment Health</h3>
              <p style="font-size: 24px; font-weight: bold; margin: 10px 0; color: ${successfulEnvs === totalEnvs ? '#059669' : '#dc2626'};">
                ${successfulEnvs}/${totalEnvs}
              </p>
              <p style="margin: 0; color: #6b7280;">Environments Live</p>
            </div>
            
            <div style="background: #f0fdf4; padding: 20px; border-radius: 8px; text-align: center;">
              <h3 style="margin: 0; color: #166534;">Total Nodes</h3>
              <p style="font-size: 24px; font-weight: bold; margin: 10px 0; color: #059669;">${totalNodes}</p>
              <p style="margin: 0; color: #6b7280;">Across All Clusters</p>
            </div>
          </div>
          
          <h2 style="color: #374151; border-bottom: 2px solid #e5e7eb; padding-bottom: 10px;">Environment Details</h2>
          <table style="width: 100%; border-collapse: collapse; margin-bottom: 30px;">
            <thead>
              <tr style="background: #f9fafb;">
                <th style="padding: 12px; text-align: left; border-bottom: 1px solid #e5e7eb;">Environment</th>
                <th style="padding: 12px; text-align: left; border-bottom: 1px solid #e5e7eb;">Region</th>
                <th style="padding: 12px; text-align: left; border-bottom: 1px solid #e5e7eb;">Status</th>
                <th style="padding: 12px; text-align: left; border-bottom: 1px solid #e5e7eb;">Query Time</th>
              </tr>
            </thead>
            <tbody>
              ${environments.map((env: any) => `
                <tr>
                  <td style="padding: 12px; border-bottom: 1px solid #e5e7eb;">${env.namespace}</td>
                  <td style="padding: 12px; border-bottom: 1px solid #e5e7eb;">${env.region}</td>
                  <td style="padding: 12px; border-bottom: 1px solid #e5e7eb; color: ${env.loginPage === 'Live' ? '#059669' : '#dc2626'};">
                    ${env.loginPage === 'Live' ? '✅' : '❌'} ${env.loginPage}
                  </td>
                  <td style="padding: 12px; border-bottom: 1px solid #e5e7eb;">${env.queryTimeS}s</td>
                </tr>
              `).join('')}
            </tbody>
          </table>
        </div>
        
        <div style="text-align: center; padding: 20px; color: #6b7280; font-size: 12px; border-top: 1px solid #e5e7eb;">
          <p>Generated by SRE Monitoring Dashboard at ${new Date().toLocaleString()}</p>
        </div>
      </div>
    `;

    return this.sendEmail({
      to: recipients,
      subject,
      html,
      text: `Daily Production Report - ${new Date().toLocaleDateString()}`
    });
  }

  async testConnection(): Promise<boolean> {
    try {
      // Test by sending a simple test email
      const testMessage: EmailMessage = {
        to: [this.senderEmail],
        subject: 'SRE Dashboard - Email Test',
        html: '<p>This is a test email from the SRE Monitoring Dashboard.</p>',
        text: 'This is a test email from the SRE Monitoring Dashboard.'
      };

      return await this.sendEmail(testMessage);
    } catch (error) {
      console.error('Email connection test failed:', error);
      return false;
    }
  }
}

----------------------------------------

----------------------------------------
FILE: /mnt/c/Users/sansk/OneDrive/Documents/GitHub/SRE-Monitoring-Dashboard/src/services/environmentService.ts
----------------------------------------
export interface EnvironmentTestResult {
  namespace: string;
  cluster: string;
  region: string;
  url: string;
  loginPage: 'Live' | 'Not Live' | 'Disabled';
  authorization: 'Success' | 'Fail' | 'Disabled';
  message: 'Success' | 'Fail' | 'Disabled';
  queryTimeS: number;
  version: string;
  lastTransactionDate: string;
  lastChecked: Date;
}

export interface LoginCredentials {
  email: string;
  password: string;
}

export interface EnvironmentConfig {
  applicationIds: {
    default: string;
    environmentSpecific: Record<string, string>;
  };
}

export class EnvironmentService {
  private readonly TIMEOUT = 60000; // 60 seconds
  private readonly DEFAULT_QUESTION = "What is the last transaction date?";
  private readonly NEW_API_ENDPOINT = "/api/erag-backend/v1/toucan-sql/nlp-query";
  private readonly QUERY_RESPONSE_THRESHOLD_S = 60;
  private readonly USER_ID = "48b643e1-c6b7-48fd-b7c8-b1dbe0ad7d90";
  
  private readonly LOGIN_URL_TEMPLATES = [
    "{url}/api/frontegg/identity/resources/auth/v1/user",
    "https://gs-erag.frontegg.com/frontegg/identity/resources/auth/v1/user"
  ];

  constructor(
    private credentials: LoginCredentials,
    private config: EnvironmentConfig,
    private groundcoverService?: any
  ) {}

  async testEnvironment(url: string, exclusions: string[] = []): Promise<EnvironmentTestResult> {
    const namespace = this.extractNamespace(url);
    const cluster = this.extractCluster(url);
    const region = this.getRegion(cluster);

    const result: EnvironmentTestResult = {
      namespace,
      cluster,
      region,
      url,
      loginPage: 'Not Live',
      authorization: 'Fail',
      message: 'Fail',
      queryTimeS: 0,
      version: 'Unknown',
      lastTransactionDate: 'Error retrieving data',
      lastChecked: new Date()
    };

    // Check if environment is excluded
    if (exclusions.includes(url)) {
      result.loginPage = 'Disabled';
      result.authorization = 'Disabled';
      result.message = 'Disabled';
      result.lastTransactionDate = 'Environment excluded from testing';
      return result;
    }

    try {
      // Get application ID for this environment
      const applicationId = this.getApplicationId(url);
      if (!applicationId) {
        throw new Error('No application ID configured for this environment');
      }

      // Step 1: Login and get cookies
      const { cookies, error } = await this.loginToEnvironment(url, applicationId);
      if (!cookies) {
        throw new Error(error || 'Login failed');
      }

      // Step 2: Check login page availability
      const { status: loginStatus, duration: loginDuration } = await this.checkLoginPageAvailability(url, cookies, namespace, cluster);
      result.loginPage = loginStatus;

      if (loginStatus !== 'Live') {
        await this.logToGroundcover('login_page', url, loginStatus, namespace, cluster, loginDuration);
        return result;
      }

      // Step 3: Get authorization token
      const { token, status: authStatus, duration: authDuration } = await this.getAuthToken(url, cookies, namespace, cluster);
      result.authorization = authStatus;

      if (authStatus !== 'Success' || !token) {
        await this.logToGroundcover('authorization', url, authStatus, namespace, cluster, authDuration);
        return result;
      }

      // Step 4: Get version
      result.version = await this.getEnvironmentVersion(url, cookies);

      // Step 5: Query the environment
      const { status: queryStatus, queryTime, nlResult } = await this.queryEnvironment(url, token, cookies, namespace, cluster);
      result.message = queryStatus;
      result.queryTimeS = queryTime;
      result.lastTransactionDate = nlResult;

      await this.logToGroundcover('message', url, queryStatus, namespace, cluster, queryTime * 1000);

    } catch (error) {
      console.error(`Error testing environment ${url}:`, error);
      result.lastTransactionDate = `Error: ${error instanceof Error ? error.message : 'Unknown error'}`;
      
      // Log the error to Groundcover
      await this.logToGroundcover('error', url, 'Fail', namespace, cluster, 0, error instanceof Error ? error.message : 'Unknown error');
    }

    return result;
  }

  private extractNamespace(url: string): string {
    try {
      return url.split('.')[0].replace('https://', '');
    } catch {
      return 'unknown_env';
    }
  }

  private extractCluster(url: string): string {
    try {
      return url.split('.')[1];
    } catch {
      return 'unknown_cluster';
    }
  }

  private getRegion(cluster: string): string {
    if (cluster.includes('erag-c1')) return 'US';
    if (cluster.includes('euc1')) return 'EU';
    if (cluster.includes('use1')) return 'US-EAST';
    if (cluster.includes('erag-dev')) return 'DEV';
    if (cluster.includes('mercury')) return 'MERCURY';
    return 'N/A';
  }

  private getApplicationId(url: string): string | null {
    const envSpecific = this.config.applicationIds.environmentSpecific[url];
    return envSpecific || this.config.applicationIds.default || null;
  }

  private async loginToEnvironment(url: string, applicationId: string): Promise<{ cookies?: Record<string, string>; error?: string }> {
    const payload = {
      email: this.credentials.email,
      password: this.credentials.password,
      invitationToken: ""
    };

    for (const template of this.LOGIN_URL_TEMPLATES) {
      const loginUrl = template.replace('{url}', url);
      
      try {
        const response = await fetch(loginUrl, {
          method: 'POST',
          headers: {
            'Content-Type': 'application/json',
            'frontegg-requested-application-id': applicationId,
            'frontegg-source': 'login-box',
            'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36'
          },
          body: JSON.stringify(payload),
          signal: AbortSignal.timeout(this.TIMEOUT)
        });

        if (response.ok) {
          // Extract cookies from response headers
          const cookies: Record<string, string> = {};
          const setCookieHeaders = response.headers.get('set-cookie');
          if (setCookieHeaders) {
            setCookieHeaders.split(',').forEach(cookie => {
              const [nameValue] = cookie.split(';');
              const [name, value] = nameValue.split('=');
              if (name && value) {
                cookies[name.trim()] = value.trim();
              }
            });
          }
          return { cookies };
        }

        if (response.status === 404) {
          continue; // Try next template
        }

        return { error: `HTTP ${response.status}: ${await response.text()}` };
      } catch (error) {
        if (error instanceof Error && error.name === 'AbortError') {
          return { error: 'Login timeout' };
        }
        continue; // Try next template
      }
    }

    return { error: 'All login attempts failed' };
  }

  private async checkLoginPageAvailability(url: string, cookies: Record<string, string>, namespace: string, cluster: string): Promise<{ status: 'Live' | 'Not Live'; duration: number }> {
    const startTime = Date.now();
    
    try {
      const response = await fetch(url, {
        headers: this.buildCookieHeader(cookies),
        signal: AbortSignal.timeout(this.TIMEOUT)
      });

      const duration = Date.now() - startTime;
      const status = response.ok ? 'Live' : 'Not Live';
      
      return { status, duration };
    } catch (error) {
      const duration = Date.now() - startTime;
      return { status: 'Not Live', duration };
    }
  }

  private async getAuthToken(url: string, cookies: Record<string, string>, namespace: string, cluster: string): Promise<{ token?: string; status: 'Success' | 'Fail'; duration: number }> {
    const startTime = Date.now();
    const tokenUrl = `${url}/api/get-token`;

    try {
      const response = await fetch(tokenUrl, {
        headers: this.buildCookieHeader(cookies),
        signal: AbortSignal.timeout(this.TIMEOUT)
      });

      const duration = Date.now() - startTime;

      if (!response.ok) {
        return { status: 'Fail', duration };
      }

      const data = await response.json();
      const token = data.token;

      if (!token) {
        return { status: 'Fail', duration };
      }

      return { token, status: 'Success', duration };
    } catch (error) {
      const duration = Date.now() - startTime;
      return { status: 'Fail', duration };
    }
  }

  private async getEnvironmentVersion(url: string, cookies: Record<string, string>): Promise<string> {
    try {
      const response = await fetch(`${url}/api/version`, {
        headers: this.buildCookieHeader(cookies),
        signal: AbortSignal.timeout(this.TIMEOUT)
      });

      if (response.ok) {
        const data = await response.json();
        return data.version || 'Unknown';
      }
    } catch (error) {
      console.error(`Failed to get version for ${url}:`, error);
    }
    return 'Unknown';
  }

  private async queryEnvironment(url: string, token: string, cookies: Record<string, string>, namespace: string, cluster: string): Promise<{ status: 'Success' | 'Fail'; queryTime: number; nlResult: string }> {
    const startTime = Date.now();
    const queryUrl = `${url}${this.NEW_API_ENDPOINT}`;

    const payload = {
      query: this.DEFAULT_QUESTION,
      queryEn: "",
      queriesHistorical: [],
      evidence: "",
      model: "azure-openai-gpt4o-2024-08-06",
      applicationId: 1,
      skipCacheSearch: true,
      skipSchemaFiltering: true
    };

    try {
      const response = await fetch(queryUrl, {
        method: 'POST',
        headers: {
          'Authorization': `Token ${token}`,
          'User-id': this.USER_ID,
          'Content-Type': 'application/json',
          'accept': 'application/json',
          'correlation-id': this.generateCorrelationId(),
          ...this.buildCookieHeader(cookies)
        },
        body: JSON.stringify(payload),
        signal: AbortSignal.timeout(this.TIMEOUT)
      });

      const duration = Date.now() - startTime;
      const queryTime = Math.round(duration / 1000);

      if (!response.ok) {
        return {
          status: 'Fail',
          queryTime,
          nlResult: `HTTP Error: ${response.status}`
        };
      }

      // Check if response time exceeded threshold
      if (queryTime > this.QUERY_RESPONSE_THRESHOLD_S) {
        return {
          status: 'Fail',
          queryTime,
          nlResult: `Response time exceeded threshold (${this.QUERY_RESPONSE_THRESHOLD_S}s)`
        };
      }

      const data = await response.json();
      const nlResult = data.nl_result || 'No answer found';

      // Check for failure patterns in the response
      const failurePatterns = [
        "sorry, i didn't get that. please, try again.",
        "this request can't be processed because the limit for connected data was exceeded. please contact your administrator."
      ];

      const isFailure = failurePatterns.some(pattern => 
        nlResult.toLowerCase().includes(pattern)
      );

      return {
        status: isFailure ? 'Fail' : 'Success',
        queryTime,
        nlResult
      };

    } catch (error) {
      const duration = Date.now() - startTime;
      const queryTime = Math.round(duration / 1000);

      return {
        status: 'Fail',
        queryTime,
        nlResult: error instanceof Error ? error.message : 'Unknown error'
      };
    }
  }

  private buildCookieHeader(cookies: Record<string, string>): Record<string, string> {
    const cookieString = Object.entries(cookies)
      .map(([name, value]) => `${name}=${value}`)
      .join('; ');
    
    return cookieString ? { 'Cookie': cookieString } : {};
  }

  private generateCorrelationId(): string {
    return 'xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx'.replace(/[xy]/g, function(c) {
      const r = Math.random() * 16 | 0;
      const v = c === 'x' ? r : (r & 0x3 | 0x8);
      return v.toString(16);
    });
  }

  private async logToGroundcover(testType: string, url: string, status: string, namespace: string, cluster: string, duration: number, error?: string): Promise<void> {
    if (!this.groundcoverService) return;

    const logData = {
      timestamp: new Date().toISOString(),
      content: `${testType} test for ${url}: ${status}${error ? ` - ${error}` : ''}`,
      string_attributes: {
        test_type: testType,
        url,
        status,
        cluster: `${cluster}-gigaspaces-net`,
        namespace,
        gc_source_type: 'observability_report',
        'k8s.pod.annotation.monitorLevel': 'critical'
      },
      float_attributes: {
        duration_ms: duration
      }
    };

    await this.groundcoverService.sendLog(logData);
  }
}

----------------------------------------

----------------------------------------
FILE: /mnt/c/Users/sansk/OneDrive/Documents/GitHub/SRE-Monitoring-Dashboard/src/services/groundcoverService.ts
----------------------------------------
export interface LogEntry {
  timestamp: string;
  level: 'info' | 'warn' | 'error' | 'debug';
  message: string;
  environment?: string;
  cluster?: string;
  metadata?: Record<string, any>;
}

export class GroundcoverService {
  private apiKey: string;
  private endpoint: string;

  constructor(apiKey: string, endpoint: string) {
    this.apiKey = apiKey;
    this.endpoint = endpoint;
  }

  async sendLog(logEntry: LogEntry): Promise<boolean> {
    if (!this.apiKey || !this.endpoint) {
      console.error('Groundcover credentials not configured');
      return false;
    }

    try {
      const response = await fetch(this.endpoint, {
        method: 'POST',
        headers: {
          'Authorization': `Bearer ${this.apiKey}`,
          'Content-Type': 'application/json',
        },
        body: JSON.stringify({
          ...logEntry,
          source: 'sre-monitoring-dashboard',
          timestamp: logEntry.timestamp || new Date().toISOString(),
        }),
      });

      if (!response.ok) {
        console.error('Groundcover API error:', response.statusText);
        return false;
      }

      return true;
    } catch (error) {
      console.error('Failed to send log to Groundcover:', error);
      return false;
    }
  }

  async logEnvironmentCheck(environment: string, cluster: string, status: 'success' | 'failure', details: any): Promise<boolean> {
    const logEntry: LogEntry = {
      timestamp: new Date().toISOString(),
      level: status === 'success' ? 'info' : 'error',
      message: `Environment check ${status}: ${environment}`,
      environment,
      cluster,
      metadata: {
        type: 'environment_check',
        status,
        queryTime: details.queryTimeS,
        loginPage: details.loginPage,
        authorization: details.authorization,
        message: details.message,
        version: details.version,
        lastTransactionDate: details.lastTransactionDate,
      }
    };

    return this.sendLog(logEntry);
  }

  async logAlert(environment: string, cluster: string, reason: string, alertType: 'new' | 'reminder' | 'resolved'): Promise<boolean> {
    const logEntry: LogEntry = {
      timestamp: new Date().toISOString(),
      level: alertType === 'resolved' ? 'info' : 'warn',
      message: `Alert ${alertType}: ${environment} - ${reason}`,
      environment,
      cluster,
      metadata: {
        type: 'alert',
        alertType,
        reason,
      }
    };

    return this.sendLog(logEntry);
  }

  async logSystemEvent(event: string, details: Record<string, any>): Promise<boolean> {
    const logEntry: LogEntry = {
      timestamp: new Date().toISOString(),
      level: 'info',
      message: `System event: ${event}`,
      metadata: {
        type: 'system_event',
        event,
        ...details,
      }
    };

    return this.sendLog(logEntry);
  }

  async testConnection(): Promise<boolean> {
    const testLog: LogEntry = {
      timestamp: new Date().toISOString(),
      level: 'info',
      message: 'Groundcover connection test',
      metadata: {
        type: 'connection_test',
      }
    };

    return this.sendLog(testLog);
  }
}

----------------------------------------

----------------------------------------
FILE: /mnt/c/Users/sansk/OneDrive/Documents/GitHub/SRE-Monitoring-Dashboard/src/services/metricsService.ts
----------------------------------------
export interface ClusterMetric {
  cluster: string;
  region: string;
  nodes: number;
  ramUsage: number;
  cpuUsage: number;
  lastUpdated: Date;
}

export interface ErrorDistributionData {
  namespace: string;
  cluster: string;
  region: string;
  errors24h: number;
  errorRate24h: number;
  errors48h: number;
  errorRate48h: number;
  errors72h: number;
  errorRate72h: number;
}

export class MetricsService {
  private readonly VICTORIA_METRICS_URL = "https://ds.groundcover.com/datasources/prometheus/api/v1/query_range";
  private readonly CLICKHOUSE_URL = "https://ds.groundcover.com/";

  constructor(private dataApiKey: string) {}

  async fetchClusterMetrics(clusters: string[]): Promise<ClusterMetric[]> {
    const metrics: ClusterMetric[] = [];

    for (const cluster of clusters) {
      try {
        const [nodes, ramUsage, cpuUsage] = await Promise.all([
          this.fetchNodes(cluster),
          this.fetchRAMUsage(cluster),
          this.fetchCPUUsage(cluster)
        ]);

        metrics.push({
          cluster,
          region: this.getRegion(cluster),
          nodes,
          ramUsage,
          cpuUsage,
          lastUpdated: new Date()
        });
      } catch (error) {
        console.error(`Error fetching metrics for cluster ${cluster}:`, error);
        
        // Add cluster with zero values if fetch fails
        metrics.push({
          cluster,
          region: this.getRegion(cluster),
          nodes: 0,
          ramUsage: 0,
          cpuUsage: 0,
          lastUpdated: new Date()
        });
      }
    }

    return metrics;
  }

  async fetchErrorDistribution(clusters: string[], namespaces: string[]): Promise<ErrorDistributionData[]> {
    const errorData: ErrorDistributionData[] = [];

    for (const cluster of clusters) {
      try {
        const clusterErrors = await this.fetchClusterErrorDistribution(cluster, namespaces);
        errorData.push(...clusterErrors);
      } catch (error) {
        console.error(`Error fetching error distribution for cluster ${cluster}:`, error);
      }
    }

    return errorData;
  }

  async detectClusters(): Promise<string[]> {
    const query = "SELECT DISTINCT cluster FROM logs WHERE timestamp > NOW() - INTERVAL 1440 MINUTE FORMAT JSON";
    const allowedClusters = new Set([
      "ws-use1-gigaspaces-net",
      "erag-c1-gigaspaces-net", 
      "ws-euc1-gigaspaces-net",
      "erag-dev-gigaspaces-net",
      "mercury-gigaspaces-net"
    ]);

    try {
      const response = await fetch(this.CLICKHOUSE_URL, {
        method: 'POST',
        headers: {
          'X-ClickHouse-Key': this.dataApiKey,
          'Content-Type': 'text/plain'
        },
        body: query
      });

      if (!response.ok) {
        throw new Error(`HTTP ${response.status}: ${response.statusText}`);
      }

      const data = await response.json();
      
      if (data?.data) {
        const clusters = data.data
          .map((item: any) => item.cluster)
          .filter((cluster: string) => cluster && allowedClusters.has(cluster));
        
        return clusters;
      }

      return [];
    } catch (error) {
      console.error('Error detecting clusters:', error);
      return [];
    }
  }

  private async fetchNodes(cluster: string): Promise<number> {
    const now = Math.floor(Date.now() / 1000);
    const start = now - (24 * 3600);
    
    const query = `count(count by (node_name) (groundcover_node_rt_m_cpu_usage{cluster="${cluster}"}))`;
    
    try {
      const response = await this.queryVictoriaMetrics(query, start, now);
      
      if (response?.data?.result?.[0]?.values?.length > 0) {
        const lastValue = response.data.result[0].values[response.data.result[0].values.length - 1];
        return parseFloat(lastValue[1]) || 0;
      }
      
      return 0;
    } catch (error) {
      console.error(`Error fetching nodes for ${cluster}:`, error);
      return 0;
    }
  }

  private async fetchRAMUsage(cluster: string): Promise<number> {
    const now = Math.floor(Date.now() / 1000);
    const start = now - (24 * 3600);
    
    const query = `avg by (cluster) (groundcover_node_mem_used_percent{cluster="${cluster}"})`;
    
    try {
      const response = await this.queryVictoriaMetrics(query, start, now);
      
      if (response?.data?.result?.[0]?.values?.length > 0) {
        const lastValue = response.data.result[0].values[response.data.result[0].values.length - 1];
        return parseFloat(lastValue[1]) || 0;
      }
      
      return 0;
    } catch (error) {
      console.error(`Error fetching RAM for ${cluster}:`, error);
      return 0;
    }
  }

  private async fetchCPUUsage(cluster: string): Promise<number> {
    const now = Math.floor(Date.now() / 1000);
    const start = now - (24 * 3600);
    
    const query = `(sum by (cluster) (rate(groundcover_node_m_cpu_usage_seconds_total{cluster="${cluster}"}[5m])) / sum by (cluster) (groundcover_node_capacity_cpum_cpu{cluster="${cluster}"})) * 100`;
    
    try {
      const response = await this.queryVictoriaMetrics(query, start, now);
      
      if (response?.data?.result?.[0]?.values?.length > 0) {
        const lastValue = response.data.result[0].values[response.data.result[0].values.length - 1];
        return parseFloat(lastValue[1]) || 0;
      }
      
      return 0;
    } catch (error) {
      console.error(`Error fetching CPU for ${cluster}:`, error);
      return 0;
    }
  }

  private async queryVictoriaMetrics(query: string, start: number, end: number): Promise<any> {
    const params = new URLSearchParams({
      query,
      start: start.toString(),
      end: end.toString(),
      step: '5m'
    });

    const response = await fetch(`${this.VICTORIA_METRICS_URL}?${params}`, {
      headers: {
        'Authorization': `Bearer ${this.dataApiKey}`
      }
    });

    if (!response.ok) {
      throw new Error(`Victoria Metrics API error: ${response.status}`);
    }

    return response.json();
  }

  private async fetchClusterErrorDistribution(cluster: string, namespaces: string[]): Promise<ErrorDistributionData[]> {
    if (namespaces.length === 0) return [];

    const namespacesFilter = namespaces.map(ns => `'${ns}'`).join(',');
    
    const query = `
      WITH TotalCounts_24h AS (
        SELECT
          namespace,
          cluster,
          COUNT() AS total_count_24h
        FROM logs
        WHERE timestamp > NOW() - INTERVAL 1440 MINUTE
          AND cluster = '${cluster}'
        GROUP BY namespace, cluster
      ),
      ErrorCounts_24h AS (
        SELECT
          namespace,
          cluster,
          COUNT() AS error_count_24h
        FROM logs
        WHERE level = 'error'
          AND timestamp > NOW() - INTERVAL 1440 MINUTE
          AND cluster = '${cluster}'
          AND content IS NOT NULL
          AND content != ''
        GROUP BY namespace, cluster
      ),
      TotalCounts_48h AS (
        SELECT
          namespace,
          cluster,
          COUNT() AS total_count_48h
        FROM logs
        WHERE timestamp > NOW() - INTERVAL 2880 MINUTE
          AND cluster = '${cluster}'
        GROUP BY namespace, cluster
      ),
      ErrorCounts_48h AS (
        SELECT
          namespace,
          cluster,
          COUNT() AS error_count_48h
        FROM logs
        WHERE level = 'error'
          AND timestamp > NOW() - INTERVAL 2880 MINUTE
          AND cluster = '${cluster}'
          AND content IS NOT NULL
          AND content != ''
        GROUP BY namespace, cluster
      ),
      TotalCounts_72h AS (
        SELECT
          namespace,
          cluster,
          COUNT() AS total_count_72h
        FROM logs
        WHERE timestamp > NOW() - INTERVAL 4320 MINUTE
          AND cluster = '${cluster}'
        GROUP BY namespace, cluster
      ),
      ErrorCounts_72h AS (
        SELECT
          namespace,
          cluster,
          COUNT() AS error_count_72h
        FROM logs
        WHERE level = 'error'
          AND timestamp > NOW() - INTERVAL 4320 MINUTE
          AND cluster = '${cluster}'
          AND content IS NOT NULL
          AND content != ''
        GROUP BY namespace, cluster
      )
      SELECT
        t24.namespace AS namespace,
        t24.cluster AS cluster,
        COALESCE(e24.error_count_24h, 0) AS error_count_24h,
        t24.total_count_24h AS total_count_24h,
        ROUND((COALESCE(e24.error_count_24h, 0) / t24.total_count_24h) * 100, 2) AS error_rate_24h,
        COALESCE(e48.error_count_48h, 0) AS error_count_48h,
        t48.total_count_48h AS total_count_48h,
        ROUND((COALESCE(e48.error_count_48h, 0) / t48.total_count_48h) * 100, 2) AS error_rate_48h,
        COALESCE(e72.error_count_72h, 0) AS error_count_72h,
        t72.total_count_72h AS total_count_72h,
        ROUND((COALESCE(e72.error_count_72h, 0) / t72.total_count_72h) * 100, 2) AS error_rate_72h
      FROM TotalCounts_24h t24
      LEFT JOIN ErrorCounts_24h e24 ON t24.namespace = e24.namespace AND t24.cluster = e24.cluster
      LEFT JOIN TotalCounts_48h t48 ON t24.namespace = t48.namespace AND t24.cluster = t48.cluster
      LEFT JOIN ErrorCounts_48h e48 ON t24.namespace = e48.namespace AND t24.cluster = e48.cluster
      LEFT JOIN TotalCounts_72h t72 ON t24.namespace = t72.namespace AND t24.cluster = t72.cluster
      LEFT JOIN ErrorCounts_72h e72 ON t24.namespace = e72.namespace AND t24.cluster = e72.cluster
      WHERE t24.total_count_24h > 0
        AND t24.namespace IN (${namespacesFilter})
      ORDER BY error_rate_24h DESC
      FORMAT JSON
    `;

    try {
      const response = await fetch(this.CLICKHOUSE_URL, {
        method: 'POST',
        headers: {
          'X-ClickHouse-Key': this.dataApiKey,
          'Content-Type': 'text/plain'
        },
        body: query
      });

      if (!response.ok) {
        throw new Error(`ClickHouse API error: ${response.status}`);
      }

      const data = await response.json();
      
      if (data?.data) {
        return data.data.map((row: any) => ({
          namespace: row.namespace,
          cluster: row.cluster,
          region: this.getRegion(row.cluster),
          errors24h: row.error_count_24h,
          errorRate24h: row.error_rate_24h,
          errors48h: row.error_count_48h,
          errorRate48h: row.error_rate_48h,
          errors72h: row.error_count_72h,
          errorRate72h: row.error_rate_72h
        }));
      }

      return [];
    } catch (error) {
      console.error(`Error fetching error distribution for ${cluster}:`, error);
      return [];
    }
  }

  private getRegion(cluster: string): string {
    if (cluster.includes('erag-c1')) return 'US';
    if (cluster.includes('euc1')) return 'EU';
    if (cluster.includes('use1')) return 'US-EAST';
    if (cluster.includes('erag-dev')) return 'DEV';
    if (cluster.includes('mercury')) return 'MERCURY';
    return 'N/A';
  }
}

----------------------------------------

----------------------------------------
FILE: /mnt/c/Users/sansk/OneDrive/Documents/GitHub/SRE-Monitoring-Dashboard/src/services/monitoringService.ts
----------------------------------------
import { EnvironmentService, EnvironmentTestResult } from './environmentService';
import { MetricsService, ClusterMetric, ErrorDistributionData } from './metricsService';
import { GroundcoverService } from './groundcoverService';
import { AlertingService } from './alertingService';
import { AppConfig, AlertConfig, AlertState } from '../types';

export interface MonitoringResults {
  environments: EnvironmentTestResult[];
  clusterMetrics: ClusterMetric[];
  errorDistributions: ErrorDistributionData[];
}

export class MonitoringService {
  private environmentService: EnvironmentService;
  private metricsService: MetricsService;
  private groundcoverService: GroundcoverService;
  private alertingService?: AlertingService;

  constructor(
    private config: AppConfig,
    private alertConfig?: AlertConfig
  ) {
    this.groundcoverService = new GroundcoverService(
      config.apiKeys.logging,
      config.endpoints.groundcoverLogging
    );

    this.environmentService = new EnvironmentService(
      config.credentials,
      {
        applicationIds: config.applicationIds
      },
      this.groundcoverService
    );

    this.metricsService = new MetricsService(config.apiKeys.data);

    if (alertConfig) {
      this.alertingService = new AlertingService(
        alertConfig,
        config.apiKeys.logging,
        config.endpoints.groundcoverLogging
      );
    }
  }

  async runEnvironmentTests(
    urls: string[] = [],
    exclusions: string[] = []
  ): Promise<EnvironmentTestResult[]> {
    const urlsToTest = urls.length > 0 ? urls : this.config.environmentUrls;
    
    if (urlsToTest.length === 0) {
      console.warn('No environment URLs configured for testing');
      return [];
    }

    console.log(`Testing ${urlsToTest.length} environments...`);
    
    const results: EnvironmentTestResult[] = [];
    
    // Test environments in parallel with concurrency limit
    const concurrency = 3;
    for (let i = 0; i < urlsToTest.length; i += concurrency) {
      const batch = urlsToTest.slice(i, i + concurrency);
      const batchPromises = batch.map(url => 
        this.environmentService.testEnvironment(url, exclusions)
          .catch(error => {
            console.error(`Failed to test environment ${url}:`, error);
            return this.createFailedResult(url, error);
          })
      );
      
      const batchResults = await Promise.all(batchPromises);
      results.push(...batchResults);
    }

    // Log summary to Groundcover
    await this.logTestSummary(results);

    return results;
  }

  async runFullMonitoring(exclusions: string[] = []): Promise<MonitoringResults> {
    console.log('Starting full monitoring run...');

    // Run environment tests
    const environments = await this.runEnvironmentTests([], exclusions);

    // Detect clusters and fetch metrics
    const clusters = await this.metricsService.detectClusters();
    console.log(`Detected clusters: ${clusters.join(', ')}`);

    const [clusterMetrics, errorDistributions] = await Promise.all([
      this.metricsService.fetchClusterMetrics(clusters),
      this.metricsService.fetchErrorDistribution(
        clusters,
        environments.map(env => env.namespace)
      )
    ]);

    // Process alerts if alerting is enabled
    if (this.alertingService) {
      try {
        await this.alertingService.processEnvironmentResults(environments, {});
      } catch (error) {
        console.error('Error processing alerts:', error);
      }
    }

    const results = {
      environments,
      clusterMetrics,
      errorDistributions
    };

    console.log(`Monitoring completed: ${environments.length} environments, ${clusterMetrics.length} clusters, ${errorDistributions.length} error records`);

    return results;
  }

  async processAlerts(
    environments: EnvironmentTestResult[],
    currentAlertState: AlertState
  ): Promise<AlertState> {
    if (!this.alertingService) {
      console.warn('Alerting service not configured');
      return currentAlertState;
    }

    try {
      return await this.alertingService.processEnvironmentResults(environments, currentAlertState);
    } catch (error) {
      console.error('Error processing alerts:', error);
      return currentAlertState;
    }
  }

  private createFailedResult(url: string, error: any): EnvironmentTestResult {
    const namespace = url.split('.')[0]?.replace('https://', '') || 'unknown';
    const cluster = url.split('.')[1] || 'unknown';
    
    return {
      namespace,
      cluster,
      region: 'N/A',
      url,
      loginPage: 'Not Live',
      authorization: 'Fail',
      message: 'Fail',
      queryTimeS: 0,
      version: 'Unknown',
      lastTransactionDate: `Error: ${error instanceof Error ? error.message : 'Unknown error'}`,
      lastChecked: new Date()
    };
  }

  private async logTestSummary(results: EnvironmentTestResult[]): Promise<void> {
    const summary = {
      total: results.length,
      live: results.filter(r => r.loginPage === 'Live').length,
      authorized: results.filter(r => r.authorization === 'Success').length,
      successful_queries: results.filter(r => r.message === 'Success').length,
      disabled: results.filter(r => r.loginPage === 'Disabled').length
    };

    await this.groundcoverService.logSystemEvent('environment_test_summary', summary);
  }
}

----------------------------------------

----------------------------------------
FILE: /mnt/c/Users/sansk/OneDrive/Documents/GitHub/SRE-Monitoring-Dashboard/src/services/slackService.ts
----------------------------------------
export interface SlackMessage {
  channel: string;
  text: string;
  blocks?: any[];
  attachments?: any[];
}

export class SlackService {
  private botToken: string;
  private baseUrl = 'https://slack.com/api';

  constructor(botToken: string) {
    this.botToken = botToken;
  }

  async sendMessage(message: SlackMessage): Promise<boolean> {
    if (!this.botToken) {
      console.error('Slack bot token not configured');
      return false;
    }

    try {
      const response = await fetch(`${this.baseUrl}/chat.postMessage`, {
        method: 'POST',
        headers: {
          'Authorization': `Bearer ${this.botToken}`,
          'Content-Type': 'application/json',
        },
        body: JSON.stringify(message),
      });

      const result = await response.json();
      
      if (!result.ok) {
        console.error('Slack API error:', result.error);
        return false;
      }

      return true;
    } catch (error) {
      console.error('Failed to send Slack message:', error);
      return false;
    }
  }

  async sendAlert(channelId: string, environment: string, cluster: string, reason: string): Promise<boolean> {
    const message: SlackMessage = {
      channel: channelId,
      text: `🚨 Production Alert: ${environment}`,
      blocks: [
        {
          type: 'header',
          text: {
            type: 'plain_text',
            text: '🚨 Production Environment Alert'
          }
        },
        {
          type: 'section',
          fields: [
            {
              type: 'mrkdwn',
              text: `*Environment:*\n${environment}`
            },
            {
              type: 'mrkdwn',
              text: `*Cluster:*\n${cluster}`
            },
            {
              type: 'mrkdwn',
              text: `*Status:*\n❌ FAILED`
            },
            {
              type: 'mrkdwn',
              text: `*Time:*\n${new Date().toLocaleString()}`
            }
          ]
        },
        {
          type: 'section',
          text: {
            type: 'mrkdwn',
            text: `*Reason:* ${reason}`
          }
        },
        {
          type: 'divider'
        },
        {
          type: 'context',
          elements: [
            {
              type: 'mrkdwn',
              text: '🔍 Please investigate immediately'
            }
          ]
        }
      ]
    };

    return this.sendMessage(message);
  }

  async sendDailyReport(channelId: string, reportData: any): Promise<boolean> {
    const { environments, clusterMetrics, errorDistributions } = reportData;
    const successfulEnvs = environments.filter((env: any) => env.loginPage === 'Live').length;
    const totalEnvs = environments.length;
    const totalNodes = clusterMetrics.reduce((sum: number, cluster: any) => sum + cluster.nodes, 0);
    const highestErrorRate = Math.max(...errorDistributions.map((err: any) => err.errorRate24h), 0);

    const message: SlackMessage = {
      channel: channelId,
      text: `📊 Daily Production Report - ${new Date().toLocaleDateString()}`,
      blocks: [
        {
          type: 'header',
          text: {
            type: 'plain_text',
            text: `📊 Daily Production Report - ${new Date().toLocaleDateString()}`
          }
        },
        {
          type: 'section',
          fields: [
            {
              type: 'mrkdwn',
              text: `*Environment Health:*\n${successfulEnvs}/${totalEnvs} Live`
            },
            {
              type: 'mrkdwn',
              text: `*Total Nodes:*\n${totalNodes}`
            },
            {
              type: 'mrkdwn',
              text: `*Highest Error Rate:*\n${highestErrorRate.toFixed(1)}%`
            },
            {
              type: 'mrkdwn',
              text: `*Report Time:*\n${new Date().toLocaleString()}`
            }
          ]
        }
      ]
    };

    return this.sendMessage(message);
  }

  async testConnection(): Promise<boolean> {
    try {
      const response = await fetch(`${this.baseUrl}/auth.test`, {
        method: 'POST',
        headers: {
          'Authorization': `Bearer ${this.botToken}`,
          'Content-Type': 'application/json',
        },
      });

      const result = await response.json();
      return result.ok;
    } catch (error) {
      console.error('Slack connection test failed:', error);
      return false;
    }
  }
}

----------------------------------------

============================================================
DIRECTORY: /mnt/c/Users/sansk/OneDrive/Documents/GitHub/SRE-Monitoring-Dashboard/src/types
============================================================


----------------------------------------
FILE: /mnt/c/Users/sansk/OneDrive/Documents/GitHub/SRE-Monitoring-Dashboard/src/types/index.ts
----------------------------------------
export interface EnvironmentResult {
  id: string;
  namespace: string;
  cluster: string;
  region: string;
  url: string;
  loginPage: 'Live' | 'Not Live' | 'Disabled';
  authorization: 'Success' | 'Fail' | 'Disabled';
  message: 'Success' | 'Fail' | 'Disabled';
  queryTimeS: number;
  version: string;
  lastChecked: Date;
  lastTransactionDate?: string;
}

export interface ClusterMetrics {
  cluster: string;
  region: string;
  nodes: number;
  ramUsage: number;
  cpuUsage: number;
  lastUpdated: Date;
}

export interface ErrorDistribution {
  namespace: string;
  cluster: string;
  region: string;
  errors24h: number;
  errorRate24h: number;
  errors48h: number;
  errorRate48h: number;
  errors72h: number;
  errorRate72h: number;
}

export interface AppConfig {
  apiKeys: {
    logging: string;
    data: string;
  };
  endpoints: {
    groundcoverLogging: string;
    victoriaMetrics: string;
    clickhouse: string;
  };
  environmentUrls: string[];
  errorDistUrls: string[];
  credentials: {
    email: string;
    password: string;
  };
  applicationIds: {
    default: string;
    environmentSpecific: Record<string, string>;
  };
}

export interface AlertConfig {
  enabled: boolean;
  channels: {
    slack: {
      enabled: boolean;
      botToken: string;
      alertChannelId: string;
      reportChannelId: string;
    };
    email: {
      enabled: boolean;
      senderEmail: string;
      appPassword: string;
      recipients: string[];
    };
  };
  thresholds: {
    queryResponseTime: number;
    reminderInterval: number;
  };
  testExclusions: {
    environments: string[];
  };
}

export interface FileConfig {
  baseDirectory: string;
  files: {
    envList: string;
    errorDistEnvs: string;
    logo: string;
    checkIcon: string;
    timesIcon: string;
    exclamationIcon: string;
  };
}

export interface ScheduleConfig {
  monitoringInterval: number;
  reportGeneration: {
    enabled: boolean;
    time: string;
    timezone: string;
  };
  emailNotifications: {
    enabled: boolean;
    dailyReport: boolean;
    alerts: boolean;
  };
  slackNotifications: {
    enabled: boolean;
    dailyReport: boolean;
    alerts: boolean;
  };
}

export interface AlertState {
  [testKey: string]: {
    status: 'FAIL' | 'SUCCESS';
    firstFailureTimestamp?: string;
    lastReminderTimestamp?: string;
    namespace: string;
    cluster: string;
    reason?: string;
  };
}

----------------------------------------


================================================================================
EXTRACTION SUMMARY
================================================================================
Files processed: 41
Files skipped: 0
Total files: 41
