export interface EmailMessage {
  to: string[];
  subject: string;
  html: string;
  text?: string;
}

export class EmailService {
  private senderEmail: string;
  private appPassword: string;

  constructor(senderEmail: string, appPassword: string) {
    this.senderEmail = senderEmail;
    this.appPassword = appPassword;
  }

  async sendEmail(message: EmailMessage): Promise<boolean> {
    if (!this.senderEmail || !this.appPassword) {
      console.error('Email credentials not configured');
      return false;
    }

    try {
      // Using a serverless email service like EmailJS or similar
      // For production, you'd want to use a proper email service
      const response = await fetch('https://api.emailjs.com/api/v1.0/email/send', {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify({
          service_id: 'your_service_id', // Configure in EmailJS
          template_id: 'your_template_id', // Configure in EmailJS
          user_id: 'your_user_id', // Configure in EmailJS
          template_params: {
            from_email: this.senderEmail,
            to_email: message.to.join(','),
            subject: message.subject,
            message: message.html,
          },
        }),
      });

      return response.ok;
    } catch (error) {
      console.error('Failed to send email:', error);
      return false;
    }
  }

  async sendAlert(recipients: string[], environment: string, cluster: string, reason: string): Promise<boolean> {
    const subject = `üö® Production Alert: ${environment}`;
    const html = `
      <div style="font-family: Arial, sans-serif; max-width: 600px; margin: 0 auto;">
        <div style="background: #dc2626; color: white; padding: 20px; text-align: center;">
          <h1 style="margin: 0;">üö® Production Environment Alert</h1>
        </div>
        
        <div style="padding: 20px; background: #f9fafb;">
          <table style="width: 100%; border-collapse: collapse;">
            <tr>
              <td style="padding: 10px; border-bottom: 1px solid #e5e7eb; font-weight: bold;">Environment:</td>
              <td style="padding: 10px; border-bottom: 1px solid #e5e7eb;">${environment}</td>
            </tr>
            <tr>
              <td style="padding: 10px; border-bottom: 1px solid #e5e7eb; font-weight: bold;">Cluster:</td>
              <td style="padding: 10px; border-bottom: 1px solid #e5e7eb;">${cluster}</td>
            </tr>
            <tr>
              <td style="padding: 10px; border-bottom: 1px solid #e5e7eb; font-weight: bold;">Status:</td>
              <td style="padding: 10px; border-bottom: 1px solid #e5e7eb; color: #dc2626;">‚ùå FAILED</td>
            </tr>
            <tr>
              <td style="padding: 10px; border-bottom: 1px solid #e5e7eb; font-weight: bold;">Time:</td>
              <td style="padding: 10px; border-bottom: 1px solid #e5e7eb;">${new Date().toLocaleString()}</td>
            </tr>
            <tr>
              <td style="padding: 10px; font-weight: bold;">Reason:</td>
              <td style="padding: 10px;">${reason}</td>
            </tr>
          </table>
        </div>
        
        <div style="background: #fef3c7; padding: 15px; margin: 20px 0; border-left: 4px solid #f59e0b;">
          <p style="margin: 0; color: #92400e;">
            <strong>Action Required:</strong> Please investigate this issue immediately.
          </p>
        </div>
        
        <div style="text-align: center; padding: 20px; color: #6b7280; font-size: 12px;">
          <p>This alert was generated by the SRE Monitoring Dashboard</p>
        </div>
      </div>
    `;

    return this.sendEmail({
      to: recipients,
      subject,
      html,
      text: `Production Alert: ${environment} - ${reason}`
    });
  }

  async sendDailyReport(recipients: string[], reportData: any): Promise<boolean> {
    const { environments, clusterMetrics, errorDistributions } = reportData;
    const successfulEnvs = environments.filter((env: any) => env.loginPage === 'Live').length;
    const totalEnvs = environments.length;
    const totalNodes = clusterMetrics.reduce((sum: number, cluster: any) => sum + cluster.nodes, 0);

    const subject = `üìä Daily Production Report - ${new Date().toLocaleDateString()}`;
    const html = `
      <div style="font-family: Arial, sans-serif; max-width: 800px; margin: 0 auto;">
        <div style="background: #2563eb; color: white; padding: 20px; text-align: center;">
          <h1 style="margin: 0;">üìä Daily Production Report</h1>
          <p style="margin: 10px 0 0 0;">${new Date().toLocaleDateString()}</p>
        </div>
        
        <div style="padding: 20px;">
          <div style="display: grid; grid-template-columns: repeat(auto-fit, minmax(200px, 1fr)); gap: 20px; margin-bottom: 30px;">
            <div style="background: #f0f9ff; padding: 20px; border-radius: 8px; text-align: center;">
              <h3 style="margin: 0; color: #1e40af;">Environment Health</h3>
              <p style="font-size: 24px; font-weight: bold; margin: 10px 0; color: ${successfulEnvs === totalEnvs ? '#059669' : '#dc2626'};">
                ${successfulEnvs}/${totalEnvs}
              </p>
              <p style="margin: 0; color: #6b7280;">Environments Live</p>
            </div>
            
            <div style="background: #f0fdf4; padding: 20px; border-radius: 8px; text-align: center;">
              <h3 style="margin: 0; color: #166534;">Total Nodes</h3>
              <p style="font-size: 24px; font-weight: bold; margin: 10px 0; color: #059669;">${totalNodes}</p>
              <p style="margin: 0; color: #6b7280;">Across All Clusters</p>
            </div>
          </div>
          
          <h2 style="color: #374151; border-bottom: 2px solid #e5e7eb; padding-bottom: 10px;">Environment Details</h2>
          <table style="width: 100%; border-collapse: collapse; margin-bottom: 30px;">
            <thead>
              <tr style="background: #f9fafb;">
                <th style="padding: 12px; text-align: left; border-bottom: 1px solid #e5e7eb;">Environment</th>
                <th style="padding: 12px; text-align: left; border-bottom: 1px solid #e5e7eb;">Region</th>
                <th style="padding: 12px; text-align: left; border-bottom: 1px solid #e5e7eb;">Status</th>
                <th style="padding: 12px; text-align: left; border-bottom: 1px solid #e5e7eb;">Query Time</th>
              </tr>
            </thead>
            <tbody>
              ${environments.map((env: any) => `
                <tr>
                  <td style="padding: 12px; border-bottom: 1px solid #e5e7eb;">${env.namespace}</td>
                  <td style="padding: 12px; border-bottom: 1px solid #e5e7eb;">${env.region}</td>
                  <td style="padding: 12px; border-bottom: 1px solid #e5e7eb; color: ${env.loginPage === 'Live' ? '#059669' : '#dc2626'};">
                    ${env.loginPage === 'Live' ? '‚úÖ' : '‚ùå'} ${env.loginPage}
                  </td>
                  <td style="padding: 12px; border-bottom: 1px solid #e5e7eb;">${env.queryTimeS}s</td>
                </tr>
              `).join('')}
            </tbody>
          </table>
        </div>
        
        <div style="text-align: center; padding: 20px; color: #6b7280; font-size: 12px; border-top: 1px solid #e5e7eb;">
          <p>Generated by SRE Monitoring Dashboard at ${new Date().toLocaleString()}</p>
        </div>
      </div>
    `;

    return this.sendEmail({
      to: recipients,
      subject,
      html,
      text: `Daily Production Report - ${new Date().toLocaleDateString()}`
    });
  }

  async testConnection(): Promise<boolean> {
    try {
      // Test by sending a simple test email
      const testMessage: EmailMessage = {
        to: [this.senderEmail],
        subject: 'SRE Dashboard - Email Test',
        html: '<p>This is a test email from the SRE Monitoring Dashboard.</p>',
        text: 'This is a test email from the SRE Monitoring Dashboard.'
      };

      return await this.sendEmail(testMessage);
    } catch (error) {
      console.error('Email connection test failed:', error);
      return false;
    }
  }
}